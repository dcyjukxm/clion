// 
// Decompiled by Procyon v0.5.30
// 

package com.jetbrains.cidr.lang.parser;

import com.jetbrains.cidr.lang.symbols.symtable.FileSymbolTableSerializer;
import com.intellij.psi.TokenType;
import java.util.Map;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.tree.TokenSet;
import com.intellij.psi.tree.IFileElementType;

public interface OCTokenTypes
{
    public static final IFileElementType OC_FILE = new OCFileElementType();
    public static final OCElementType IDENTIFIER = new OCElementType("IDENTIFIER");
    public static final OCElementType NUMERIC_LITERAL = new OCElementType("NUMERIC_LITERAL");
    public static final OCElementType UDL_SUFFIX = new OCElementType("UDL_SUFFIX");
    public static final TokenSet POSSIBLE_ID_NAMES = TokenSet.create(new IElementType[] { OCTokenTypes.IDENTIFIER, OCTokenTypes.UDL_SUFFIX });
    public static final OCElementType INTEGER_TYPE_SUFFIX = new OCElementType("INTEGER_TYPE_SUFFIX");
    public static final OCElementType FLOAT_TYPE_SUFFIX = new OCElementType("FLOAT_TYPE_SUFFIX");
    public static final OCElementType HEX_FLOAT_LITERAL = new OCElementType("HEX_FLOAT_LITERAL");
    public static final OCElementType EOL_ESCAPE = new OCElementType("EOL_ESCAPE");
    public static final OCElementType INTEGER_LITERAL = new OCElementType("INTEGER_LITERAL");
    public static final OCElementType WRONG_INTEGER_LITERAL = new OCElementType("WRONG_INTEGER_LITERAL");
    public static final OCElementType FLOAT_LITERAL = new OCElementType("FLOAT_LITERAL");
    public static final OCElementType WRONG_FLOAT_LITERAL = new OCElementType("WRONG_FLOAT_LITERAL");
    public static final OCElementType CHARACTER_LITERAL = new OCElementType("CHARACTER_LITERAL");
    public static final OCElementType STRING_LITERAL = new OCElementType("STRING_LITERAL");
    public static final OCElementType FAKE_TRUE = new OCElementType("FAKE_TRUE");
    public static final OCElementType FAKE_FALSE = new OCElementType("FAKE_FALSE");
    public static final OCElementType __NULL_KEYWORD = new OCElementType("__null");
    public static final OCElementType VERSION_LITERAL = new OCElementType("VERSION_LITERAL");
    public static final OCElementType AT = new OCPunctuatorElementType("@");
    public static final TokenSet LITERALS = TokenSet.create(new IElementType[] { OCTokenTypes.INTEGER_LITERAL, OCTokenTypes.FLOAT_LITERAL, OCTokenTypes.CHARACTER_LITERAL, OCTokenTypes.STRING_LITERAL, OCTokenTypes.AT, OCTokenTypes.FAKE_TRUE, OCTokenTypes.FAKE_FALSE, OCTokenTypes.WRONG_FLOAT_LITERAL, OCTokenTypes.WRONG_INTEGER_LITERAL, OCTokenTypes.__NULL_KEYWORD, OCTokenTypes.NUMERIC_LITERAL });
    public static final OCElementType RAW_STRING_LITERAL = new OCElementType("RAW_STRING_LITERAL");
    public static final OCElementType WRONG_RAW_STRING_LITERAL = new OCElementType("WRONG_RAW_STRING_LITERAL");
    public static final TokenSet RAW_STRING_LITERALS = TokenSet.create(new IElementType[] { OCTokenTypes.RAW_STRING_LITERAL, OCTokenTypes.WRONG_RAW_STRING_LITERAL });
    public static final TokenSet ALL_STRINGS = TokenSet.create(new IElementType[] { OCTokenTypes.STRING_LITERAL, OCTokenTypes.RAW_STRING_LITERAL, OCTokenTypes.WRONG_RAW_STRING_LITERAL });
    public static final TokenSet ALL_NUMERIC = TokenSet.create(new IElementType[] { OCTokenTypes.INTEGER_LITERAL, OCTokenTypes.FLOAT_LITERAL, OCTokenTypes.WRONG_INTEGER_LITERAL, OCTokenTypes.WRONG_FLOAT_LITERAL });
    public static final OCElementType BLOCK_COMMENT = new OCElementType("BLOCK_COMMENT");
    public static final OCElementType EOL_COMMENT = new OCElementType("EOL_COMMENT");
    public static final OCElementType CONDITIONALLY_NON_COMPILED_COMMENT = new OCElementType("CONDITIONALLY_NON_COMPILED_COMMENT");
    public static final OCElementType __AUTO_TYPE_KEYWORD = new OCKeywordElementType("__auto_type");
    public static final OCElementType AUTO_KEYWORD = new OCKeywordElementType("auto");
    public static final OCElementType BREAK_KEYWORD = new OCKeywordElementType("break");
    public static final OCElementType CASE_KEYWORD = new OCKeywordElementType("case");
    public static final OCElementType CHAR_KEYWORD = new OCKeywordElementType("char");
    public static final OCElementType CONST_KEYWORD = new OCKeywordElementType("const");
    public static final OCElementType CONTINUE_KEYWORD = new OCKeywordElementType("continue");
    public static final OCElementType DEFAULT_KEYWORD = new OCKeywordElementType("default");
    public static final OCElementType DO_KEYWORD = new OCKeywordElementType("do");
    public static final OCElementType DOUBLE_KEYWORD = new OCKeywordElementType("double");
    public static final OCElementType ELSE_KEYWORD = new OCKeywordElementType("else");
    public static final OCElementType ENUM_KEYWORD = new OCKeywordElementType("enum");
    public static final OCElementType EXTERN_KEYWORD = new OCKeywordElementType("extern");
    public static final OCElementType FLOAT_KEYWORD = new OCKeywordElementType("float");
    public static final OCElementType FOR_KEYWORD = new OCKeywordElementType("for");
    public static final OCElementType GOTO_KEYWORD = new OCKeywordElementType("goto");
    public static final OCElementType IF_KEYWORD = new OCKeywordElementType("if");
    public static final OCElementType INLINE_KEYWORD = new OCKeywordElementType("inline");
    public static final OCElementType NORETURN_KEYWORD = new OCKeywordElementType("_Noreturn");
    public static final OCElementType INT_KEYWORD = new OCKeywordElementType("int");
    public static final OCElementType LONG_KEYWORD = new OCKeywordElementType("long");
    public static final OCElementType REGISTER_KEYWORD = new OCKeywordElementType("register");
    public static final OCElementType THREAD_LOCAL_KEYWORD = new OCKeywordElementType("thread_local");
    public static final OCElementType THREAD_LOCAL_C_KEYWORD = new OCKeywordElementType("_Thread_local");
    public static final OCElementType __THREAD_KEYWORD = new OCKeywordElementType("__thread");
    public static final OCElementType RESTRICT_KEYWORD = new OCKeywordElementType("restrict");
    public static final OCElementType ATOMIC_KEYWORD = new OCKeywordElementType("_Atomic");
    public static final OCElementType STRONG_KEYWORD = new OCKeywordElementType("__strong");
    public static final OCElementType WEAK_KEYWORD = new OCKeywordElementType("__weak");
    public static final OCElementType UNSAFE_UNRETAINED_KEYWORD = new OCKeywordElementType("__unsafe_unretained");
    public static final OCElementType AUTORELEASING_KEYWORD = new OCKeywordElementType("__autoreleasing");
    public static final OCElementType BRIDGE_KEYWORD = new OCKeywordElementType("__bridge");
    public static final OCElementType BRIDGE_RETAINED_KEYWORD = new OCKeywordElementType("__bridge_retained");
    public static final OCElementType BRIDGE_TRANSFER_KEYWORD = new OCKeywordElementType("__bridge_transfer");
    public static final OCElementType BLOCK_KEYWORD = new OCKeywordElementType("__block");
    public static final OCElementType RETURN_KEYWORD = new OCKeywordElementType("return");
    public static final OCElementType SHORT_KEYWORD = new OCKeywordElementType("short");
    public static final OCElementType SIGNED_KEYWORD = new OCKeywordElementType("signed");
    public static final OCElementType SIZEOF_KEYWORD = new OCKeywordElementType("sizeof");
    public static final OCElementType ALIGNOF_KEYWORD = new OCKeywordElementType("__alignof__");
    public static final OCElementType ALIGNAS_KEYWORD = new OCKeywordElementType("_Alignas");
    public static final OCElementType TYPEOF_KEYWORD = new OCKeywordElementType("__typeof__");
    public static final OCElementType STATIC_KEYWORD = new OCKeywordElementType("static");
    public static final OCElementType STRUCT_KEYWORD = new OCKeywordElementType("struct");
    public static final OCElementType SWITCH_KEYWORD = new OCKeywordElementType("switch");
    public static final OCElementType TYPEDEF_KEYWORD = new OCKeywordElementType("typedef");
    public static final OCElementType UNION_KEYWORD = new OCKeywordElementType("union");
    public static final OCElementType UNSIGNED_KEYWORD = new OCKeywordElementType("unsigned");
    public static final OCElementType VOID_KEYWORD = new OCKeywordElementType("void");
    public static final OCElementType VOLATILE_KEYWORD = new OCKeywordElementType("volatile");
    public static final OCElementType WHILE_KEYWORD = new OCKeywordElementType("while");
    public static final OCElementType _BOOL_KEYWORD = new OCKeywordElementType("_Bool");
    public static final OCElementType _COMPLEX_KEYWORD = new OCKeywordElementType("_Complex");
    public static final OCElementType _IMAGINARY_KEYWORD = new OCKeywordElementType("_Imaginary");
    public static final OCElementType __REAL__KEYWORD = new OCKeywordElementType("__real__");
    public static final OCElementType __IMAG__KEYWORD = new OCKeywordElementType("__imag__");
    public static final OCElementType __ATTRIBUTE_KEYWORD = new OCKeywordElementType("__attribute__");
    public static final OCElementType __DECLSPEC_KEYWORD = new OCKeywordElementType("__declspec");
    public static final OCElementType __STDCALL_KEYWORD = new OCKeywordElementType("__stdcall");
    public static final OCElementType __THISCALL_KEYWORD = new OCKeywordElementType("__thiscall");
    public static final OCElementType __FASTCALL_KEYWORD = new OCKeywordElementType("__fastcall");
    public static final OCElementType __CDECL_KEYWORD = new OCKeywordElementType("__cdecl");
    public static final OCElementType __ASM_KEYWORD = new OCKeywordElementType("__asm");
    public static final OCElementType _NULLABLE_KEYWORD = new OCKeywordElementType("_Nullable");
    public static final OCElementType _NONNULL_KEYWORD = new OCKeywordElementType("_Nonnull");
    public static final OCElementType _NULL_UNSPECIFIED_KEYWORD = new OCKeywordElementType("_Null_unspecified");
    public static final OCElementType NULLABLE_KEYWORD = new OCKeywordElementType("nullable");
    public static final OCElementType NONNULL_KEYWORD = new OCKeywordElementType("nonnull");
    public static final OCElementType NULL_UNSPECIFIED_KEYWORD = new OCKeywordElementType("null_unspecified");
    public static final OCElementType COVARIANT_KEYWORD = new OCKeywordElementType("__covariant");
    public static final OCElementType CONTRAVARIANT_KEYWORD = new OCKeywordElementType("__contravariant");
    public static final OCElementType KINDOF_KEYWORD = new OCKeywordElementType("__kindof");
    public static final OCElementType STATIC_ASSERT_C_KEYWORD = new OCKeywordElementType("static_assert");
    public static final OCElementType __BUILTIN_AVAILABLE_KEYWORD = new OCKeywordElementType("__builtin_available");
    public static final OCElementType INTERFACE_KEYWORD = new OCKeywordElementType("interface");
    public static final OCElementType IMPLEMENTATION_KEYWORD = new OCKeywordElementType("implementation");
    public static final OCElementType PROTOCOL_KEYWORD = new OCKeywordElementType("protocol");
    public static final OCElementType END_KEYWORD = new OCKeywordElementType("end");
    public static final OCElementType PRIVATE_KEYWORD = new OCKeywordElementType("private");
    public static final OCElementType PACKAGE_KEYWORD = new OCKeywordElementType("package");
    public static final OCElementType OPTIONAL_KEYWORD = new OCKeywordElementType("optional");
    public static final OCElementType REQUIRED_KEYWORD = new OCKeywordElementType("required");
    public static final OCElementType PROTECTED_KEYWORD = new OCKeywordElementType("protected");
    public static final OCElementType PUBLIC_KEYWORD = new OCKeywordElementType("public");
    public static final OCElementType TRY_KEYWORD = new OCKeywordElementType("try");
    public static final OCElementType THROW_KEYWORD = new OCKeywordElementType("throw");
    public static final OCElementType CATCH_KEYWORD = new OCKeywordElementType("catch");
    public static final OCElementType FINALLY_KEYWORD = new OCKeywordElementType("finally");
    public static final OCElementType NOEXCEPT_KEYWORD = new OCKeywordElementType("noexcept");
    public static final OCElementType CLASS_KEYWORD = new OCKeywordElementType("class");
    public static final OCElementType SELECTOR_KEYWORD = new OCKeywordElementType("selector");
    public static final OCElementType AVAILABLE_KEYWORD = new OCKeywordElementType("available");
    public static final OCElementType ENCODE_KEYWORD = new OCKeywordElementType("encode");
    public static final OCElementType SYNCHRONIZED_KEYWORD = new OCKeywordElementType("synchronized");
    public static final OCElementType AUTO_RELEASE_POOL_KEYWORD = new OCKeywordElementType("autoreleasepool");
    public static final OCElementType PROPERTY_KEYWORD = new OCKeywordElementType("property");
    public static final OCElementType SYNTHESIZE_KEYWORD = new OCKeywordElementType("synthesize");
    public static final OCElementType DYNAMIC_KEYWORD = new OCKeywordElementType("dynamic");
    public static final OCElementType COMPATIBILITY_ALIAS_KEYWORD = new OCKeywordElementType("compatibility_alias");
    public static final OCElementType IMPORT_MODULE_KEYWORD = new OCKeywordElementType("import");
    public static final OCElementType GENERIC_KEYWORD = new OCKeywordElementType("_Generic");
    public static final OCElementType INT128_T_KEYWORD = new OCKeywordElementType("__int128_t");
    public static final OCElementType UINT128_T_KEYWORD = new OCKeywordElementType("__uint128_t");
    public static final TokenSet C_KEYWORDS = TokenSet.create(new IElementType[] { OCTokenTypes.__AUTO_TYPE_KEYWORD, OCTokenTypes.AUTO_KEYWORD, OCTokenTypes.BREAK_KEYWORD, OCTokenTypes.CASE_KEYWORD, OCTokenTypes.CHAR_KEYWORD, OCTokenTypes.CONST_KEYWORD, OCTokenTypes.CONTINUE_KEYWORD, OCTokenTypes.DEFAULT_KEYWORD, OCTokenTypes.DO_KEYWORD, OCTokenTypes.DOUBLE_KEYWORD, OCTokenTypes.ELSE_KEYWORD, OCTokenTypes.ENUM_KEYWORD, OCTokenTypes.EXTERN_KEYWORD, OCTokenTypes.FLOAT_KEYWORD, OCTokenTypes.FOR_KEYWORD, OCTokenTypes.GOTO_KEYWORD, OCTokenTypes.IF_KEYWORD, OCTokenTypes.INLINE_KEYWORD, OCTokenTypes.NORETURN_KEYWORD, OCTokenTypes.INT_KEYWORD, OCTokenTypes.LONG_KEYWORD, OCTokenTypes.REGISTER_KEYWORD, OCTokenTypes.RESTRICT_KEYWORD, OCTokenTypes.ATOMIC_KEYWORD, OCTokenTypes.RETURN_KEYWORD, OCTokenTypes.SHORT_KEYWORD, OCTokenTypes.SIGNED_KEYWORD, OCTokenTypes.SIZEOF_KEYWORD, OCTokenTypes.STATIC_KEYWORD, OCTokenTypes.STRUCT_KEYWORD, OCTokenTypes.SWITCH_KEYWORD, OCTokenTypes.TYPEDEF_KEYWORD, OCTokenTypes.UNION_KEYWORD, OCTokenTypes.UNSIGNED_KEYWORD, OCTokenTypes.VOID_KEYWORD, OCTokenTypes.VOLATILE_KEYWORD, OCTokenTypes.WHILE_KEYWORD, OCTokenTypes.STRONG_KEYWORD, OCTokenTypes.WEAK_KEYWORD, OCTokenTypes.UNSAFE_UNRETAINED_KEYWORD, OCTokenTypes.THREAD_LOCAL_C_KEYWORD, OCTokenTypes._BOOL_KEYWORD, OCTokenTypes._COMPLEX_KEYWORD, OCTokenTypes._IMAGINARY_KEYWORD, OCTokenTypes.__ATTRIBUTE_KEYWORD, OCTokenTypes.__DECLSPEC_KEYWORD, OCTokenTypes.__STDCALL_KEYWORD, OCTokenTypes.__THISCALL_KEYWORD, OCTokenTypes.__FASTCALL_KEYWORD, OCTokenTypes.__CDECL_KEYWORD, OCTokenTypes.__ASM_KEYWORD, OCTokenTypes.ALIGNOF_KEYWORD, OCTokenTypes.ALIGNAS_KEYWORD, OCTokenTypes.TYPEOF_KEYWORD, OCTokenTypes.__IMAG__KEYWORD, OCTokenTypes.__REAL__KEYWORD, OCTokenTypes.__THREAD_KEYWORD, OCTokenTypes.STATIC_ASSERT_C_KEYWORD, OCTokenTypes.GENERIC_KEYWORD, OCTokenTypes.INT128_T_KEYWORD, OCTokenTypes.UINT128_T_KEYWORD, OCTokenTypes.__BUILTIN_AVAILABLE_KEYWORD });
    public static final TokenSet KEYWORDS_WITH_DOGS = TokenSet.create(new IElementType[] { OCTokenTypes.INTERFACE_KEYWORD, OCTokenTypes.IMPLEMENTATION_KEYWORD, OCTokenTypes.PROTOCOL_KEYWORD, OCTokenTypes.END_KEYWORD, OCTokenTypes.OPTIONAL_KEYWORD, OCTokenTypes.REQUIRED_KEYWORD, OCTokenTypes.PRIVATE_KEYWORD, OCTokenTypes.PROTECTED_KEYWORD, OCTokenTypes.PUBLIC_KEYWORD, OCTokenTypes.PACKAGE_KEYWORD, OCTokenTypes.AVAILABLE_KEYWORD, OCTokenTypes.TRY_KEYWORD, OCTokenTypes.THROW_KEYWORD, OCTokenTypes.CATCH_KEYWORD, OCTokenTypes.FINALLY_KEYWORD, OCTokenTypes.CLASS_KEYWORD, OCTokenTypes.SELECTOR_KEYWORD, OCTokenTypes.ENCODE_KEYWORD, OCTokenTypes.SYNCHRONIZED_KEYWORD, OCTokenTypes.AUTO_RELEASE_POOL_KEYWORD, OCTokenTypes.PROPERTY_KEYWORD, OCTokenTypes.SYNTHESIZE_KEYWORD, OCTokenTypes.DYNAMIC_KEYWORD, OCTokenTypes.COMPATIBILITY_ALIAS_KEYWORD, OCTokenTypes.IMPORT_MODULE_KEYWORD });
    public static final TokenSet AUTO_KEYWORDS = TokenSet.create(new IElementType[] { OCTokenTypes.AUTO_KEYWORD, OCTokenTypes.__AUTO_TYPE_KEYWORD });
    public static final TokenSet NULLABILITY_KEYWORDS = TokenSet.create(new IElementType[] { OCTokenTypes._NULLABLE_KEYWORD, OCTokenTypes._NONNULL_KEYWORD, OCTokenTypes._NULL_UNSPECIFIED_KEYWORD });
    public static final TokenSet IN_SELECTOR_NULLABILITY_KEYWORDS = TokenSet.create(new IElementType[] { OCTokenTypes.NULLABLE_KEYWORD, OCTokenTypes.NONNULL_KEYWORD, OCTokenTypes.NULL_UNSPECIFIED_KEYWORD });
    public static final TokenSet OBJC_KEYWORDS = TokenSet.orSet(new TokenSet[] { OCTokenTypes.KEYWORDS_WITH_DOGS, TokenSet.create(new IElementType[] { OCTokenTypes.AUTORELEASING_KEYWORD, OCTokenTypes.BRIDGE_KEYWORD, OCTokenTypes.BRIDGE_RETAINED_KEYWORD, OCTokenTypes.BRIDGE_TRANSFER_KEYWORD, OCTokenTypes.AT, OCTokenTypes.COVARIANT_KEYWORD, OCTokenTypes.CONTRAVARIANT_KEYWORD, OCTokenTypes.KINDOF_KEYWORD }) });
    public static final TokenSet IVAR_VISIBILITY_KEYWORDS = TokenSet.create(new IElementType[] { OCTokenTypes.PRIVATE_KEYWORD, OCTokenTypes.PACKAGE_KEYWORD, OCTokenTypes.PROTECTED_KEYWORD, OCTokenTypes.PUBLIC_KEYWORD });
    public static final TokenSet PROTOCOL_METHODS_KEYWORDS = TokenSet.create(new IElementType[] { OCTokenTypes.OPTIONAL_KEYWORD, OCTokenTypes.REQUIRED_KEYWORD });
    public static final TokenSet OBJC_CLASS_KEYWORDS = TokenSet.create(new IElementType[] { OCTokenTypes.INTERFACE_KEYWORD, OCTokenTypes.IMPLEMENTATION_KEYWORD, OCTokenTypes.PROTOCOL_KEYWORD, OCTokenTypes.CLASS_KEYWORD });
    public static final TokenSet BRIDGE_CAST_KEYWORDS = TokenSet.create(new IElementType[] { OCTokenTypes.BRIDGE_KEYWORD, OCTokenTypes.BRIDGE_RETAINED_KEYWORD, OCTokenTypes.BRIDGE_TRANSFER_KEYWORD });
    public static final OCKeywordElementType BOOL_CPP_KEYWORD = new OCKeywordElementType("bool");
    public static final OCKeywordElementType CHAR16_T_CPP_KEYWORD = new OCKeywordElementType("char16_t");
    public static final OCKeywordElementType CHAR32_T_CPP_KEYWORD = new OCKeywordElementType("char32_t");
    public static final OCKeywordElementType CONST_CAST_CPP_KEYWORD = new OCKeywordElementType("const_cast");
    public static final OCKeywordElementType DELETE_CPP_KEYWORD = new OCKeywordElementType("delete");
    public static final OCKeywordElementType DYNAMIC_CAST_CPP_KEYWORD = new OCKeywordElementType("dynamic_cast");
    public static final OCKeywordElementType EXPLICIT_CPP_KEYWORD = new OCKeywordElementType("explicit");
    public static final OCKeywordElementType FALSE_CPP_KEYWORD = new OCKeywordElementType("false");
    public static final OCKeywordElementType FRIEND_CPP_KEYWORD = new OCKeywordElementType("friend");
    public static final OCKeywordElementType MUTABLE_CPP_KEYWORD = new OCKeywordElementType("mutable");
    public static final OCKeywordElementType NAMESPACE_CPP_KEYWORD = new OCKeywordElementType("namespace");
    public static final OCKeywordElementType NEW_CPP_KEYWORD = new OCKeywordElementType("new");
    public static final OCKeywordElementType NULL_CPP_KEYWORD = new OCKeywordElementType("nullptr");
    public static final OCKeywordElementType OPERATOR_CPP_KEYWORD = new OCKeywordElementType("operator");
    public static final OCKeywordElementType REINTERPRET_CAST_CPP_KEYWORD = new OCKeywordElementType("reinterpret_cast");
    public static final OCKeywordElementType STATIC_CAST_CPP_KEYWORD = new OCKeywordElementType("static_cast");
    public static final OCKeywordElementType TEMPLATE_CPP_KEYWORD = new OCKeywordElementType("template");
    public static final OCKeywordElementType THIS_CPP_KEYWORD = new OCKeywordElementType("this");
    public static final OCKeywordElementType TRUE_CPP_KEYWORD = new OCKeywordElementType("true");
    public static final OCKeywordElementType TYPEID_CPP_KEYWORD = new OCKeywordElementType("typeid");
    public static final OCKeywordElementType TYPENAME_CPP_KEYWORD = new OCKeywordElementType("typename");
    public static final OCKeywordElementType USING_CPP_KEYWORD = new OCKeywordElementType("using");
    public static final OCKeywordElementType VIRTUAL_CPP_KEYWORD = new OCKeywordElementType("virtual");
    public static final OCKeywordElementType WCHAR_T_CPP_KEYWORD = new OCKeywordElementType("wchar_t");
    public static final OCKeywordElementType OVERRIDE_CPP_KEYWORD = new OCKeywordElementType("override");
    public static final OCKeywordElementType FINAL_CPP_KEYWORD = new OCKeywordElementType("final");
    public static final OCKeywordElementType DECLTYPE_CPP_KEYWORD = new OCKeywordElementType("decltype");
    public static final OCKeywordElementType CONSTEXPR_CPP_KEYWORD = new OCKeywordElementType("constexpr");
    public static final OCKeywordElementType ALIGNOF_CPP_KEYWORD = new OCKeywordElementType("alignof");
    public static final OCKeywordElementType ALIGNAS_CPP_KEYWORD = new OCKeywordElementType("alignas");
    public static final OCKeywordElementType STATIC_ASSERT_KEYWORD = new OCKeywordElementType("static_assert");
    public static final OCKeywordElementType UNDERLYING_TYPE_KEYWORD = new OCKeywordElementType("__underlying_type");
    public static final TokenSet CPP_KEYWORDS = TokenSet.create(new IElementType[] { OCTokenTypes.BOOL_CPP_KEYWORD, OCTokenTypes.CHAR16_T_CPP_KEYWORD, OCTokenTypes.CHAR32_T_CPP_KEYWORD, OCTokenTypes.CATCH_KEYWORD, OCTokenTypes.CLASS_KEYWORD, OCTokenTypes.CONST_CAST_CPP_KEYWORD, OCTokenTypes.DELETE_CPP_KEYWORD, OCTokenTypes.DYNAMIC_CAST_CPP_KEYWORD, OCTokenTypes.EXPLICIT_CPP_KEYWORD, OCTokenTypes.FALSE_CPP_KEYWORD, OCTokenTypes.FRIEND_CPP_KEYWORD, OCTokenTypes.MUTABLE_CPP_KEYWORD, OCTokenTypes.NAMESPACE_CPP_KEYWORD, OCTokenTypes.NEW_CPP_KEYWORD, OCTokenTypes.NULL_CPP_KEYWORD, OCTokenTypes.OPERATOR_CPP_KEYWORD, OCTokenTypes.PRIVATE_KEYWORD, OCTokenTypes.PUBLIC_KEYWORD, OCTokenTypes.PROTECTED_KEYWORD, OCTokenTypes.REINTERPRET_CAST_CPP_KEYWORD, OCTokenTypes.STATIC_CAST_CPP_KEYWORD, OCTokenTypes.THREAD_LOCAL_KEYWORD, OCTokenTypes.TEMPLATE_CPP_KEYWORD, OCTokenTypes.THIS_CPP_KEYWORD, OCTokenTypes.THROW_KEYWORD, OCTokenTypes.NOEXCEPT_KEYWORD, OCTokenTypes.TRUE_CPP_KEYWORD, OCTokenTypes.TRY_KEYWORD, OCTokenTypes.TYPEID_CPP_KEYWORD, OCTokenTypes.TYPENAME_CPP_KEYWORD, OCTokenTypes.USING_CPP_KEYWORD, OCTokenTypes.VIRTUAL_CPP_KEYWORD, OCTokenTypes.WCHAR_T_CPP_KEYWORD, OCTokenTypes.DECLTYPE_CPP_KEYWORD, OCTokenTypes.CONSTEXPR_CPP_KEYWORD, OCTokenTypes.ALIGNOF_CPP_KEYWORD, OCTokenTypes.ALIGNAS_CPP_KEYWORD, OCTokenTypes.STATIC_ASSERT_KEYWORD, OCTokenTypes.OVERRIDE_CPP_KEYWORD, OCTokenTypes.FINAL_CPP_KEYWORD, OCTokenTypes.UNDERLYING_TYPE_KEYWORD });
    public static final TokenSet CPP_UNARY_OPERATIONS = TokenSet.create(new IElementType[] { OCTokenTypes.NEW_CPP_KEYWORD, OCTokenTypes.DELETE_CPP_KEYWORD });
    public static final TokenSet CPP_LITERALS = TokenSet.create(new IElementType[] { OCTokenTypes.TRUE_CPP_KEYWORD, OCTokenTypes.FALSE_CPP_KEYWORD, OCTokenTypes.NULL_CPP_KEYWORD });
    public static final TokenSet CPP_CAST_OPERATIONS = TokenSet.create(new IElementType[] { OCTokenTypes.CONST_CAST_CPP_KEYWORD, OCTokenTypes.DYNAMIC_CAST_CPP_KEYWORD, OCTokenTypes.STATIC_CAST_CPP_KEYWORD, OCTokenTypes.REINTERPRET_CAST_CPP_KEYWORD });
    public static final TokenSet CPP_VISIBILITY_KEYWORDS = TokenSet.create(new IElementType[] { OCTokenTypes.PRIVATE_KEYWORD, OCTokenTypes.PROTECTED_KEYWORD, OCTokenTypes.PUBLIC_KEYWORD });
    public static final TokenSet CPP_VIRTUAL_SPECIFIERS = TokenSet.create(new IElementType[] { OCTokenTypes.FINAL_CPP_KEYWORD, OCTokenTypes.OVERRIDE_CPP_KEYWORD });
    public static final TokenSet CPP_CLASS_VIRTUAL_SPECIFIERS = TokenSet.create(new IElementType[] { OCTokenTypes.FINAL_CPP_KEYWORD });
    public static final OCElementType IF_DIRECTIVE = new OCPreprocessorDirectiveElementType("#if");
    public static final OCElementType IFDEF_DIRECTIVE = new OCPreprocessorDirectiveElementType("#ifdef");
    public static final OCElementType IFNDEF_DIRECTIVE = new OCPreprocessorDirectiveElementType("#ifndef");
    public static final OCElementType ELIF_DIRECTIVE = new OCPreprocessorDirectiveElementType("#elif");
    public static final OCElementType ELSE_DIRECTIVE = new OCPreprocessorDirectiveElementType("#else");
    public static final OCElementType ENDIF_DIRECTIVE = new OCPreprocessorDirectiveElementType("#endif");
    public static final OCElementType INCLUDE_DIRECTIVE = new OCPreprocessorDirectiveElementType("#include");
    public static final OCElementType INCLUDE_NEXT_DIRECTIVE = new OCPreprocessorDirectiveElementType("#include_next");
    public static final OCElementType IMPORT_DIRECTIVE = new OCPreprocessorDirectiveElementType("#import");
    public static final OCElementType DEFINE_DIRECTIVE = new OCPreprocessorDirectiveElementType("#define");
    public static final OCElementType UNDEF_DIRECTIVE = new OCPreprocessorDirectiveElementType("#undef");
    public static final OCElementType LINE_DIRECTIVE = new OCPreprocessorDirectiveElementType("#line");
    public static final OCElementType ERROR_DIRECTIVE = new OCPreprocessorDirectiveElementType("#error");
    public static final OCElementType WARNING_DIRECTIVE = new OCPreprocessorDirectiveElementType("#warning");
    public static final OCElementType PRAGMA_DIRECTIVE = new OCPreprocessorDirectiveElementType("#pragma");
    public static final OCElementType CPP_PRAGMA_KEYWORD = new OCKeywordElementType("_Pragma");
    public static final OCElementType UNKNOWN_DIRECTIVE = new OCPreprocessorDirectiveElementType("#unknown");
    public static final OCElementType EMPTY_DIRECTIVE = new OCPreprocessorDirectiveElementType("#");
    public static final OCElementType HEADER_INLINED_PATH_LITERAL = new OCElementType("HEADER_INLINED_PATH_LITERAL");
    public static final OCElementType HEADER_TOO_LONG_INLINED_PATH_LITERAL = new OCElementType("HEADER_TOO_LONG_INLINED_PATH_LITERAL");
    public static final OCElementType HEADER_PATH_LITERAL = new OCElementType("HEADER_PATH_LITERAL");
    public static final OCElementType PRAGMA_ONCE_LITERAL = new OCElementType("once");
    public static final OCElementType PRAGMA_MARK_LITERAL = new OCElementType("mark");
    public static final OCElementType PRAGMA_CLANG_LITERAL = new OCElementType("clang");
    public static final OCElementType PRAGMA_IDE_LITERAL = new OCElementType("ide");
    public static final OCElementType PRAGMA_DIAGNOSTIC_LITERAL = new OCElementType("diagnostic");
    public static final OCElementType PRAGMA_PUSH_LITERAL = new OCElementType("push");
    public static final OCElementType PRAGMA_POP_LITERAL = new OCElementType("pop");
    public static final OCElementType PRAGMA_IGNORED_LITERAL = new OCElementType("ignored");
    public static final OCElementType PRAGMA_WARNING_LITERAL = new OCElementType("warning");
    public static final OCElementType PRAGMA_ERROR_LITERAL = new OCElementType("error");
    public static final OCElementType PRAGMA_FATAL_LITERAL = new OCElementType("fatal");
    public static final IElementType DIRECTIVE_CONTENT = new OCElementType("directive content");
    public static final IElementType PRAGMA_DIRECTIVE_CONTENT = new OCElementType("pragma content");
    public static final IElementType INCLUDE_DIRECTIVE_CONTENT = new OCElementType("include content");
    public static final IElementType END_OF_DIRECTIVE_CONTENT = new OCElementType("END_OF_DIRECTIVE_CONTENT");
    public static final TokenSet IF_DIRECTIVES = TokenSet.create(new IElementType[] { OCTokenTypes.IF_DIRECTIVE, OCTokenTypes.IFDEF_DIRECTIVE, OCTokenTypes.IFNDEF_DIRECTIVE });
    public static final TokenSet END_IF_DIRECTIVES = TokenSet.create(new IElementType[] { OCTokenTypes.ENDIF_DIRECTIVE, OCTokenTypes.ELSE_DIRECTIVE, OCTokenTypes.ELIF_DIRECTIVE });
    public static final TokenSet DIRECTIVES = TokenSet.create(new IElementType[] { OCTokenTypes.IF_DIRECTIVE, OCTokenTypes.IFDEF_DIRECTIVE, OCTokenTypes.IFNDEF_DIRECTIVE, OCTokenTypes.ELIF_DIRECTIVE, OCTokenTypes.ELSE_DIRECTIVE, OCTokenTypes.ENDIF_DIRECTIVE, OCTokenTypes.INCLUDE_DIRECTIVE, OCTokenTypes.INCLUDE_NEXT_DIRECTIVE, OCTokenTypes.IMPORT_DIRECTIVE, OCTokenTypes.DEFINE_DIRECTIVE, OCTokenTypes.UNDEF_DIRECTIVE, OCTokenTypes.LINE_DIRECTIVE, OCTokenTypes.ERROR_DIRECTIVE, OCTokenTypes.WARNING_DIRECTIVE, OCTokenTypes.PRAGMA_DIRECTIVE, OCTokenTypes.UNKNOWN_DIRECTIVE, OCTokenTypes.EMPTY_DIRECTIVE });
    public static final TokenSet BLOCK_UNSAFE_DIRECTIVES = TokenSet.create(new IElementType[] { OCTokenTypes.INCLUDE_DIRECTIVE, OCTokenTypes.INCLUDE_NEXT_DIRECTIVE, OCTokenTypes.IMPORT_DIRECTIVE, OCTokenTypes.DEFINE_DIRECTIVE, OCTokenTypes.UNDEF_DIRECTIVE, OCTokenTypes.LINE_DIRECTIVE });
    public static final OCPunctuatorElementType LBRACKET = new OCPunctuatorElementType("[");
    public static final OCPunctuatorElementType RBRACKET = new OCPunctuatorElementType("]");
    public static final OCPunctuatorElementType LBRACE = new OCPunctuatorElementType("{");
    public static final OCPunctuatorElementType RBRACE = new OCPunctuatorElementType("}");
    public static final OCPunctuatorElementType LPAR = new OCPunctuatorElementType("(");
    public static final OCPunctuatorElementType RPAR = new OCPunctuatorElementType(")");
    public static final OCPunctuatorElementType DOT = new OCPunctuatorElementType(".");
    public static final OCPunctuatorElementType DOT_MUL = new OCPunctuatorElementType(".*");
    public static final OCPunctuatorElementType DEREF = new OCPunctuatorElementType("->");
    public static final OCPunctuatorElementType DEREF_MUL = new OCPunctuatorElementType("->*");
    public static final OCPunctuatorElementType PLUSPLUS = new OCPunctuatorElementType("++");
    public static final OCPunctuatorElementType MINUSMINUS = new OCPunctuatorElementType("--");
    public static final OCPunctuatorElementType AND = new OCPunctuatorElementType("&", "bitand");
    public static final OCPunctuatorElementType MUL = new OCPunctuatorElementType("*");
    public static final OCPunctuatorElementType PLUS = new OCPunctuatorElementType("+");
    public static final OCPunctuatorElementType MINUS = new OCPunctuatorElementType("-");
    public static final OCPunctuatorElementType TILDE = new OCPunctuatorElementType("~", "compl");
    public static final OCPunctuatorElementType EXCL = new OCPunctuatorElementType("!", "not");
    public static final OCPunctuatorElementType DIV = new OCPunctuatorElementType("/");
    public static final OCPunctuatorElementType PERC = new OCPunctuatorElementType("%");
    public static final OCPunctuatorElementType LTLT = new OCPunctuatorElementType("<<");
    public static final OCPunctuatorElementType GTGT = new OCPunctuatorElementType(">>");
    public static final OCPunctuatorElementType LT = new OCPunctuatorElementType("<");
    public static final OCPunctuatorElementType GT = new OCPunctuatorElementType(">");
    public static final OCPunctuatorElementType LTEQ = new OCPunctuatorElementType("<=");
    public static final OCPunctuatorElementType GTEQ = new OCPunctuatorElementType(">=");
    public static final OCPunctuatorElementType EQEQ = new OCPunctuatorElementType("==");
    public static final OCPunctuatorElementType EXCLEQ = new OCPunctuatorElementType("!=", "not_eq");
    public static final OCPunctuatorElementType XOR = new OCPunctuatorElementType("^", "xor");
    public static final OCPunctuatorElementType OR = new OCPunctuatorElementType("|", "bitor");
    public static final OCPunctuatorElementType ANDAND = new OCPunctuatorElementType("&&", "and");
    public static final OCPunctuatorElementType OROR = new OCPunctuatorElementType("||", "or");
    public static final OCPunctuatorElementType QUEST = new OCPunctuatorElementType("?");
    public static final OCPunctuatorElementType COLON = new OCPunctuatorElementType(":");
    public static final OCPunctuatorElementType COLON2X = new OCPunctuatorElementType("::");
    public static final OCPunctuatorElementType SEMICOLON = new OCPunctuatorElementType(";");
    public static final OCPunctuatorElementType ELLIPSIS = new OCPunctuatorElementType("...");
    public static final OCPunctuatorElementType EQ = new OCPunctuatorElementType("=");
    public static final OCPunctuatorElementType MULTEQ = new OCPunctuatorElementType("*=");
    public static final OCPunctuatorElementType DIVEQ = new OCPunctuatorElementType("/=");
    public static final OCPunctuatorElementType PERCEQ = new OCPunctuatorElementType("%=");
    public static final OCPunctuatorElementType PLUSEQ = new OCPunctuatorElementType("+=");
    public static final OCPunctuatorElementType MINUSEQ = new OCPunctuatorElementType("-=");
    public static final OCPunctuatorElementType LTLTEQ = new OCPunctuatorElementType("<<=");
    public static final OCPunctuatorElementType GTGTEQ = new OCPunctuatorElementType(">>=");
    public static final OCPunctuatorElementType ANDEQ = new OCPunctuatorElementType("&=", "and_eq");
    public static final OCPunctuatorElementType XOREQ = new OCPunctuatorElementType("^=", "xor_eq");
    public static final OCPunctuatorElementType OREQ = new OCPunctuatorElementType("|=", "or_eq");
    public static final OCPunctuatorElementType COMMA = new OCPunctuatorElementType(",");
    public static final OCPunctuatorElementType HASH = new OCPunctuatorElementType("#");
    public static final OCPunctuatorElementType HASHHASH = new OCPunctuatorElementType("##");
    public static final OCPunctuatorElementType TEMPLATE_START_MARK = new OCPunctuatorElementType("<#");
    public static final OCPunctuatorElementType TEMPLATE_STOP_MARK = new OCPunctuatorElementType("#>");
    public static final TokenSet ASSIGNMENT_OPERATIONS = TokenSet.create(new IElementType[] { OCTokenTypes.EQ, OCTokenTypes.MULTEQ, OCTokenTypes.DIVEQ, OCTokenTypes.PERCEQ, OCTokenTypes.PLUSEQ, OCTokenTypes.MINUSEQ, OCTokenTypes.LTLTEQ, OCTokenTypes.GTGTEQ, OCTokenTypes.ANDEQ, OCTokenTypes.XOREQ, OCTokenTypes.OREQ });
    public static final TokenSet UNARY_OPERATIONS = TokenSet.create(new IElementType[] { OCTokenTypes.AND, OCTokenTypes.MUL, OCTokenTypes.PLUS, OCTokenTypes.MINUS, OCTokenTypes.TILDE, OCTokenTypes.EXCL, OCTokenTypes.__IMAG__KEYWORD, OCTokenTypes.__REAL__KEYWORD, OCTokenTypes.UDL_SUFFIX });
    public static final TokenSet SHIFT_OPERATIONS = TokenSet.create(new IElementType[] { OCTokenTypes.LTLT, OCTokenTypes.GTGT });
    public static final TokenSet BINARY_OPERATIONS = TokenSet.create(new IElementType[] { OCTokenTypes.OROR, OCTokenTypes.ANDAND, OCTokenTypes.OR, OCTokenTypes.XOR, OCTokenTypes.AND, OCTokenTypes.EQEQ, OCTokenTypes.EXCLEQ, OCTokenTypes.LT, OCTokenTypes.GT, OCTokenTypes.LTEQ, OCTokenTypes.GTEQ, OCTokenTypes.LTLT, OCTokenTypes.GTGT, OCTokenTypes.PLUS, OCTokenTypes.MINUS, OCTokenTypes.MUL, OCTokenTypes.DIV, OCTokenTypes.PERC, OCTokenTypes.DOT_MUL, OCTokenTypes.DEREF_MUL });
    public static final TokenSet ARITHMETIC_OPERATIONS = TokenSet.create(new IElementType[] { OCTokenTypes.MUL, OCTokenTypes.DIV, OCTokenTypes.PERC, OCTokenTypes.PLUS, OCTokenTypes.MINUS, OCTokenTypes.MULTEQ, OCTokenTypes.DIVEQ, OCTokenTypes.PERCEQ, OCTokenTypes.PLUSEQ, OCTokenTypes.MINUSEQ, OCTokenTypes.PLUSPLUS, OCTokenTypes.MINUSMINUS, OCTokenTypes.LT, OCTokenTypes.GT, OCTokenTypes.LTEQ, OCTokenTypes.GTEQ, OCTokenTypes.EQEQ, OCTokenTypes.EXCLEQ });
    public static final TokenSet ONLY_INTEGER_ARITHMETIC_OPERATIONS = TokenSet.create(new IElementType[] { OCTokenTypes.PERC, OCTokenTypes.PERCEQ });
    public static final TokenSet LOGIC_OPERATIONS = TokenSet.create(new IElementType[] { OCTokenTypes.EXCL, OCTokenTypes.OROR, OCTokenTypes.ANDAND });
    public static final TokenSet BITLOGIC_OPERATIONS = TokenSet.create(new IElementType[] { OCTokenTypes.TILDE, OCTokenTypes.LTLT, OCTokenTypes.GTGT, OCTokenTypes.OR, OCTokenTypes.AND, OCTokenTypes.LTLTEQ, OCTokenTypes.GTGTEQ, OCTokenTypes.ANDEQ, OCTokenTypes.XOREQ, OCTokenTypes.OREQ, OCTokenTypes.XOR });
    public static final TokenSet COMPARISON_OPERATIONS = TokenSet.create(new IElementType[] { OCTokenTypes.LT, OCTokenTypes.GT, OCTokenTypes.LTEQ, OCTokenTypes.GTEQ, OCTokenTypes.EQEQ, OCTokenTypes.EXCLEQ });
    public static final TokenSet OVERLOADED_CPP_OPERATORS = TokenSet.create(new IElementType[] { OCTokenTypes.PLUS, OCTokenTypes.MINUS, OCTokenTypes.MUL, OCTokenTypes.DIV, OCTokenTypes.PERC, OCTokenTypes.XOR, OCTokenTypes.AND, OCTokenTypes.OR, OCTokenTypes.TILDE, OCTokenTypes.EXCL, OCTokenTypes.EQ, OCTokenTypes.LT, OCTokenTypes.GT, OCTokenTypes.PLUSEQ, OCTokenTypes.MINUSEQ, OCTokenTypes.MULTEQ, OCTokenTypes.DIVEQ, OCTokenTypes.PERCEQ, OCTokenTypes.ANDEQ, OCTokenTypes.XOREQ, OCTokenTypes.OREQ, OCTokenTypes.LTLT, OCTokenTypes.GTGT, OCTokenTypes.LTLTEQ, OCTokenTypes.GTGTEQ, OCTokenTypes.EQEQ, OCTokenTypes.EXCLEQ, OCTokenTypes.LTEQ, OCTokenTypes.GTEQ, OCTokenTypes.ANDAND, OCTokenTypes.OROR, OCTokenTypes.PLUSPLUS, OCTokenTypes.MINUSMINUS, OCTokenTypes.COMMA, OCTokenTypes.DEREF, OCTokenTypes.DEREF_MUL, OCTokenTypes.DOT_MUL, OCTokenTypes.NEW_CPP_KEYWORD, OCTokenTypes.DELETE_CPP_KEYWORD, OCTokenTypes.LPAR, OCTokenTypes.RPAR, OCTokenTypes.LBRACKET, OCTokenTypes.RBRACKET });
    public static final TokenSet OVERLOADED_CPP_OPERATORS_ID_PARTS = TokenSet.orSet(new TokenSet[] { OCTokenTypes.OVERLOADED_CPP_OPERATORS, OCTokenTypes.POSSIBLE_ID_NAMES, TokenSet.create(new IElementType[] { OCTokenTypes.STRING_LITERAL }) });
    public static final TokenSet OPERATORS = TokenSet.orSet(new TokenSet[] { OCTokenTypes.ASSIGNMENT_OPERATIONS, OCTokenTypes.UNARY_OPERATIONS, OCTokenTypes.BINARY_OPERATIONS, OCTokenTypes.ARITHMETIC_OPERATIONS });
    public static final TokenSet WHITE_SPACE_OR_COMMENT_BIT_SET = TokenSet.create(new IElementType[] { TokenType.WHITE_SPACE, OCTokenTypes.EOL_ESCAPE, OCTokenTypes.BLOCK_COMMENT, OCTokenTypes.EOL_COMMENT, OCTokenTypes.CONDITIONALLY_NON_COMPILED_COMMENT });
    public static final TokenSet COMMENTS = TokenSet.create(new IElementType[] { OCTokenTypes.BLOCK_COMMENT, OCTokenTypes.EOL_COMMENT, OCTokenTypes.CONDITIONALLY_NON_COMPILED_COMMENT });
    public static final TokenSet WHITESPACES = TokenSet.create(new IElementType[] { TokenType.WHITE_SPACE });
    public static final TokenSet STORAGE_CLASS_SPECIFIERS = TokenSet.create(new IElementType[] { OCTokenTypes.TYPEDEF_KEYWORD, OCTokenTypes.EXTERN_KEYWORD, OCTokenTypes.STATIC_KEYWORD, OCTokenTypes.REGISTER_KEYWORD, OCTokenTypes.THREAD_LOCAL_KEYWORD, OCTokenTypes.THREAD_LOCAL_C_KEYWORD, OCTokenTypes.__THREAD_KEYWORD });
    public static final TokenSet DECLARATION_SPECIFIERS_IN_TYPES = TokenSet.create(new IElementType[] { OCTokenTypes.EXTERN_KEYWORD, OCTokenTypes.REGISTER_KEYWORD, OCTokenTypes.THREAD_LOCAL_KEYWORD, OCTokenTypes.THREAD_LOCAL_C_KEYWORD, OCTokenTypes.__THREAD_KEYWORD, OCTokenTypes.INLINE_KEYWORD, OCTokenTypes.NORETURN_KEYWORD, OCTokenTypes.EXPLICIT_CPP_KEYWORD, OCTokenTypes.STATIC_KEYWORD, OCTokenTypes.FRIEND_CPP_KEYWORD, OCTokenTypes.VIRTUAL_CPP_KEYWORD, OCTokenTypes.CONSTEXPR_CPP_KEYWORD });
    public static final TokenSet DECLARATOR_MODIFIERS = TokenSet.create(new IElementType[] { OCTokenTypes.MUL, OCTokenTypes.XOR, OCTokenTypes.AND, OCTokenTypes.ANDAND, OCTokenTypes.CONST_KEYWORD, OCTokenTypes.VOLATILE_KEYWORD });
    public static final TokenSet TYPE_MODIFIERS = TokenSet.create(new IElementType[] { OCTokenTypes.MUL, OCTokenTypes.AND, OCTokenTypes.ANDAND });
    public static final TokenSet FUNCTION_PTR_MODIFIERS = TokenSet.create(new IElementType[] { OCTokenTypes.MUL, OCTokenTypes.AND, OCTokenTypes.ANDAND, OCTokenTypes.XOR });
    public static final TokenSet SIMPLE_TYPE_SPECIFIERS = TokenSet.create(new IElementType[] { OCTokenTypes.VOID_KEYWORD, OCTokenTypes.CHAR_KEYWORD, OCTokenTypes.SHORT_KEYWORD, OCTokenTypes.INT_KEYWORD, OCTokenTypes.LONG_KEYWORD, OCTokenTypes.FLOAT_KEYWORD, OCTokenTypes.DOUBLE_KEYWORD, OCTokenTypes.SIGNED_KEYWORD, OCTokenTypes.UNSIGNED_KEYWORD, OCTokenTypes._BOOL_KEYWORD, OCTokenTypes._COMPLEX_KEYWORD, OCTokenTypes.IDENTIFIER, OCTokenTypes.BOOL_CPP_KEYWORD, OCTokenTypes.WCHAR_T_CPP_KEYWORD, OCTokenTypes.CHAR16_T_CPP_KEYWORD, OCTokenTypes.CHAR32_T_CPP_KEYWORD, OCTokenTypes.INT128_T_KEYWORD, OCTokenTypes.UINT128_T_KEYWORD, OCTokenTypes.__AUTO_TYPE_KEYWORD, OCTokenTypes.AUTO_KEYWORD });
    public static final TokenSet COMPOSITE_TYPE_SPECIFIERS = TokenSet.create(new IElementType[] { OCTokenTypes.STRUCT_KEYWORD, OCTokenTypes.CLASS_KEYWORD, OCTokenTypes.UNION_KEYWORD, OCTokenTypes.ENUM_KEYWORD });
    public static final TokenSet TYPE_SPECIFIERS = TokenSet.orSet(new TokenSet[] { OCTokenTypes.SIMPLE_TYPE_SPECIFIERS, OCTokenTypes.COMPOSITE_TYPE_SPECIFIERS });
    public static final TokenSet TYPE_QUALIFIERS = TokenSet.orSet(new TokenSet[] { OCTokenTypes.NULLABILITY_KEYWORDS, TokenSet.create(new IElementType[] { OCTokenTypes.CONST_KEYWORD, OCTokenTypes.VOLATILE_KEYWORD, OCTokenTypes.RESTRICT_KEYWORD, OCTokenTypes.ATOMIC_KEYWORD, OCTokenTypes.STRONG_KEYWORD, OCTokenTypes.WEAK_KEYWORD, OCTokenTypes.UNSAFE_UNRETAINED_KEYWORD, OCTokenTypes.AUTORELEASING_KEYWORD, OCTokenTypes.BLOCK_KEYWORD, OCTokenTypes.TYPENAME_CPP_KEYWORD, OCTokenTypes.KINDOF_KEYWORD }) });
    public static final TokenSet ARC_TYPE_QUALIFIERS = TokenSet.create(new IElementType[] { OCTokenTypes.STRONG_KEYWORD, OCTokenTypes.WEAK_KEYWORD, OCTokenTypes.UNSAFE_UNRETAINED_KEYWORD, OCTokenTypes.AUTORELEASING_KEYWORD, OCTokenTypes.BLOCK_KEYWORD });
    public static final TokenSet CALL_CONVENTIONS = TokenSet.create(new IElementType[] { OCTokenTypes.__STDCALL_KEYWORD, OCTokenTypes.__THISCALL_KEYWORD, OCTokenTypes.__FASTCALL_KEYWORD, OCTokenTypes.__CDECL_KEYWORD });
    public static final TokenSet KEYWORDS = TokenSet.orSet(new TokenSet[] { OCTokenTypes.C_KEYWORDS, OCTokenTypes.OBJC_KEYWORDS, OCTokenTypes.CPP_KEYWORDS, OCTokenTypes.NULLABILITY_KEYWORDS });
    public static final TokenSet ANGLE_BRACKETED_EXPRESSION_TOKENS = TokenSet.create(new IElementType[] { OCTokenTypes.CONTRAVARIANT_KEYWORD, OCTokenTypes.COVARIANT_KEYWORD, OCTokenTypes.LT, OCTokenTypes.GT, OCTokenTypes.GTGT, OCTokenTypes.IDENTIFIER, OCTokenTypes.COMMA, OCTokenTypes.MUL, OCTokenTypes.COLON });
    public static final Map<String, OCElementType> ourNameToTokenType = FileSymbolTableSerializer.getNameToElementTypeMap(TokenSet.orSet(new TokenSet[] { OCTokenTypes.OPERATORS, OCTokenTypes.LITERALS, OCTokenTypes.CPP_LITERALS }));
}
