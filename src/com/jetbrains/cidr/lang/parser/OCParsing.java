// 
// Decompiled by Procyon v0.5.30
// 

package com.jetbrains.cidr.lang.parser;

import java.util.Collections;
import com.intellij.util.containers.ContainerUtil;
import com.intellij.lang.Language;
import com.jetbrains.cidr.lang.OCLanguage;
import com.intellij.psi.PsiErrorElement;
import org.jetbrains.annotations.Contract;
import com.jetbrains.cidr.lang.util.OCElementUtil;
import com.jetbrains.cidr.lang.preprocessor.OCMacroReferenceTokenType;
import com.jetbrains.cidr.lang.symbols.OCSymbolOffsetUtil;
import com.jetbrains.cidr.lang.preprocessor.OCMacroForeignLeafType;
import com.intellij.openapi.util.Ref;
import java.util.Iterator;
import com.intellij.openapi.util.Pair;
import com.intellij.util.Producer;
import java.util.ArrayList;
import com.intellij.lang.ASTNode;
import com.jetbrains.cidr.lang.OCLanguageKind;
import com.jetbrains.cidr.lang.preprocessor.OCInclusionContext;
import com.jetbrains.cidr.lang.preprocessor.OCImmutableInclusionContext;
import com.jetbrains.cidr.lang.workspace.compiler.OCCompilerFeatures;
import com.jetbrains.cidr.lang.preprocessor.OCPreprocessingLexer;
import com.intellij.lang.impl.PsiBuilderImpl;
import java.util.HashMap;
import com.intellij.openapi.util.text.StringUtil;
import java.util.Set;
import com.intellij.lang.WhitespacesAndCommentsBinder;
import com.intellij.psi.tree.TokenSet;
import gnu.trove.TLongHashSet;
import gnu.trove.TLongByteHashMap;
import java.util.Map;
import org.jetbrains.annotations.Nullable;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import com.jetbrains.cidr.lang.preprocessor.OCParsingNameScope;
import com.intellij.lang.PsiBuilder;
import com.intellij.psi.tree.IElementType;
import com.intellij.openapi.diagnostic.Logger;

public class OCParsing
{
    private static final Logger LOG;
    private static final IElementType OBJC_CLASS_KEYWORD;
    public static final IElementType DUMB_ELEMENT_TYPE;
    public static final String MSG_UNEXPECTED_END_OF_FILE = "Unexpected end of file";
    public static final String MSG_EXPRESSION_EXPECTED = "Expression expected";
    public static final String MSG_DECLARATION_OR_EXPRESSION_EXPECTED = "Declaration or expression expected";
    public static final String MSG_SYNTAX_ERROR = "Syntax error";
    public static final String MSG_EXPECTED_BASE_CLAUSE_ELEMENT = "Base clause element expected";
    public static final String MSG_EXPECTING_LBRACE = "Expecting '{'";
    public static final String MSG_EXPECTING_RBRACE = "} expected";
    public static final String MSG_UNEXPECTED_TOKEN = "Unexpected token";
    public static final String MSG_MISSING_SEMICOLON = "Missing ';'";
    public static final String MSG_EXPECTING_SEMICOLON = "Expecting ';'";
    public static final String MSG_MISSING_RPAR = "Missing ')'";
    public static final String MSG_EXPECTING_RPAR = "Expecting ')'";
    public static final String MSG_EXPECTING_LPAR = "Expecting '('";
    public static final String MSG_EXPECTING_COMMA = "Expecting ','";
    public static final String MSG_EXPECTING_COLON = "Expecting ':'";
    public static final String MSG_EXPECTED_COMMA_OR_RPAR = "',' or ')' expected";
    private final PsiBuilder myBuilder;
    private final IElementType myRootType;
    private BlockParsingMode myBlocksParsingMode;
    private boolean myTemplateGTGT;
    private final boolean mySupportsAutosynthesis;
    private final boolean myDumbMode;
    private final boolean mySupportsNullability;
    private final boolean mySupportsClassProperties;
    private MessagePassingContext myIsInMessagePassingParameter;
    private boolean myIsInTemplateArgument;
    private boolean myIsInsideMacro;
    private boolean myIsInsideDirective;
    private boolean myIsInsideLoop;
    private boolean myIsInsideTypeNameParsing;
    private boolean myIsInsideDetectionMode;
    private boolean myIsInsideGenericAssociation;
    private boolean myIsCppSupport;
    private boolean myIsObjCSupport;
    private boolean myForceEagerMode;
    @NotNull
    private OCParsingNameScope myLocalNameScope;
    @Nullable
    private List<String> myLastDeclaratorName;
    private String myLastDeclaratorSingleName;
    private int myParseUntilOffset;
    private boolean myParsingInsideMacro;
    private boolean mySkippingWithoutParsing;
    private boolean myDisableErrors;
    private final Map<Long, OCParsingNameScope.Kind> myTypeKindsCache;
    private final TLongByteHashMap myParseTypeFirstCache;
    private final TLongByteHashMap myTemplateArgumentListCache;
    private final TLongHashSet myNonTypeExpressionsCache;
    private final TLongHashSet myNonConstantExprInTemplateCache;
    private BlockParser BLOCK_STATEMENT_PARSER;
    private BlockParser TOP_LEVEL_DECLARATIONS_PARSER;
    private static TokenSet COMMENTS_BINDABLE_SET;
    WhitespacesAndCommentsBinder COMMENT_BINDER;
    private static TokenSet USING_OR_NAMESPACE;
    private static TokenSet TEMPLATE_PARAMETER_SPECIFIERS;
    private static final TokenSet ourSemicolonSet;
    private static final TokenSet ourSemicolonOrRparSet;
    private static final TokenSet SPECIFIERS_FIRST;
    private static final TokenSet SINGLE_TOKEN_SPECIFIER;
    private static final TokenSet BULLSHIT_TYPE_MODIFIERS;
    private static final TokenSet CPP_ACCESS_SPECIFIERS;
    private static final TokenSet CPP_ONLY_SPECIFIERS_FIRST;
    private static final TokenSet CPP_SPECIFIERS_FIRST;
    private static final TokenSet CPP_EXPRESSIONS_FIRST;
    private static final Set<? extends IElementType> AVAILABILITY_EXPRESSION_ALLOWED_TOKEN_TYPES;
    private PsiBuilder.Marker myLastMacro;
    static final /* synthetic */ boolean $assertionsDisabled;
    
    public OCParsing(final PsiBuilder psiBuilder, final IElementType elementType) {
        this(psiBuilder, elementType, BlockParsingMode.LAZY);
    }
    
    public OCParsing(final PsiBuilder myBuilder, final IElementType myRootType, final BlockParsingMode myBlocksParsingMode) {
        this.myIsInMessagePassingParameter = MessagePassingContext.None;
        this.myIsInTemplateArgument = false;
        this.myIsInsideMacro = false;
        this.myIsInsideDirective = false;
        this.myIsInsideLoop = false;
        this.myIsInsideTypeNameParsing = false;
        this.myIsInsideDetectionMode = false;
        this.myIsInsideGenericAssociation = false;
        this.myIsCppSupport = true;
        this.myIsObjCSupport = true;
        this.myParseUntilOffset = 0;
        this.mySkippingWithoutParsing = false;
        this.myDisableErrors = false;
        this.BLOCK_STATEMENT_PARSER = new BlockParser() {
            @Override
            public void parseBlock() {
                OCParsing.this.H();
            }
        };
        this.TOP_LEVEL_DECLARATIONS_PARSER = new BlockParser() {
            @Override
            public void parseBlock() {
                OCParsing.this.aY();
                OCParsing.this.aL();
            }
        };
        this.COMMENT_BINDER = (WhitespacesAndCommentsBinder)new WhitespacesAndCommentsBinder() {
            public int getEdgePosition(final List<IElementType> list, final boolean b, final WhitespacesAndCommentsBinder.TokenTextGetter tokenTextGetter) {
                if (list.size() == 0) {
                    return 0;
                }
                for (int i = list.size() - 1; i >= 0; --i) {
                    final IElementType elementType = list.get(i);
                    if (elementType == OCTokenTypes.BLOCK_COMMENT) {
                        if (b || (i > 0 && OCTokenTypes.WHITESPACES.contains((IElementType)list.get(i - 1)) && StringUtil.containsLineBreak(tokenTextGetter.get(i - 1)))) {
                            return i;
                        }
                    }
                    else if (elementType == OCTokenTypes.EOL_COMMENT) {
                        break;
                    }
                }
                int size = list.size();
                for (int j = list.size() - 1; j >= 0; --j) {
                    final IElementType elementType2 = list.get(j);
                    if (OCTokenTypes.WHITESPACES.contains(elementType2)) {
                        if (StringUtil.getLineBreakCount(tokenTextGetter.get(j)) > 1) {
                            break;
                        }
                    }
                    else {
                        if (OCTokenTypes.EOL_COMMENT != elementType2) {
                            break;
                        }
                        if (b || (j > 0 && OCTokenTypes.WHITESPACES.contains((IElementType)list.get(j - 1)) && StringUtil.containsLineBreak(tokenTextGetter.get(j - 1)))) {
                            size = j;
                        }
                    }
                }
                return size;
            }
        };
        this.myBuilder = myBuilder;
        this.myRootType = myRootType;
        this.myBlocksParsingMode = myBlocksParsingMode;
        this.myTypeKindsCache = new HashMap<Long, OCParsingNameScope.Kind>();
        this.myParseTypeFirstCache = new TLongByteHashMap();
        this.myNonTypeExpressionsCache = new TLongHashSet();
        this.myNonConstantExprInTemplateCache = new TLongHashSet();
        this.myTemplateArgumentListCache = new TLongByteHashMap();
        final PsiBuilderImpl psiBuilderImpl = (PsiBuilderImpl)myBuilder;
        if (psiBuilderImpl.getLexer() instanceof OCPreprocessingLexer) {
            final OCPreprocessingLexer ocPreprocessingLexer = (OCPreprocessingLexer)psiBuilderImpl.getLexer();
            this.myDumbMode = false;
            final OCInclusionContext context = ocPreprocessingLexer.getContext();
            final OCLanguageKind languageKind = context.getLanguageKind();
            try {
                this.mySupportsAutosynthesis = OCCompilerFeatures.supportsAutosynthesis(context);
                this.mySupportsNullability = OCCompilerFeatures.supportsNullability(context);
                this.mySupportsClassProperties = OCCompilerFeatures.supportsClassProperty(context);
                this.myIsCppSupport = languageKind.isCpp();
                this.myIsObjCSupport = languageKind.isObjC();
                (this.myLocalNameScope = context.getNameScope().copy()).defineType("bool", false, false, -1);
                this.myLocalNameScope.defineType("wchar_t", false, false, -1);
                if (this.myIsObjCSupport) {
                    this.myLocalNameScope.defineInterface("Class", -1);
                }
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
        }
        else {
            this.myDumbMode = true;
            this.mySupportsAutosynthesis = false;
            this.mySupportsNullability = false;
            this.mySupportsClassProperties = false;
            this.myIsCppSupport = false;
            this.myIsObjCSupport = false;
            this.myLocalNameScope = new OCParsingNameScope();
        }
    }
    
    public ASTNode parse() {
        Label_0020: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0020;
                }
                final OCParsing ocParsing = this;
                final boolean b = ocParsing.myDumbMode;
                if (b) {
                    break Label_0020;
                }
                break Label_0020;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final boolean b = ocParsing.myDumbMode;
                if (b) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        this.parseFileContents();
        return this.getTreeBuilt();
    }
    
    public ASTNode parseDumpFile() {
        Label_0020: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0020;
                }
                final OCParsing ocParsing = this;
                final boolean b = ocParsing.myDumbMode;
                if (!b) {
                    break Label_0020;
                }
                break Label_0020;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final boolean b = ocParsing.myDumbMode;
                if (!b) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        final ArrayList<DumbNodeInfo> list = new ArrayList<DumbNodeInfo>();
        list.add(new DumbNodeInfo(this.a7(), 0));
        while (!this.myBuilder.eof()) {
            DumbNodeInfo dumbNodeInfo = list.get(list.size() - 1);
            while (dumbNodeInfo.childDepth > 0) {
                dumbNodeInfo = new DumbNodeInfo(this.a7(), dumbNodeInfo.childDepth - 1);
                list.add(dumbNodeInfo);
            }
            final IElementType tokenType = this.myBuilder.getTokenType();
            this.myBuilder.advanceLexer();
            int equals = OCTokenTypes.SEMICOLON.equals(tokenType) ? 1 : 0;
            final DumbNodeInfo dumbNodeInfo2 = dumbNodeInfo;
            ++dumbNodeInfo2.childCount;
            while (true) {
                Label_0199: {
                    int n = 0;
                    int n3 = 0;
                    Label_0196: {
                        Label_0185: {
                            try {
                                if (equals != 0) {
                                    break Label_0199;
                                }
                                final DumbNodeInfo dumbNodeInfo3 = dumbNodeInfo;
                                n = dumbNodeInfo3.childCount;
                                final DumbNodeInfo dumbNodeInfo4 = dumbNodeInfo;
                                final int n2 = dumbNodeInfo4.childDepth;
                                if (n2 > 0) {
                                    break Label_0185;
                                }
                                break Label_0185;
                            }
                            catch (IllegalArgumentException ex3) {
                                throw a(ex3);
                            }
                            try {
                                final DumbNodeInfo dumbNodeInfo3 = dumbNodeInfo;
                                n = dumbNodeInfo3.childCount;
                                final DumbNodeInfo dumbNodeInfo4 = dumbNodeInfo;
                                final int n2 = dumbNodeInfo4.childDepth;
                                if (n2 > 0) {
                                    n3 = 10;
                                    break Label_0196;
                                }
                            }
                            catch (IllegalArgumentException ex4) {
                                throw a(ex4);
                            }
                        }
                        n3 = 50;
                    }
                    if (n < n3) {
                        break;
                    }
                }
                equals = 0;
                list.remove(list.size() - 1);
                dumbNodeInfo.marker.done(OCParsing.DUMB_ELEMENT_TYPE);
                if (list.isEmpty()) {
                    dumbNodeInfo = new DumbNodeInfo(dumbNodeInfo.marker.precede(), dumbNodeInfo.childDepth + 1);
                    list.add(dumbNodeInfo);
                }
                else {
                    dumbNodeInfo = list.get(list.size() - 1);
                }
                final DumbNodeInfo dumbNodeInfo5 = dumbNodeInfo;
                ++dumbNodeInfo5.childCount;
            }
        }
        int i = list.size() - 1;
        try {
            while (i >= 0) {
                list.get(i).marker.done(OCParsing.DUMB_ELEMENT_TYPE);
                --i;
            }
        }
        catch (IllegalArgumentException ex5) {
            throw a(ex5);
        }
        a7.done(this.myRootType);
        return this.getTreeBuilt();
    }
    
    public void parseFileContents() {
        Label_0020: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0020;
                }
                final OCParsing ocParsing = this;
                final boolean b = ocParsing.myDumbMode;
                if (b) {
                    break Label_0020;
                }
                break Label_0020;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final boolean b = ocParsing.myDumbMode;
                if (b) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        while (true) {
            Label_0058: {
                try {
                    if (this.F()) {
                        break;
                    }
                    final OCParsing ocParsing2 = this;
                    final boolean b2 = ocParsing2.a1();
                    if (b2) {
                        break Label_0058;
                    }
                    break Label_0058;
                }
                catch (IllegalArgumentException ex3) {
                    throw a(ex3);
                }
                try {
                    final OCParsing ocParsing2 = this;
                    final boolean b2 = ocParsing2.a1();
                    if (b2) {
                        continue;
                    }
                }
                catch (IllegalArgumentException ex4) {
                    throw a(ex4);
                }
            }
            final IElementType af = this.aF();
            Label_0193: {
                try {
                    if (OCTokenTypes.DIRECTIVES.contains(af)) {
                        this.aA();
                        break Label_0193;
                    }
                }
                catch (IllegalArgumentException ex5) {
                    throw a(ex5);
                }
                try {
                    if (af == OCTokenTypes.NAMESPACE_CPP_KEYWORD) {
                        this.av();
                        continue;
                    }
                }
                catch (IllegalArgumentException ex6) {
                    throw a(ex6);
                }
                Label_0151: {
                    Label_0136: {
                        try {
                            if (this.aF() == OCTokenTypes.STATIC_ASSERT_KEYWORD) {
                                break Label_0136;
                            }
                            final OCParsing ocParsing3 = this;
                            final IElementType elementType = ocParsing3.aF();
                            final OCElementType ocElementType = OCTokenTypes.STATIC_ASSERT_C_KEYWORD;
                            if (elementType == ocElementType) {
                                break Label_0136;
                            }
                            break Label_0151;
                        }
                        catch (IllegalArgumentException ex7) {
                            throw a(ex7);
                        }
                        try {
                            final OCParsing ocParsing3 = this;
                            final IElementType elementType = ocParsing3.aF();
                            final OCElementType ocElementType = OCTokenTypes.STATIC_ASSERT_C_KEYWORD;
                            if (elementType == ocElementType) {
                                this.f(this.a7());
                                continue;
                            }
                        }
                        catch (IllegalArgumentException ex8) {
                            throw a(ex8);
                        }
                    }
                    try {
                        if (this.K()) {
                            continue;
                        }
                    }
                    catch (IllegalArgumentException ex9) {
                        throw a(ex9);
                    }
                }
                try {
                    if (this.S()) {
                        continue;
                    }
                }
                catch (IllegalArgumentException ex10) {
                    throw a(ex10);
                }
                try {
                    if (this.d()) {
                        continue;
                    }
                }
                catch (IllegalArgumentException ex11) {
                    throw a(ex11);
                }
                try {
                    if (OCParsing.OBJC_CLASS_KEYWORD == af) {
                        this.aC();
                        continue;
                    }
                }
                catch (IllegalArgumentException ex12) {
                    throw a(ex12);
                }
            }
            try {
                if (OCElementTypes.OBJC_ERROR_KEYWORD == af) {
                    this.aY();
                    continue;
                }
            }
            catch (IllegalArgumentException ex13) {
                throw a(ex13);
            }
            try {
                if (OCTokenTypes.SEMICOLON == af) {
                    this.aY();
                    continue;
                }
            }
            catch (IllegalArgumentException ex14) {
                throw a(ex14);
            }
            try {
                if (OCTokenTypes.__ASM_KEYWORD == af) {
                    this.am();
                    continue;
                }
            }
            catch (IllegalArgumentException ex15) {
                throw a(ex15);
            }
            boolean w = false;
            if (af == OCTokenTypes.EXTERN_KEYWORD) {
                w = this.w();
            }
            Label_0303: {
                try {
                    if (w) {
                        continue;
                    }
                    final OCParsing ocParsing4 = this;
                    final DeclarationContext declarationContext = DeclarationContext.FILE;
                    final DeclarationParsingResult declarationParsingResult = ocParsing4.a(declarationContext);
                    final DeclarationParsingResult declarationParsingResult2 = DeclarationParsingResult.FAIL;
                    if (declarationParsingResult == declarationParsingResult2) {
                        break Label_0303;
                    }
                    continue;
                }
                catch (IllegalArgumentException ex16) {
                    throw a(ex16);
                }
                try {
                    final OCParsing ocParsing4 = this;
                    final DeclarationContext declarationContext = DeclarationContext.FILE;
                    final DeclarationParsingResult declarationParsingResult = ocParsing4.a(declarationContext);
                    final DeclarationParsingResult declarationParsingResult2 = DeclarationParsingResult.FAIL;
                    if (declarationParsingResult != declarationParsingResult2) {
                        continue;
                    }
                    this.a("unexpected symbol", this.TOP_LEVEL_DECLARATIONS_PARSER, null);
                }
                catch (IllegalArgumentException ex17) {
                    throw a(ex17);
                }
            }
        }
        a7.done(this.myRootType);
    }
    
    private boolean a1() {
        final IElementType af = this.aF();
        try {
            if (!this.myIsCppSupport || af != OCTokenTypes.INLINE_KEYWORD) {
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        final PsiBuilder.Marker a7 = this.a7();
        try {
            this.aY();
            if (this.aF() == OCTokenTypes.NAMESPACE_CPP_KEYWORD) {
                this.i(a7);
                this.av();
                return true;
            }
        }
        catch (IllegalArgumentException ex2) {
            throw a(ex2);
        }
        this.i(a7);
        return false;
    }
    
    private boolean w() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_1       
        //     5: aload_0        
        //     6: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //     9: aload_0        
        //    10: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    13: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STRING_LITERAL:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    16: if_acmpne       172
        //    19: aload_0        
        //    20: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    23: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STRING_LITERAL:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    26: if_acmpne       47
        //    29: goto            36
        //    32: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    35: athrow         
        //    36: aload_0        
        //    37: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    40: goto            19
        //    43: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    46: athrow         
        //    47: iconst_0       
        //    48: istore_2       
        //    49: aload_0        
        //    50: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    53: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EXTERN_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    56: if_acmpne       64
        //    59: aload_0        
        //    60: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.w:()Z
        //    63: istore_2       
        //    64: iload_2        
        //    65: ifne            162
        //    68: aload_0        
        //    69: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    72: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    75: if_acmpne       110
        //    78: goto            85
        //    81: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    84: athrow         
        //    85: aload_0        
        //    86: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    89: aload_0        
        //    90: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aL:()V
        //    93: aload_0        
        //    94: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    97: ldc             "Expecting '}'"
        //    99: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   102: pop            
        //   103: goto            162
        //   106: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   109: athrow         
        //   110: aload_0        
        //   111: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   114: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   117: if_acmpne       131
        //   120: aload_0        
        //   121: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   124: goto            162
        //   127: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   130: athrow         
        //   131: aload_0        
        //   132: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   135: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   138: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.FAIL:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   141: if_acmpne       162
        //   144: aload_0        
        //   145: ldc             "Unexpected symbol"
        //   147: aload_0        
        //   148: getfield        com/jetbrains/cidr/lang/parser/OCParsing.TOP_LEVEL_DECLARATIONS_PARSER:Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;
        //   151: aconst_null    
        //   152: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;Lcom/intellij/psi/tree/IElementType;)V
        //   155: goto            162
        //   158: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   161: athrow         
        //   162: aload_0        
        //   163: aload_1        
        //   164: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CPP_EXTERN_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   167: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   170: iconst_1       
        //   171: ireturn        
        //   172: aload_0        
        //   173: aload_1        
        //   174: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   177: iconst_0       
        //   178: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      29     32     36     Ljava/lang/IllegalArgumentException;
        //  19     43     43     47     Ljava/lang/IllegalArgumentException;
        //  64     78     81     85     Ljava/lang/IllegalArgumentException;
        //  68     106    106    110    Ljava/lang/IllegalArgumentException;
        //  110    127    127    131    Ljava/lang/IllegalArgumentException;
        //  131    155    158    162    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0019:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void aL() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.F:()Z
        //     4: ifne            272
        //     7: aload_0        
        //     8: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    11: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    14: if_acmpeq       272
        //    17: goto            24
        //    20: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    23: athrow         
        //    24: aload_0        
        //    25: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a1:()Z
        //    28: ifeq            45
        //    31: goto            38
        //    34: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    37: athrow         
        //    38: goto            0
        //    41: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    44: athrow         
        //    45: aload_0        
        //    46: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    49: astore_1       
        //    50: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DIRECTIVES:Lcom/intellij/psi/tree/TokenSet;
        //    53: aload_1        
        //    54: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    57: ifeq            71
        //    60: aload_0        
        //    61: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aA:()V
        //    64: goto            159
        //    67: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    70: athrow         
        //    71: aload_1        
        //    72: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NAMESPACE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //    75: if_acmpne       89
        //    78: aload_0        
        //    79: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.av:()V
        //    82: goto            0
        //    85: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    88: athrow         
        //    89: aload_0        
        //    90: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    93: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STATIC_ASSERT_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //    96: if_acmpeq       116
        //    99: aload_0        
        //   100: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   103: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STATIC_ASSERT_C_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   106: if_acmpne       131
        //   109: goto            116
        //   112: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   115: athrow         
        //   116: aload_0        
        //   117: aload_0        
        //   118: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   121: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.f:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   124: goto            0
        //   127: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   130: athrow         
        //   131: aload_0        
        //   132: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.K:()Z
        //   135: ifeq            145
        //   138: goto            0
        //   141: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   144: athrow         
        //   145: aload_0        
        //   146: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.d:()Z
        //   149: ifeq            159
        //   152: goto            0
        //   155: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   158: athrow         
        //   159: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.OBJC_CLASS_KEYWORD:Lcom/intellij/psi/tree/IElementType;
        //   162: aload_1        
        //   163: if_acmpne       177
        //   166: aload_0        
        //   167: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aC:()V
        //   170: goto            269
        //   173: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   176: athrow         
        //   177: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   180: aload_1        
        //   181: if_acmpne       195
        //   184: aload_0        
        //   185: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   188: goto            269
        //   191: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   194: athrow         
        //   195: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.__ASM_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   198: aload_1        
        //   199: if_acmpne       213
        //   202: aload_0        
        //   203: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.am:()V
        //   206: goto            269
        //   209: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   212: athrow         
        //   213: iconst_0       
        //   214: istore_2       
        //   215: aload_1        
        //   216: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EXTERN_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   219: if_acmpne       227
        //   222: aload_0        
        //   223: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.w:()Z
        //   226: istore_2       
        //   227: iload_2        
        //   228: ifne            269
        //   231: aload_0        
        //   232: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   235: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   238: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.FAIL:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   241: if_acmpne       269
        //   244: goto            251
        //   247: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   250: athrow         
        //   251: aload_0        
        //   252: ldc             "unexpected symbol"
        //   254: aload_0        
        //   255: getfield        com/jetbrains/cidr/lang/parser/OCParsing.TOP_LEVEL_DECLARATIONS_PARSER:Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;
        //   258: aconst_null    
        //   259: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;Lcom/intellij/psi/tree/IElementType;)V
        //   262: goto            269
        //   265: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   268: athrow         
        //   269: goto            0
        //   272: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      17     20     24     Ljava/lang/IllegalArgumentException;
        //  7      31     34     38     Ljava/lang/IllegalArgumentException;
        //  24     41     41     45     Ljava/lang/IllegalArgumentException;
        //  50     67     67     71     Ljava/lang/IllegalArgumentException;
        //  71     85     85     89     Ljava/lang/IllegalArgumentException;
        //  89     109    112    116    Ljava/lang/IllegalArgumentException;
        //  99     127    127    131    Ljava/lang/IllegalArgumentException;
        //  131    141    141    145    Ljava/lang/IllegalArgumentException;
        //  145    155    155    159    Ljava/lang/IllegalArgumentException;
        //  159    173    173    177    Ljava/lang/IllegalArgumentException;
        //  177    191    191    195    Ljava/lang/IllegalArgumentException;
        //  195    209    209    213    Ljava/lang/IllegalArgumentException;
        //  227    244    247    251    Ljava/lang/IllegalArgumentException;
        //  231    262    265    269    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0024:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void aC() {
        new ClassParsingScope().a();
    }
    
    private void av() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_1       
        //     5: iconst_0       
        //     6: istore_2       
        //     7: aload_0        
        //     8: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    11: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    14: if_acmpne       25
        //    17: iconst_1       
        //    18: goto            26
        //    21: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    24: athrow         
        //    25: iconst_0       
        //    26: istore_3       
        //    27: aload_0        
        //    28: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    31: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.INLINE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    34: if_acmpne       43
        //    37: iconst_1       
        //    38: istore_2       
        //    39: aload_0        
        //    40: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    43: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.LOG:Lcom/intellij/openapi/diagnostic/Logger;
        //    46: aload_0        
        //    47: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    50: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NAMESPACE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //    53: if_acmpeq       73
        //    56: aload_0        
        //    57: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    60: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    63: if_acmpne       81
        //    66: goto            73
        //    69: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    72: athrow         
        //    73: iconst_1       
        //    74: goto            82
        //    77: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    80: athrow         
        //    81: iconst_0       
        //    82: invokevirtual   com/intellij/openapi/diagnostic/Logger.assertTrue:(Z)Z
        //    85: pop            
        //    86: aload_0        
        //    87: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    90: aload_0        
        //    91: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aG:()Z
        //    94: pop            
        //    95: aload_0        
        //    96: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    99: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   102: if_acmpne       123
        //   105: aload_0        
        //   106: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   109: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   114: astore          4
        //   116: aload_0        
        //   117: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   120: goto            126
        //   123: aconst_null    
        //   124: astore          4
        //   126: aload_0        
        //   127: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aG:()Z
        //   130: pop            
        //   131: aload           4
        //   133: ifnull          189
        //   136: aload_0        
        //   137: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   140: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EQ:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   143: if_acmpne       189
        //   146: goto            153
        //   149: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   152: athrow         
        //   153: iload_3        
        //   154: ifeq            177
        //   157: goto            164
        //   160: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   163: athrow         
        //   164: aload_0        
        //   165: ldc             "Can't have nested namespace aliases"
        //   167: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   170: goto            177
        //   173: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   176: athrow         
        //   177: aload_0        
        //   178: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   181: aload_0        
        //   182: aload_1        
        //   183: aload           4
        //   185: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/lang/PsiBuilder$Marker;Ljava/lang/String;)V
        //   188: return         
        //   189: aload_0        
        //   190: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLocalNameScope:Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope;
        //   193: astore          5
        //   195: aload           4
        //   197: ifnull          220
        //   200: aload_0        
        //   201: aload_0        
        //   202: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLocalNameScope:Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope;
        //   205: aload           4
        //   207: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.defineNamespace:(Ljava/lang/String;)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope;
        //   210: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLocalNameScope:Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope;
        //   213: goto            220
        //   216: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   219: athrow         
        //   220: aload_0        
        //   221: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   224: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   227: if_acmpne       279
        //   230: aload           4
        //   232: ifnonnull       255
        //   235: goto            242
        //   238: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   241: athrow         
        //   242: aload_0        
        //   243: ldc             "Namespace name expected"
        //   245: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   248: goto            255
        //   251: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   254: athrow         
        //   255: iload_2        
        //   256: ifeq            272
        //   259: aload_0        
        //   260: ldc             "Nested namespace definition can't be inline"
        //   262: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   265: goto            272
        //   268: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   271: athrow         
        //   272: aload_0        
        //   273: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.av:()V
        //   276: goto            329
        //   279: aload_0        
        //   280: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   283: ldc             "Expecting '{'"
        //   285: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   288: ifne            308
        //   291: aload_0        
        //   292: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   295: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EQ:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   298: if_acmpne       329
        //   301: goto            308
        //   304: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   307: athrow         
        //   308: aload_0        
        //   309: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aL:()V
        //   312: aload_0        
        //   313: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   316: ldc             "} expected"
        //   318: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   321: pop            
        //   322: goto            329
        //   325: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   328: athrow         
        //   329: aload_0        
        //   330: aload           5
        //   332: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLocalNameScope:Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope;
        //   335: iload_2        
        //   336: ifeq            367
        //   339: aload           4
        //   341: ifnull          367
        //   344: goto            351
        //   347: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   350: athrow         
        //   351: aload_0        
        //   352: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLocalNameScope:Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope;
        //   355: aload           4
        //   357: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.defineNamespaceUsing:(Ljava/lang/String;)V
        //   360: goto            367
        //   363: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   366: athrow         
        //   367: aload_0        
        //   368: aload_1        
        //   369: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CPP_NAMESPACE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   372: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   375: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  7      21     21     25     Ljava/lang/IllegalArgumentException;
        //  43     66     69     73     Ljava/lang/IllegalArgumentException;
        //  56     77     77     81     Ljava/lang/IllegalArgumentException;
        //  126    146    149    153    Ljava/lang/IllegalArgumentException;
        //  136    157    160    164    Ljava/lang/IllegalArgumentException;
        //  153    170    173    177    Ljava/lang/IllegalArgumentException;
        //  195    213    216    220    Ljava/lang/IllegalArgumentException;
        //  220    235    238    242    Ljava/lang/IllegalArgumentException;
        //  230    248    251    255    Ljava/lang/IllegalArgumentException;
        //  255    265    268    272    Ljava/lang/IllegalArgumentException;
        //  279    301    304    308    Ljava/lang/IllegalArgumentException;
        //  291    322    325    329    Ljava/lang/IllegalArgumentException;
        //  329    344    347    351    Ljava/lang/IllegalArgumentException;
        //  339    360    363    367    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0153:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void a(final PsiBuilder.Marker marker, final String s) {
        final PsiBuilder.Marker a7 = this.a7();
        final String tokenText = this.myBuilder.getTokenText();
        final List<String> t = this.T();
        Label_0066: {
            try {
                if (t != null) {
                    this.myLocalNameScope.defineNamespaceAlias(s, t);
                    break Label_0066;
                }
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                if (tokenText != null) {
                    this.myLocalNameScope.defineNamespaceAlias(s, tokenText);
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        this.b(a7, OCElementTypes.REFERENCE_ELEMENT);
        this.a(OCTokenTypes.SEMICOLON, "Expecting ';'");
        this.b(marker, OCElementTypes.CPP_NAMESPACE_ALIAS);
    }
    
    private void b(final PsiBuilder.Marker marker) {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCKeywordElementType ocKeywordElementType = OCTokenTypes.NAMESPACE_CPP_KEYWORD;
                if (elementType != ocKeywordElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCKeywordElementType ocKeywordElementType = OCTokenTypes.NAMESPACE_CPP_KEYWORD;
                if (elementType != ocKeywordElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        this.aY();
        final String tokenText = this.myBuilder.getTokenText();
        this.a(OCTokenTypes.IDENTIFIER, "Expecting identifier");
        this.a(OCTokenTypes.EQ, "Expecting '='");
        this.a(marker, tokenText);
    }
    
    private void f(final PsiBuilder.Marker p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.$assertionsDisabled:Z
        //     3: ifne            52
        //     6: aload_0        
        //     7: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    10: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STATIC_ASSERT_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //    13: if_acmpeq       52
        //    16: goto            23
        //    19: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    22: athrow         
        //    23: aload_0        
        //    24: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    27: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STATIC_ASSERT_C_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    30: if_acmpeq       52
        //    33: goto            40
        //    36: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    39: athrow         
        //    40: new             Ljava/lang/AssertionError;
        //    43: dup            
        //    44: invokespecial   java/lang/AssertionError.<init>:()V
        //    47: athrow         
        //    48: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    51: athrow         
        //    52: aload_0        
        //    53: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    56: aload_0        
        //    57: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    60: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    63: if_acmpne       77
        //    66: aload_0        
        //    67: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.R:()V
        //    70: goto            83
        //    73: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    76: athrow         
        //    77: aload_0        
        //    78: ldc             "Expected '('"
        //    80: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //    83: aload_0        
        //    84: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    87: ldc             "Missing ';'"
        //    89: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //    92: pop            
        //    93: aload_0        
        //    94: aload_1        
        //    95: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CPP_STATIC_ASSERT_STATEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    98: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   101: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      16     19     23     Ljava/lang/IllegalArgumentException;
        //  6      33     36     40     Ljava/lang/IllegalArgumentException;
        //  23     48     48     52     Ljava/lang/IllegalArgumentException;
        //  52     73     73     77     Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0023:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @Nullable
    public ASTNode parseExpressionText() {
        Label_0020: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0020;
                }
                final OCParsing ocParsing = this;
                final boolean b = ocParsing.myDumbMode;
                if (b) {
                    break Label_0020;
                }
                break Label_0020;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final boolean b = ocParsing.myDumbMode;
                if (b) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        this.n(true);
        try {
            while (!this.F()) {
                this.a("unexpected symbol", this.BLOCK_STATEMENT_PARSER, OCElementTypes.UNKNOWN_CPP_CODE);
            }
        }
        catch (IllegalArgumentException ex3) {
            throw a(ex3);
        }
        a7.done(this.myRootType);
        return this.getTreeBuilt();
    }
    
    @Nullable
    public ASTNode parseExpressionOrStatementsText() {
        Label_0020: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0020;
                }
                final OCParsing ocParsing = this;
                final boolean b = ocParsing.myDumbMode;
                if (b) {
                    break Label_0020;
                }
                break Label_0020;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final boolean b = ocParsing.myDumbMode;
                if (b) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        PsiBuilder.Marker marker = this.a7();
        this.n(true);
        while (!this.F()) {
            this.i(marker);
            marker = this.a7();
            final OCParsingNameScope myLocalNameScope = this.myLocalNameScope;
            this.myLocalNameScope = this.myLocalNameScope.defineLocalScope();
            try {
                while (!this.F()) {
                    this.m(true);
                }
            }
            catch (IllegalArgumentException ex3) {
                throw a(ex3);
            }
            Logger log = null;
            boolean b2 = false;
            Label_0126: {
                try {
                    this.myLocalNameScope = this.myLocalNameScope.dropAndGetParent();
                    log = OCParsing.LOG;
                    if (this.myLocalNameScope == myLocalNameScope) {
                        b2 = true;
                        break Label_0126;
                    }
                }
                catch (IllegalArgumentException ex4) {
                    throw a(ex4);
                }
                b2 = false;
            }
            log.assertTrue(b2);
            try {
                while (!this.F()) {
                    this.a("unexpected symbol", this.BLOCK_STATEMENT_PARSER, OCElementTypes.UNKNOWN_CPP_CODE);
                }
            }
            catch (IllegalArgumentException ex5) {
                throw a(ex5);
            }
        }
        marker.done(this.myRootType);
        return this.getTreeBuilt();
    }
    
    protected ASTNode getTreeBuilt() {
        return this.myBuilder.getTreeBuilt();
    }
    
    @Nullable
    public ASTNode parseTypeText() {
        Label_0020: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0020;
                }
                final OCParsing ocParsing = this;
                final boolean b = ocParsing.myDumbMode;
                if (b) {
                    break Label_0020;
                }
                break Label_0020;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final boolean b = ocParsing.myDumbMode;
                if (b) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        this.b(DeclarationContext.PARAMETER_LIST, TypeParsingExpectation.ANY, true);
        try {
            while (!this.F()) {
                this.a("unexpected symbol", this.BLOCK_STATEMENT_PARSER, OCElementTypes.UNKNOWN_CPP_CODE);
            }
        }
        catch (IllegalArgumentException ex3) {
            throw a(ex3);
        }
        a7.done(this.myRootType);
        return this.getTreeBuilt();
    }
    
    private String a(final String s, final boolean b, final boolean b2, final boolean b3, final boolean b4) {
        if (OCTokenTypes.IDENTIFIER == this.aF()) {
            final String tokenText = this.myBuilder.getTokenText();
            Label_0103: {
                try {
                    if (b2) {
                        this.myLocalNameScope.defineInterface(tokenText, this.myBuilder.getCurrentOffset());
                        break Label_0103;
                    }
                }
                catch (IllegalArgumentException ex) {
                    throw a(ex);
                }
                try {
                    if (b3) {
                        this.myLocalNameScope.defineProtocol(tokenText, this.myBuilder.getCurrentOffset());
                        break Label_0103;
                    }
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
                this.myLocalNameScope.defineType(tokenText, b, b4, this.myBuilder.getCurrentOffset());
            }
            this.aY();
            return tokenText;
        }
        this.a(s);
        return null;
    }
    
    private void a3() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.$assertionsDisabled:Z
        //     3: ifne            52
        //     6: aload_0        
        //     7: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    10: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SYNTHESIZE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    13: if_acmpeq       52
        //    16: goto            23
        //    19: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    22: athrow         
        //    23: aload_0        
        //    24: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    27: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DYNAMIC_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    30: if_acmpeq       52
        //    33: goto            40
        //    36: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    39: athrow         
        //    40: new             Ljava/lang/AssertionError;
        //    43: dup            
        //    44: invokespecial   java/lang/AssertionError.<init>:()V
        //    47: athrow         
        //    48: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    51: athrow         
        //    52: aload_0        
        //    53: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    56: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DYNAMIC_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    59: if_acmpne       70
        //    62: iconst_1       
        //    63: goto            71
        //    66: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    69: athrow         
        //    70: iconst_0       
        //    71: istore_1       
        //    72: aload_0        
        //    73: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    76: astore_2       
        //    77: aload_0        
        //    78: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    81: aload_0        
        //    82: getfield        com/jetbrains/cidr/lang/parser/OCParsing.mySupportsClassProperties:Z
        //    85: ifeq            127
        //    88: iload_1        
        //    89: ifeq            127
        //    92: goto            99
        //    95: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    98: athrow         
        //    99: aload_0        
        //   100: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   103: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   106: if_acmpne       127
        //   109: goto            116
        //   112: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   115: athrow         
        //   116: aload_0        
        //   117: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aU:()V
        //   120: goto            127
        //   123: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   126: athrow         
        //   127: aload_0        
        //   128: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   131: astore_3       
        //   132: aload_0        
        //   133: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   136: astore          4
        //   138: aload_0        
        //   139: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   142: ldc             "Expecting property name"
        //   144: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   147: pop            
        //   148: aload_0        
        //   149: aload           4
        //   151: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.REFERENCE_ELEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   154: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   157: aload_0        
        //   158: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   161: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EQ:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   164: if_acmpne       220
        //   167: iload_1        
        //   168: ifeq            191
        //   171: goto            178
        //   174: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   177: athrow         
        //   178: aload_0        
        //   179: ldc             "Instance variable reference is not allowed in '@dynamic'"
        //   181: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   184: goto            191
        //   187: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   190: athrow         
        //   191: aload_0        
        //   192: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   195: aload_0        
        //   196: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   199: astore          5
        //   201: aload_0        
        //   202: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   205: ldc             "Expecting ivar name"
        //   207: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   210: pop            
        //   211: aload_0        
        //   212: aload           5
        //   214: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.REFERENCE_ELEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   217: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   220: aload_0        
        //   221: aload_3        
        //   222: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.SYNTHESIZED_PROPERTY:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   225: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   228: aload_0        
        //   229: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   232: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   235: if_acmpeq       245
        //   238: goto            252
        //   241: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   244: athrow         
        //   245: aload_0        
        //   246: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   249: goto            127
        //   252: aload_0        
        //   253: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   256: ldc             "Missing ';'"
        //   258: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   261: pop            
        //   262: aload_0        
        //   263: aload_2        
        //   264: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.SYNTHESIZED_PROPERTIES_LIST:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   267: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   270: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      16     19     23     Ljava/lang/IllegalArgumentException;
        //  6      33     36     40     Ljava/lang/IllegalArgumentException;
        //  23     48     48     52     Ljava/lang/IllegalArgumentException;
        //  52     66     66     70     Ljava/lang/IllegalArgumentException;
        //  77     92     95     99     Ljava/lang/IllegalArgumentException;
        //  88     109    112    116    Ljava/lang/IllegalArgumentException;
        //  99     120    123    127    Ljava/lang/IllegalArgumentException;
        //  138    171    174    178    Ljava/lang/IllegalArgumentException;
        //  167    184    187    191    Ljava/lang/IllegalArgumentException;
        //  220    241    241    245    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0023:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void aU() {
        final PsiBuilder.Marker a7 = this.a7();
        this.aY();
        if (this.aF() != OCTokenTypes.RPAR) {
            final PsiBuilder.Marker a8 = this.a7();
            try {
                if (this.aF() == OCTokenTypes.CLASS_KEYWORD) {
                    this.g();
                }
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            this.a(OCTokenTypes.IDENTIFIER, "Attribute name expected");
            this.b(a8, OCElementTypes.PROPERTY_ATTRIBUTE);
        }
        this.a(OCTokenTypes.RPAR, "Missing ')'");
        this.b(a7, OCElementTypes.PROPERTY_ATTRIBUTES_LIST);
    }
    
    private void d(final IElementType elementType) {
        final PsiBuilder.Marker a7 = this.a7();
    Label_0038:
        while (true) {
            Label_0027: {
                try {
                    if (this.aF() == null) {
                        break Label_0038;
                    }
                    final OCParsing ocParsing = this;
                    final IElementType elementType2 = ocParsing.aF();
                    final IElementType elementType3 = elementType;
                    if (elementType2 != elementType3) {
                        break Label_0027;
                    }
                    break Label_0038;
                }
                catch (IllegalArgumentException ex) {
                    throw a(ex);
                }
                try {
                    final OCParsing ocParsing = this;
                    final IElementType elementType2 = ocParsing.aF();
                    final IElementType elementType3 = elementType;
                    if (elementType2 != elementType3) {
                        this.aY();
                        continue;
                    }
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
            }
            break;
        }
        this.b(a7, OCElementTypes.UNKNOWN_CPP_CODE);
    }
    
    private boolean a(final IElementType elementType, final IElementType elementType2, final boolean b) {
        final boolean mySkippingWithoutParsing = this.mySkippingWithoutParsing;
        this.mySkippingWithoutParsing = true;
        try {
            return OCLazyBlockStatementElementType.isSafeBlock((Producer<IElementType>)(() -> {
                IElementType elementType;
                if (b) {
                    elementType = this.aF();
                    this.aY();
                }
                else {
                    elementType = this.myBuilder.getTokenType();
                    this.myBuilder.advanceLexer();
                }
                return elementType;
            }), elementType, elementType2);
        }
        finally {
            this.mySkippingWithoutParsing = mySkippingWithoutParsing;
        }
    }
    
    private boolean d() {
        try {
            if (this.aF() != OCTokenTypes.COMPATIBILITY_ALIAS_KEYWORD) {
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        final PsiBuilder.Marker a7 = this.a7();
        this.aY();
        if (this.a(OCTokenTypes.IDENTIFIER, "Alias name expected")) {
            final PsiBuilder.Marker a8 = this.a7();
            try {
                if (this.a(OCTokenTypes.IDENTIFIER, "Class name expected")) {
                    this.b(a8, OCElementTypes.REFERENCE_ELEMENT);
                    this.a(OCTokenTypes.SEMICOLON, "Expecting ';'");
                    this.b(a7, OCElementTypes.COMPATIBILITY_ALIAS);
                    return true;
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
            a8.drop();
        }
        try {
            if (this.aF() == OCTokenTypes.SEMICOLON) {
                this.aY();
            }
        }
        catch (IllegalArgumentException ex3) {
            throw a(ex3);
        }
        this.b(a7, OCElementTypes.COMPATIBILITY_ALIAS);
        return true;
    }
    
    private boolean K() {
        return new ClassParsingScope().parseClass();
    }
    
    public AngleBracketedExpressionType detectAngleBracketedExpressionType() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: iconst_1       
        //     2: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.p:(Z)Z
        //     5: istore_1       
        //     6: iload_1        
        //     7: ifne            18
        //    10: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$AngleBracketedExpressionType.NOT_AN_ANGLE_BRACKETED_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCParsing$AngleBracketedExpressionType;
        //    13: areturn        
        //    14: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    17: athrow         
        //    18: iconst_0       
        //    19: istore_2       
        //    20: iconst_1       
        //    21: istore_3       
        //    22: aload_0        
        //    23: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    26: astore          4
        //    28: iconst_1       
        //    29: istore          5
        //    31: aload_0        
        //    32: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    35: aload_0        
        //    36: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    39: astore          6
        //    41: aload           6
        //    43: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CONTRAVARIANT_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    46: if_acmpeq       72
        //    49: aload           6
        //    51: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COVARIANT_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    54: if_acmpeq       72
        //    57: aload           6
        //    59: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    62: if_acmpne       86
        //    65: goto            72
        //    68: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    71: athrow         
        //    72: aload_0        
        //    73: aload           4
        //    75: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //    78: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$AngleBracketedExpressionType.GENERIC_PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$AngleBracketedExpressionType;
        //    81: areturn        
        //    82: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    85: athrow         
        //    86: iload_2        
        //    87: aload           6
        //    89: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    92: if_acmpeq       110
        //    95: aload           6
        //    97: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.MUL:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   100: if_acmpne       118
        //   103: goto            110
        //   106: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   109: athrow         
        //   110: iconst_1       
        //   111: goto            119
        //   114: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   117: athrow         
        //   118: iconst_0       
        //   119: ior            
        //   120: istore_2       
        //   121: aload           6
        //   123: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   126: if_acmpne       176
        //   129: iload_3        
        //   130: ifeq            174
        //   133: goto            140
        //   136: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   139: athrow         
        //   140: aload_0        
        //   141: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLocalNameScope:Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope;
        //   144: aload_0        
        //   145: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   148: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   153: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.isProtocol:(Ljava/lang/String;)Z
        //   156: ifeq            174
        //   159: goto            166
        //   162: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   165: athrow         
        //   166: iconst_1       
        //   167: goto            175
        //   170: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   173: athrow         
        //   174: iconst_0       
        //   175: istore_3       
        //   176: aload_0        
        //   177: iload           5
        //   179: aload           6
        //   181: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(ILcom/intellij/psi/tree/IElementType;)I
        //   184: istore          5
        //   186: aload_0        
        //   187: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   190: iload           5
        //   192: ifgt            35
        //   195: aload_0        
        //   196: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   199: astore          6
        //   201: aload_0        
        //   202: aload           4
        //   204: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   207: iload           5
        //   209: ifne            250
        //   212: aload           6
        //   214: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   217: if_acmpeq       242
        //   220: goto            227
        //   223: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   226: athrow         
        //   227: aload           6
        //   229: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   232: if_acmpne       250
        //   235: goto            242
        //   238: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   241: athrow         
        //   242: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$AngleBracketedExpressionType.GENERIC_PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$AngleBracketedExpressionType;
        //   245: areturn        
        //   246: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   249: athrow         
        //   250: iload_2        
        //   251: ifeq            262
        //   254: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$AngleBracketedExpressionType.GENERIC_ARGUMENT_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$AngleBracketedExpressionType;
        //   257: areturn        
        //   258: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   261: athrow         
        //   262: iload_3        
        //   263: ifeq            274
        //   266: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$AngleBracketedExpressionType.PROTOCOL_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$AngleBracketedExpressionType;
        //   269: areturn        
        //   270: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   273: athrow         
        //   274: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$AngleBracketedExpressionType.UNKNOWN:Lcom/jetbrains/cidr/lang/parser/OCParsing$AngleBracketedExpressionType;
        //   277: areturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  6      14     14     18     Ljava/lang/IllegalArgumentException;
        //  49     65     68     72     Ljava/lang/IllegalArgumentException;
        //  57     82     82     86     Ljava/lang/IllegalArgumentException;
        //  86     103    106    110    Ljava/lang/IllegalArgumentException;
        //  95     114    114    118    Ljava/lang/IllegalArgumentException;
        //  121    133    136    140    Ljava/lang/IllegalArgumentException;
        //  129    159    162    166    Ljava/lang/IllegalArgumentException;
        //  140    170    170    174    Ljava/lang/IllegalArgumentException;
        //  201    220    223    227    Ljava/lang/IllegalArgumentException;
        //  212    235    238    242    Ljava/lang/IllegalArgumentException;
        //  227    246    246    250    Ljava/lang/IllegalArgumentException;
        //  250    258    258    262    Ljava/lang/IllegalArgumentException;
        //  262    270    270    274    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0140:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private int a(int n, final IElementType elementType) {
        try {
            if (elementType == OCTokenTypes.LT) {
                ++n;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        try {
            if (elementType == OCTokenTypes.GT) {
                --n;
            }
        }
        catch (IllegalArgumentException ex2) {
            throw a(ex2);
        }
        try {
            if (elementType == OCTokenTypes.GTGT) {
                n -= 2;
            }
        }
        catch (IllegalArgumentException ex3) {
            throw a(ex3);
        }
        return n;
    }
    
    private int m() {
        final PsiBuilder.Marker a7 = this.a7();
        int n = 0;
        try {
            while (this.p(false)) {
                ++n;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        this.i(a7);
        return n;
    }
    
    private boolean p(final boolean b) {
        boolean b2 = false;
        final PsiBuilder.Marker a7 = this.a7();
        int i = 0;
        Label_0088: {
            try {
                if (this.aF() != OCTokenTypes.LT) {
                    break Label_0088;
                }
                ++i;
                this.aY();
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            do {
                final IElementType af = this.aF();
                i = this.a(i, af);
                if (!OCTokenTypes.ANGLE_BRACKETED_EXPRESSION_TOKENS.contains(af)) {
                    break;
                }
                this.aY();
            } while (i > 0);
            boolean b3 = false;
            Label_0087: {
                try {
                    if (i <= 0) {
                        b3 = true;
                        break Label_0087;
                    }
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
                b3 = false;
            }
            b2 = b3;
            try {
                if (b) {
                    this.i(a7);
                }
            }
            catch (IllegalArgumentException ex3) {
                throw a(ex3);
            }
        }
        return b2;
    }
    
    private boolean n() {
        try {
            if (this.aF() != OCTokenTypes.COLON) {
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        this.aY();
        final boolean b = this.b(DeclarationContext.PARAMETER_LIST, TypeParsingExpectation.ANY);
        try {
            if (!b) {
                this.a("Expected a type");
            }
        }
        catch (IllegalArgumentException ex2) {
            throw a(ex2);
        }
        return b;
    }
    
    private boolean q(final boolean b) {
        try {
            if (this.aF() != OCTokenTypes.LT) {
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        try {
            if (this.detectAngleBracketedExpressionType() == AngleBracketedExpressionType.PROTOCOL_LIST) {
                return false;
            }
        }
        catch (IllegalArgumentException ex2) {
            throw a(ex2);
        }
        final PsiBuilder.Marker a7 = this.a7();
        this.aY();
        while (true) {
            final PsiBuilder.Marker a8 = this.a7();
            Label_0088: {
                Label_0133: {
                    Label_0101: {
                        Label_0070: {
                            try {
                                if (this.b(DeclarationContext.PARAMETER_LIST, TypeParsingExpectation.ONLY_TYPES)) {
                                    break Label_0101;
                                }
                                final boolean b2 = b;
                                if (b2) {
                                    break Label_0070;
                                }
                                break Label_0088;
                            }
                            catch (IllegalArgumentException ex3) {
                                throw a(ex3);
                            }
                            try {
                                final boolean b2 = b;
                                if (b2) {
                                    this.b(DeclarationContext.PARAMETER_LIST, TypeParsingExpectation.ANY);
                                    break Label_0101;
                                }
                            }
                            catch (IllegalArgumentException ex4) {
                                throw a(ex4);
                            }
                        }
                        break Label_0088;
                        try {
                            this.b(a8, OCElementTypes.GENERIC_ARGUMENT);
                            if (this.aF() != OCTokenTypes.COMMA) {
                                break Label_0133;
                            }
                        }
                        catch (IllegalArgumentException ex5) {
                            throw a(ex5);
                        }
                    }
                    this.aY();
                    continue;
                }
                this.X();
                this.b(a7, OCElementTypes.GENERIC_ARGUMENTS_LIST);
                return true;
            }
            a8.drop();
            this.i(a7);
            return false;
        }
    }
    
    private boolean S() {
        try {
            if (this.aF() != OCTokenTypes.IMPORT_MODULE_KEYWORD) {
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        PsiBuilder.Marker a7;
        while (true) {
            a7 = this.a7();
            while (true) {
                try {
                    this.aY();
                    if (!this.a(OCTokenTypes.IDENTIFIER, "Module name expected")) {
                        break;
                    }
                    if (this.a4() != OCTokenTypes.DOT) {
                        break;
                    }
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
                this.aY();
                if (!this.a(OCTokenTypes.IDENTIFIER, "Module name expected")) {
                    break;
                }
                continue;
            }
        }
        try {
            if (this.a4() == OCTokenTypes.SEMICOLON) {
                this.aY();
            }
        }
        catch (IllegalArgumentException ex3) {
            throw a(ex3);
        }
        this.b(a7, OCElementTypes.IMPORT_MODULE_STATEMENT);
        return true;
    }
    
    private void aP() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.PROPERTY_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.PROPERTY_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        try {
            this.aY();
            if (this.aF() == OCTokenTypes.LPAR) {
                this.ac();
            }
        }
        catch (IllegalArgumentException ex3) {
            throw a(ex3);
        }
        try {
            if (this.a(DeclarationContext.FILE, true, false, true, false) == DeclarationParsingResult.FAIL) {
                this.a("Property declaration expected");
            }
        }
        catch (IllegalArgumentException ex4) {
            throw a(ex4);
        }
        this.b(a7, OCElementTypes.PROPERTY);
    }
    
    private void ac() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LPAR;
                if (elementType != ocPunctuatorElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LPAR;
                if (elementType != ocPunctuatorElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        this.aY();
        if (this.aF() != OCTokenTypes.RPAR) {
            while (true) {
                final PsiBuilder.Marker a8 = this.a7();
                try {
                    if (this.aF() == OCTokenTypes.CLASS_KEYWORD) {
                        this.g();
                    }
                }
                catch (IllegalArgumentException ex3) {
                    throw a(ex3);
                }
                Label_0197: {
                    Label_0176: {
                        Label_0166: {
                            try {
                                this.a(OCTokenTypes.IDENTIFIER, "Attribute name expected");
                                if (this.aF() != OCTokenTypes.EQ) {
                                    break Label_0197;
                                }
                                this.aY();
                                if (this.aF() != OCTokenTypes.TEMPLATE_START_MARK) {
                                    break Label_0166;
                                }
                            }
                            catch (IllegalArgumentException ex4) {
                                throw a(ex4);
                            }
                            final PsiBuilder.Marker a9 = this.a7();
                            do {
                                this.aY();
                            } while (this.aF() != OCTokenTypes.TEMPLATE_STOP_MARK && this.aF() != null);
                            this.aY();
                            this.b(a9, OCElementTypes.LITERAL_EXPRESSION);
                            break Label_0176;
                        }
                        this.a(OCTokenTypes.IDENTIFIER, "Attribute value expected");
                        try {
                            if (this.aF() == OCTokenTypes.COLON) {
                                this.aY();
                            }
                        }
                        catch (IllegalArgumentException ex5) {
                            throw a(ex5);
                        }
                    }
                    try {
                        this.b(a8, OCElementTypes.PROPERTY_ATTRIBUTE);
                        if (this.aF() != OCTokenTypes.COMMA) {
                            break;
                        }
                    }
                    catch (IllegalArgumentException ex6) {
                        throw a(ex6);
                    }
                }
                this.aY();
            }
        }
        this.a(OCTokenTypes.RPAR, "Missing ')'");
        this.b(a7, OCElementTypes.PROPERTY_ATTRIBUTES_LIST);
    }
    
    private void t(final boolean b) {
        try {
            this.a(OCTokenTypes.LPAR, "Expecting '('");
            if (!this.b(DeclarationContext.PARAMETER_LIST, TypeParsingExpectation.ANY, b)) {
                this.a("Expecting type");
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        Label_0070: {
            try {
                if (this.aF() != OCTokenTypes.IDENTIFIER) {
                    break Label_0070;
                }
                final OCParsing ocParsing = this;
                final PsiBuilder psiBuilder = ocParsing.myBuilder;
                final int n = 1;
                final IElementType elementType = psiBuilder.lookAhead(n);
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.RPAR;
                if (elementType == ocPunctuatorElementType) {
                    break Label_0070;
                }
                break Label_0070;
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
            try {
                final OCParsing ocParsing = this;
                final PsiBuilder psiBuilder = ocParsing.myBuilder;
                final int n = 1;
                final IElementType elementType = psiBuilder.lookAhead(n);
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.RPAR;
                if (elementType == ocPunctuatorElementType) {
                    this.a("Unexpected token", this.BLOCK_STATEMENT_PARSER, OCElementTypes.UNKNOWN_CPP_CODE);
                }
            }
            catch (IllegalArgumentException ex3) {
                throw a(ex3);
            }
        }
        this.a(OCTokenTypes.RPAR, "Expecting ')'");
    }
    
    private boolean a(final TypeParsingExpectation typeParsingExpectation) {
        final PsiBuilder.Marker a7 = this.a7();
        try {
            if (this.aF() != OCTokenTypes.LPAR) {
                a7.drop();
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        Label_0059: {
            try {
                this.aY();
                if (!this.b(DeclarationContext.PARAMETER_LIST, typeParsingExpectation)) {
                    break Label_0059;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.RPAR;
                if (elementType != ocPunctuatorElementType) {
                    break Label_0059;
                }
                break Label_0059;
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.RPAR;
                if (elementType != ocPunctuatorElementType) {
                    this.i(a7);
                    return false;
                }
            }
            catch (IllegalArgumentException ex3) {
                throw a(ex3);
            }
        }
        this.aY();
        a7.drop();
        return true;
    }
    
    private boolean J() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_1       
        //     5: aload_0        
        //     6: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     9: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    12: if_acmpeq       27
        //    15: aload_1        
        //    16: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //    21: iconst_0       
        //    22: ireturn        
        //    23: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    26: athrow         
        //    27: aload_0        
        //    28: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    31: aload_0        
        //    32: iconst_0       
        //    33: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.ONLY_TYPES:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //    36: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(ZLcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;)Z
        //    39: ifeq            76
        //    42: aload_0        
        //    43: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    46: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    49: if_acmpeq       87
        //    52: goto            59
        //    55: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    58: athrow         
        //    59: aload_0        
        //    60: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    63: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    66: if_acmpeq       87
        //    69: goto            76
        //    72: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    75: athrow         
        //    76: aload_0        
        //    77: aload_1        
        //    78: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //    81: iconst_0       
        //    82: ireturn        
        //    83: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    86: athrow         
        //    87: aload_0        
        //    88: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    91: aload_1        
        //    92: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //    97: iconst_1       
        //    98: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      23     23     27     Ljava/lang/IllegalArgumentException;
        //  27     52     55     59     Ljava/lang/IllegalArgumentException;
        //  42     69     72     76     Ljava/lang/IllegalArgumentException;
        //  59     83     83     87     Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0059:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean aS() {
        return this.b(DeclarationContext.PARAMETER_LIST, TypeParsingExpectation.ANY);
    }
    
    private boolean b(final DeclarationContext declarationContext, final TypeParsingExpectation typeParsingExpectation) {
        return this.b(declarationContext, typeParsingExpectation, false);
    }
    
    private boolean b(final DeclarationContext p0, final TypeParsingExpectation p1, final boolean p2) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore          4
        //     6: aload_0        
        //     7: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    10: astore          5
        //    12: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.BRIDGE_CAST_KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //    15: aload           5
        //    17: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    20: ifeq            46
        //    23: aload_0        
        //    24: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    27: aload           4
        //    29: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //    34: aload_0        
        //    35: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    38: astore          4
        //    40: aload_0        
        //    41: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    44: astore          5
        //    46: iload_3        
        //    47: ifeq            240
        //    50: aload_0        
        //    51: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    54: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    57: if_acmpne       240
        //    60: goto            67
        //    63: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    66: athrow         
        //    67: aload_0        
        //    68: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //    71: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //    76: astore          6
        //    78: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.PARAMETER_TYPE_QUALIFIERS:Lgnu/trove/THashSet;
        //    81: aload           6
        //    83: invokevirtual   gnu/trove/THashSet.contains:(Ljava/lang/Object;)Z
        //    86: ifeq            100
        //    89: aload_0        
        //    90: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    93: goto            237
        //    96: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    99: athrow         
        //   100: aload_0        
        //   101: getfield        com/jetbrains/cidr/lang/parser/OCParsing.mySupportsNullability:Z
        //   104: ifeq            240
        //   107: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.PARAMETER_TYPE_NULLABILITY_QUALIFIERS:Lgnu/trove/THashSet;
        //   110: aload           6
        //   112: invokevirtual   gnu/trove/THashSet.contains:(Ljava/lang/Object;)Z
        //   115: ifne            142
        //   118: goto            125
        //   121: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   124: athrow         
        //   125: ldc             "null_unspecified"
        //   127: aload           6
        //   129: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //   132: ifeq            240
        //   135: goto            142
        //   138: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   141: athrow         
        //   142: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NONNULL_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   145: invokevirtual   com/jetbrains/cidr/lang/parser/OCElementType.getName:()Ljava/lang/String;
        //   148: aload           6
        //   150: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //   153: ifeq            177
        //   156: goto            163
        //   159: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   162: athrow         
        //   163: aload_0        
        //   164: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NONNULL_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   167: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;)V
        //   170: goto            233
        //   173: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   176: athrow         
        //   177: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NULLABLE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   180: invokevirtual   com/jetbrains/cidr/lang/parser/OCElementType.getName:()Ljava/lang/String;
        //   183: aload           6
        //   185: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //   188: ifeq            205
        //   191: aload_0        
        //   192: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NULLABLE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   195: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;)V
        //   198: goto            233
        //   201: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   204: athrow         
        //   205: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NULL_UNSPECIFIED_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   208: invokevirtual   com/jetbrains/cidr/lang/parser/OCElementType.getName:()Ljava/lang/String;
        //   211: aload           6
        //   213: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //   216: ifeq            233
        //   219: aload_0        
        //   220: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NULL_UNSPECIFIED_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   223: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;)V
        //   226: goto            233
        //   229: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   232: athrow         
        //   233: aload_0        
        //   234: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   237: goto            50
        //   240: aload_0        
        //   241: aload_1        
        //   242: aload_2        
        //   243: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;)Z
        //   246: ifne            261
        //   249: aload_0        
        //   250: aload           4
        //   252: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   255: iconst_0       
        //   256: ireturn        
        //   257: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   260: athrow         
        //   261: aload_0        
        //   262: aload           4
        //   264: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.TYPE_ELEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   267: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   270: iconst_1       
        //   271: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  46     60     63     67     Ljava/lang/IllegalArgumentException;
        //  78     96     96     100    Ljava/lang/IllegalArgumentException;
        //  100    118    121    125    Ljava/lang/IllegalArgumentException;
        //  107    135    138    142    Ljava/lang/IllegalArgumentException;
        //  125    156    159    163    Ljava/lang/IllegalArgumentException;
        //  142    173    173    177    Ljava/lang/IllegalArgumentException;
        //  177    201    201    205    Ljava/lang/IllegalArgumentException;
        //  205    226    229    233    Ljava/lang/IllegalArgumentException;
        //  240    257    257    261    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0125:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void u() {
        Label_0027: {
            try {
                if (this.aF() == OCTokenTypes.MINUS) {
                    break Label_0027;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.PLUS;
                if (elementType != ocPunctuatorElementType) {
                    break Label_0027;
                }
                break Label_0027;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.PLUS;
                if (elementType != ocPunctuatorElementType) {
                    this.a("Method declaration expected after @optional keyword");
                    return;
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        boolean b = false;
        this.aY();
        try {
            if (this.aF() == OCTokenTypes.LPAR) {
                this.t(true);
            }
            this.aG();
            PsiBuilder.Marker marker = this.a7();
            final IElementType af = this.aF();
        Label_0131_Outer:
            while (true) {
                Label_0125: {
                    while (true) {
                        Label_0118: {
                            Label_0104: {
                                try {
                                    if (!this.c(af)) {
                                        break Label_0125;
                                    }
                                    final IElementType elementType2 = af;
                                    final OCElementType ocElementType = OCTokenTypes.IDENTIFIER;
                                    if (elementType2 != ocElementType) {
                                        break Label_0104;
                                    }
                                    break Label_0118;
                                }
                                catch (IllegalArgumentException ex3) {
                                    throw a(ex3);
                                }
                                try {
                                    final IElementType elementType2 = af;
                                    final OCElementType ocElementType = OCTokenTypes.IDENTIFIER;
                                    if (elementType2 != ocElementType) {
                                        this.a(OCTokenTypes.IDENTIFIER);
                                    }
                                }
                                catch (IllegalArgumentException ex4) {
                                    throw a(ex4);
                                }
                            }
                            break Label_0118;
                            while (true) {
                                Label_0174: {
                                    Label_0162: {
                                        try {
                                            if (this.aF() != OCTokenTypes.COLON) {
                                                break;
                                            }
                                            final OCParsing ocParsing2 = this;
                                            ocParsing2.aY();
                                            final OCParsing ocParsing3 = this;
                                            final IElementType elementType3 = ocParsing3.aF();
                                            final OCPunctuatorElementType ocPunctuatorElementType2 = OCTokenTypes.LPAR;
                                            if (elementType3 == ocPunctuatorElementType2) {
                                                break Label_0162;
                                            }
                                            break Label_0174;
                                        }
                                        catch (IllegalArgumentException ex5) {
                                            throw a(ex5);
                                        }
                                        try {
                                            final OCParsing ocParsing2 = this;
                                            ocParsing2.aY();
                                            final OCParsing ocParsing3 = this;
                                            final IElementType elementType3 = ocParsing3.aF();
                                            final OCPunctuatorElementType ocPunctuatorElementType2 = OCTokenTypes.LPAR;
                                            if (elementType3 == ocPunctuatorElementType2) {
                                                this.t(true);
                                            }
                                        }
                                        catch (IllegalArgumentException ex6) {
                                            throw a(ex6);
                                        }
                                    }
                                    try {
                                        this.aG();
                                        if (this.aF() == OCTokenTypes.IDENTIFIER) {
                                            this.myLocalNameScope.defineValue(this.myBuilder.getTokenText(), false, this.myBuilder.getCurrentOffset());
                                        }
                                    }
                                    catch (IllegalArgumentException ex7) {
                                        throw a(ex7);
                                    }
                                }
                                Label_0325: {
                                    try {
                                        this.a(OCTokenTypes.IDENTIFIER, "Expecting parameter name");
                                        if (!this.c(af)) {
                                            if (this.aF() != OCTokenTypes.COLON) {
                                                break Label_0325;
                                            }
                                        }
                                    }
                                    catch (IllegalArgumentException ex8) {
                                        throw a(ex8);
                                    }
                                    this.b(marker, OCElementTypes.METHOD_SELECTOR_PART);
                                    marker = this.a7();
                                    b = true;
                                    final IElementType af2 = this.aF();
                                    Label_0304: {
                                        try {
                                            if (!this.c(af2)) {
                                                continue Label_0131_Outer;
                                            }
                                            final IElementType elementType4 = af2;
                                            final OCElementType ocElementType2 = OCTokenTypes.IDENTIFIER;
                                            if (elementType4 != ocElementType2) {
                                                break Label_0304;
                                            }
                                            break Label_0304;
                                        }
                                        catch (IllegalArgumentException ex9) {
                                            throw a(ex9);
                                        }
                                        try {
                                            final IElementType elementType4 = af2;
                                            final OCElementType ocElementType2 = OCTokenTypes.IDENTIFIER;
                                            if (elementType4 != ocElementType2) {
                                                this.a(OCTokenTypes.IDENTIFIER);
                                            }
                                        }
                                        catch (IllegalArgumentException ex10) {
                                            throw a(ex10);
                                        }
                                    }
                                    this.aY();
                                    continue Label_0131_Outer;
                                    try {
                                        if (this.aF() == OCTokenTypes.RPAR) {
                                            this.a("Unexpected token", this.BLOCK_STATEMENT_PARSER, OCElementTypes.UNKNOWN_CPP_CODE);
                                            continue Label_0131_Outer;
                                        }
                                    }
                                    catch (IllegalArgumentException ex11) {
                                        throw a(ex11);
                                    }
                                }
                                break;
                            }
                            while (true) {
                                Label_0372: {
                                    Label_0380: {
                                        try {
                                            if (b) {
                                                marker.drop();
                                                break Label_0380;
                                            }
                                        }
                                        catch (IllegalArgumentException ex12) {
                                            throw a(ex12);
                                        }
                                        break Label_0372;
                                        while (true) {
                                            Label_0411: {
                                                try {
                                                    if (this.aF() != OCTokenTypes.COMMA) {
                                                        break;
                                                    }
                                                    final OCParsing ocParsing4 = this;
                                                    ocParsing4.aY();
                                                    final OCParsing ocParsing5 = this;
                                                    final IElementType elementType5 = ocParsing5.aF();
                                                    final OCPunctuatorElementType ocPunctuatorElementType3 = OCTokenTypes.ELLIPSIS;
                                                    if (elementType5 == ocPunctuatorElementType3) {
                                                        break Label_0411;
                                                    }
                                                    break Label_0411;
                                                }
                                                catch (IllegalArgumentException ex13) {
                                                    throw a(ex13);
                                                }
                                                try {
                                                    final OCParsing ocParsing4 = this;
                                                    ocParsing4.aY();
                                                    final OCParsing ocParsing5 = this;
                                                    final IElementType elementType5 = ocParsing5.aF();
                                                    final OCPunctuatorElementType ocPunctuatorElementType3 = OCTokenTypes.ELLIPSIS;
                                                    if (elementType5 == ocPunctuatorElementType3) {
                                                        this.aY();
                                                        continue Label_0131_Outer;
                                                    }
                                                }
                                                catch (IllegalArgumentException ex14) {
                                                    throw a(ex14);
                                                }
                                            }
                                            this.a(false);
                                        }
                                    }
                                    boolean b2 = false;
                                    Label_0489: {
                                        Label_0470: {
                                            while (true) {
                                                Label_0458: {
                                                    try {
                                                        if (this.aF() == OCTokenTypes.__ASM_KEYWORD) {
                                                            break Label_0458;
                                                        }
                                                        final OCParsing ocParsing6 = this;
                                                        final IElementType elementType6 = ocParsing6.aF();
                                                        final OCElementType ocElementType3 = OCTokenTypes.__ATTRIBUTE_KEYWORD;
                                                        if (elementType6 == ocElementType3) {
                                                            break Label_0458;
                                                        }
                                                        break Label_0470;
                                                    }
                                                    catch (IllegalArgumentException ex15) {
                                                        throw a(ex15);
                                                    }
                                                    try {
                                                        final OCParsing ocParsing6 = this;
                                                        final IElementType elementType6 = ocParsing6.aF();
                                                        final OCElementType ocElementType3 = OCTokenTypes.__ATTRIBUTE_KEYWORD;
                                                        if (elementType6 == ocElementType3) {
                                                            this.a2();
                                                            continue;
                                                        }
                                                    }
                                                    catch (IllegalArgumentException ex16) {
                                                        throw a(ex16);
                                                    }
                                                }
                                                break;
                                            }
                                            try {
                                                if (this.aF() == OCTokenTypes.SEMICOLON) {
                                                    b2 = true;
                                                    break Label_0489;
                                                }
                                            }
                                            catch (IllegalArgumentException ex17) {
                                                throw a(ex17);
                                            }
                                        }
                                        b2 = false;
                                    }
                                    final boolean b3 = b2;
                                    try {
                                        if (b3) {
                                            this.aY();
                                        }
                                    }
                                    catch (IllegalArgumentException ex18) {
                                        throw a(ex18);
                                    }
                                    final PsiBuilder.Marker a8 = this.a7();
                                    try {
                                        if (this.aF() == OCTokenTypes.LBRACE) {
                                            this.f(true, false);
                                            a8.drop();
                                            return;
                                        }
                                    }
                                    catch (IllegalArgumentException ex19) {
                                        throw a(ex19);
                                    }
                                    try {
                                        this.i(a8);
                                        if (!b3) {
                                            this.a("Expecting ';' or method body");
                                        }
                                    }
                                    catch (IllegalArgumentException ex20) {
                                        throw a(ex20);
                                    }
                                    return;
                                }
                                this.b(marker, OCElementTypes.METHOD_SELECTOR_PART);
                                continue;
                            }
                        }
                        this.aY();
                        continue;
                    }
                }
                this.a("Expecting method name");
                continue;
            }
        }
        finally {
            this.b(a7, OCElementTypes.METHOD);
        }
    }
    
    private PsiBuilder.Marker g(final PsiBuilder.Marker p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     4: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //     7: if_acmpne       162
        //    10: aload_0        
        //    11: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    14: astore_2       
        //    15: aload_0        
        //    16: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    19: aload_0        
        //    20: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    23: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    26: if_acmpeq       133
        //    29: aload_0        
        //    30: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    33: ifnull          133
        //    36: goto            43
        //    39: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    42: athrow         
        //    43: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IVAR_VISIBILITY_KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //    46: aload_0        
        //    47: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    50: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    53: ifne            80
        //    56: goto            63
        //    59: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    62: athrow         
        //    63: aload_0        
        //    64: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    67: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.OBJC_ERROR_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    70: if_acmpne       91
        //    73: goto            80
        //    76: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    79: athrow         
        //    80: aload_0        
        //    81: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    84: goto            19
        //    87: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    90: athrow         
        //    91: aload_0        
        //    92: aconst_null    
        //    93: iconst_1       
        //    94: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;Z)Z
        //    97: ifne            19
        //   100: aload_0        
        //   101: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   104: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   107: if_acmpne       117
        //   110: goto            133
        //   113: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   116: athrow         
        //   117: aload_0        
        //   118: ldc             "Expecting member variable"
        //   120: aload_0        
        //   121: getfield        com/jetbrains/cidr/lang/parser/OCParsing.BLOCK_STATEMENT_PARSER:Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;
        //   124: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.UNKNOWN_CPP_CODE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   127: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;Lcom/intellij/psi/tree/IElementType;)V
        //   130: goto            19
        //   133: aload_0        
        //   134: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   137: ldc             "Missing '}'"
        //   139: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   142: pop            
        //   143: aload_0        
        //   144: aload_2        
        //   145: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.INSTANCE_VARIABLES_LIST:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   148: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   151: aload_1        
        //   152: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   157: aload_0        
        //   158: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   161: areturn        
        //   162: aload_1        
        //   163: invokeinterface com/intellij/lang/PsiBuilder$Marker.precede:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   168: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.INSTANCE_VARIABLES_LIST:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   171: aload_1        
        //   172: invokeinterface com/intellij/lang/PsiBuilder$Marker.doneBefore:(Lcom/intellij/psi/tree/IElementType;Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   177: aload_1        
        //   178: areturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  19     36     39     43     Ljava/lang/IllegalArgumentException;
        //  29     56     59     63     Ljava/lang/IllegalArgumentException;
        //  43     73     76     80     Ljava/lang/IllegalArgumentException;
        //  63     87     87     91     Ljava/lang/IllegalArgumentException;
        //  100    113    113    117    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0043:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private DeclarationParsingResult a(final DeclarationContext declarationContext) {
        return this.b(declarationContext, true, false, false);
    }
    
    private DeclarationParsingResult b(final DeclarationContext declarationContext, final boolean b, final boolean b2, final boolean b3) {
        return this.a(declarationContext, b, b2, false, b3);
    }
    
    private DeclarationParsingResult a(final DeclarationContext p0, final boolean p1, final boolean p2, final boolean p3, final boolean p4) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore          6
        //     6: aload_0        
        //     7: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aG:()Z
        //    10: pop            
        //    11: aconst_null    
        //    12: astore          7
        //    14: iconst_0       
        //    15: istore          8
        //    17: aload_0        
        //    18: iconst_0       
        //    19: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myForceEagerMode:Z
        //    22: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DECLARATION_SPECIFIERS_IN_TYPES:Lcom/intellij/psi/tree/TokenSet;
        //    25: aload_0        
        //    26: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    29: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    32: ifne            66
        //    35: aload_0        
        //    36: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //    39: ifne            119
        //    42: goto            49
        //    45: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    48: athrow         
        //    49: aload_0        
        //    50: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    53: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AUTO_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    56: if_acmpne       119
        //    59: goto            66
        //    62: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    65: athrow         
        //    66: aload_0        
        //    67: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    70: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AUTO_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    73: if_acmpeq       100
        //    76: goto            83
        //    79: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    82: athrow         
        //    83: aload_0        
        //    84: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    87: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CONSTEXPR_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //    90: if_acmpne       112
        //    93: goto            100
        //    96: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    99: athrow         
        //   100: aload_0        
        //   101: iconst_1       
        //   102: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myForceEagerMode:Z
        //   105: goto            112
        //   108: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   111: athrow         
        //   112: aload_0        
        //   113: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   116: goto            22
        //   119: aload_0        
        //   120: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   123: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TEMPLATE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   126: if_acmpne       155
        //   129: iconst_1       
        //   130: istore          8
        //   132: aload           7
        //   134: ifnonnull       146
        //   137: new             Ljava/util/ArrayList;
        //   140: dup            
        //   141: invokespecial   java/util/ArrayList.<init>:()V
        //   144: astore          7
        //   146: aload_0        
        //   147: aload           7
        //   149: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.c:(Ljava/util/List;)V
        //   152: goto            119
        //   155: iload           8
        //   157: ifeq            192
        //   160: aload_0        
        //   161: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   164: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   167: if_acmpne       192
        //   170: goto            177
        //   173: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   176: athrow         
        //   177: aload           6
        //   179: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   184: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   187: areturn        
        //   188: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   191: athrow         
        //   192: aload_0        
        //   193: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   196: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.USING_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   199: if_acmpne       218
        //   202: aload_0        
        //   203: aload           6
        //   205: iload           8
        //   207: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/lang/PsiBuilder$Marker;Z)V
        //   210: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   213: areturn        
        //   214: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   217: athrow         
        //   218: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DECLARATION_SPECIFIERS_IN_TYPES:Lcom/intellij/psi/tree/TokenSet;
        //   221: aload_0        
        //   222: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   225: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   228: ifne            262
        //   231: aload_0        
        //   232: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   235: ifne            315
        //   238: goto            245
        //   241: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   244: athrow         
        //   245: aload_0        
        //   246: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   249: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AUTO_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   252: if_acmpne       315
        //   255: goto            262
        //   258: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   261: athrow         
        //   262: aload_0        
        //   263: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   266: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AUTO_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   269: if_acmpeq       296
        //   272: goto            279
        //   275: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   278: athrow         
        //   279: aload_0        
        //   280: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   283: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CONSTEXPR_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   286: if_acmpne       308
        //   289: goto            296
        //   292: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   295: athrow         
        //   296: aload_0        
        //   297: iconst_1       
        //   298: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myForceEagerMode:Z
        //   301: goto            308
        //   304: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   307: athrow         
        //   308: aload_0        
        //   309: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   312: goto            218
        //   315: aload_0        
        //   316: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aG:()Z
        //   319: pop            
        //   320: aload_0        
        //   321: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   324: astore          9
        //   326: aload           9
        //   328: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TYPEDEF_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   331: if_acmpne       342
        //   334: iconst_1       
        //   335: goto            343
        //   338: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   341: athrow         
        //   342: iconst_0       
        //   343: istore          10
        //   345: aload           9
        //   347: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   350: if_acmpeq       379
        //   353: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.CPP_SPECIFIERS_FIRST:Lcom/intellij/psi/tree/TokenSet;
        //   356: aload           9
        //   358: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   361: ifeq            379
        //   364: goto            371
        //   367: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   370: athrow         
        //   371: iconst_1       
        //   372: goto            380
        //   375: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   378: athrow         
        //   379: iconst_0       
        //   380: istore          11
        //   382: iload           11
        //   384: ifeq            397
        //   387: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   390: goto            398
        //   393: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   396: athrow         
        //   397: aload_1        
        //   398: astore          12
        //   400: aload_0        
        //   401: aload           12
        //   403: iload           10
        //   405: iload           8
        //   407: iconst_0       
        //   408: iload_3        
        //   409: ifeq            422
        //   412: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.NON_VALUES:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //   415: goto            425
        //   418: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   421: athrow         
        //   422: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.ANY:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //   425: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZLcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;)Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   428: astore          13
        //   430: aload           13
        //   432: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   435: if_acmpne       459
        //   438: aload           6
        //   440: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   445: aload_0        
        //   446: ldc             "Expecting type"
        //   448: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   451: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.FAIL:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   454: areturn        
        //   455: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   458: athrow         
        //   459: aload           13
        //   461: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.EMPTY_TYPE_PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   464: if_acmpne       493
        //   467: iload_3        
        //   468: ifeq            493
        //   471: goto            478
        //   474: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   477: athrow         
        //   478: aload           6
        //   480: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   485: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.FAIL:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   488: areturn        
        //   489: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   492: athrow         
        //   493: iload           11
        //   495: aload           13
        //   497: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED_FOR_SURE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   500: if_acmpne       511
        //   503: iconst_1       
        //   504: goto            512
        //   507: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   510: athrow         
        //   511: iconst_0       
        //   512: ior            
        //   513: istore          11
        //   515: iload           11
        //   517: ifeq            540
        //   520: aload           13
        //   522: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.EMPTY_TYPE_PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   525: if_acmpeq       540
        //   528: goto            535
        //   531: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   534: athrow         
        //   535: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED_FOR_SURE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   538: astore          13
        //   540: aload_0        
        //   541: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   544: astore          14
        //   546: aload_0        
        //   547: aload           12
        //   549: iload           10
        //   551: iload           8
        //   553: aload           13
        //   555: iload           5
        //   557: iload           4
        //   559: aconst_null    
        //   560: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZLcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;ZZLjava/lang/String;)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult;
        //   563: astore          15
        //   565: aload           15
        //   567: getfield        com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult.myType:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type;
        //   570: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type.isOk:()Z
        //   573: ifne            732
        //   576: iload_3        
        //   577: ifeq            617
        //   580: goto            587
        //   583: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   586: athrow         
        //   587: aload           13
        //   589: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED_FOR_SURE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   592: if_acmpeq       617
        //   595: goto            602
        //   598: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   601: athrow         
        //   602: aload           6
        //   604: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   609: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.FAIL:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   612: areturn        
        //   613: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   616: athrow         
        //   617: aload_0        
        //   618: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   621: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   624: if_acmpeq       732
        //   627: aload_1        
        //   628: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   631: if_acmpeq       698
        //   634: goto            641
        //   637: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   640: athrow         
        //   641: iload           11
        //   643: ifeq            721
        //   646: goto            653
        //   649: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   652: athrow         
        //   653: aload           14
        //   655: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.MUL:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   658: if_acmpeq       698
        //   661: goto            668
        //   664: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   667: athrow         
        //   668: aload           14
        //   670: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   673: if_acmpeq       698
        //   676: goto            683
        //   679: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   682: athrow         
        //   683: aload           14
        //   685: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   688: if_acmpne       721
        //   691: goto            698
        //   694: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   697: athrow         
        //   698: aload_0        
        //   699: ldc             "Declarator expected"
        //   701: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   704: aload_0        
        //   705: aload           6
        //   707: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DECLARATION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   710: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   713: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.PARSED_WITHOUT_SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   716: areturn        
        //   717: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   720: athrow         
        //   721: aload           6
        //   723: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   728: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.FAIL:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   731: areturn        
        //   732: aload_0        
        //   733: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.v:()Z
        //   736: pop            
        //   737: iconst_0       
        //   738: istore          16
        //   740: iconst_0       
        //   741: istore          17
        //   743: aload_0        
        //   744: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   747: ifne            838
        //   750: aload_1        
        //   751: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   754: if_acmpne       838
        //   757: goto            764
        //   760: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   763: athrow         
        //   764: aload_0        
        //   765: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   768: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   771: if_acmpeq       838
        //   774: goto            781
        //   777: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   780: athrow         
        //   781: aload_0        
        //   782: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   785: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   788: if_acmpeq       838
        //   791: goto            798
        //   794: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   797: athrow         
        //   798: aload_0        
        //   799: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   802: astore          18
        //   804: aload_0        
        //   805: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   808: iconst_1       
        //   809: iconst_0       
        //   810: iload           5
        //   812: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZ)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   815: astore          19
        //   817: aload_0        
        //   818: aload           18
        //   820: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   823: aload           19
        //   825: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   828: if_acmpne       838
        //   831: iconst_1       
        //   832: istore          17
        //   834: aload_0        
        //   835: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ap:()V
        //   838: aload_0        
        //   839: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   842: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   845: if_acmpne       938
        //   848: aload_0        
        //   849: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //   852: astore          18
        //   854: aload_0        
        //   855: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //   858: astore          19
        //   860: aload_0        
        //   861: aload           18
        //   863: aload           19
        //   865: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/util/List;Ljava/lang/String;)V
        //   868: aload_0        
        //   869: aconst_null    
        //   870: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //   873: aload_0        
        //   874: iconst_0       
        //   875: aload_0        
        //   876: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myForceEagerMode:Z
        //   879: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.f:(ZZ)V
        //   882: aload_0        
        //   883: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   886: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CATCH_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   889: if_acmpne       903
        //   892: aload_0        
        //   893: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aM:()V
        //   896: goto            882
        //   899: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   902: athrow         
        //   903: aload_0        
        //   904: aload           18
        //   906: aload           19
        //   908: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Ljava/util/List;Ljava/lang/String;)V
        //   911: aload_0        
        //   912: aload           6
        //   914: iload           17
        //   916: ifeq            929
        //   919: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.FUNCTION_KR_DEFINITION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   922: goto            932
        //   925: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   928: athrow         
        //   929: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.FUNCTION_DEFINITION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   932: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   935: goto            1041
        //   938: aload_0        
        //   939: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   942: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   945: if_acmpne       970
        //   948: iload_2        
        //   949: ifeq            983
        //   952: goto            959
        //   955: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   958: athrow         
        //   959: aload_0        
        //   960: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   963: goto            983
        //   966: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   969: athrow         
        //   970: iload_2        
        //   971: ifeq            983
        //   974: iconst_1       
        //   975: istore          16
        //   977: aload_0        
        //   978: ldc             "Missing ';'"
        //   980: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   983: iload           10
        //   985: ifne            1014
        //   988: aload           15
        //   990: getfield        com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult.myType:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type;
        //   993: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type.PARSED_FUNCTION:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type;
        //   996: if_acmpne       1014
        //   999: goto            1006
        //  1002: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1005: athrow         
        //  1006: iconst_1       
        //  1007: goto            1015
        //  1010: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1013: athrow         
        //  1014: iconst_0       
        //  1015: istore          18
        //  1017: aload_0        
        //  1018: aload           6
        //  1020: iload           18
        //  1022: ifeq            1035
        //  1025: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.FUNCTION_DECLARATION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1028: goto            1038
        //  1031: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1034: athrow         
        //  1035: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DECLARATION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1038: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //  1041: iload           16
        //  1043: ifeq            1056
        //  1046: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.PARSED_WITHOUT_SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //  1049: goto            1059
        //  1052: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1055: athrow         
        //  1056: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //  1059: areturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  22     42     45     49     Ljava/lang/IllegalArgumentException;
        //  35     59     62     66     Ljava/lang/IllegalArgumentException;
        //  49     76     79     83     Ljava/lang/IllegalArgumentException;
        //  66     93     96     100    Ljava/lang/IllegalArgumentException;
        //  83     105    108    112    Ljava/lang/IllegalArgumentException;
        //  155    170    173    177    Ljava/lang/IllegalArgumentException;
        //  160    188    188    192    Ljava/lang/IllegalArgumentException;
        //  192    214    214    218    Ljava/lang/IllegalArgumentException;
        //  218    238    241    245    Ljava/lang/IllegalArgumentException;
        //  231    255    258    262    Ljava/lang/IllegalArgumentException;
        //  245    272    275    279    Ljava/lang/IllegalArgumentException;
        //  262    289    292    296    Ljava/lang/IllegalArgumentException;
        //  279    301    304    308    Ljava/lang/IllegalArgumentException;
        //  326    338    338    342    Ljava/lang/IllegalArgumentException;
        //  345    364    367    371    Ljava/lang/IllegalArgumentException;
        //  353    375    375    379    Ljava/lang/IllegalArgumentException;
        //  382    393    393    397    Ljava/lang/IllegalArgumentException;
        //  400    418    418    422    Ljava/lang/IllegalArgumentException;
        //  430    455    455    459    Ljava/lang/IllegalArgumentException;
        //  459    471    474    478    Ljava/lang/IllegalArgumentException;
        //  467    489    489    493    Ljava/lang/IllegalArgumentException;
        //  493    507    507    511    Ljava/lang/IllegalArgumentException;
        //  515    528    531    535    Ljava/lang/IllegalArgumentException;
        //  565    580    583    587    Ljava/lang/IllegalArgumentException;
        //  576    595    598    602    Ljava/lang/IllegalArgumentException;
        //  587    613    613    617    Ljava/lang/IllegalArgumentException;
        //  617    634    637    641    Ljava/lang/IllegalArgumentException;
        //  627    646    649    653    Ljava/lang/IllegalArgumentException;
        //  641    661    664    668    Ljava/lang/IllegalArgumentException;
        //  653    676    679    683    Ljava/lang/IllegalArgumentException;
        //  668    691    694    698    Ljava/lang/IllegalArgumentException;
        //  683    717    717    721    Ljava/lang/IllegalArgumentException;
        //  743    757    760    764    Ljava/lang/IllegalArgumentException;
        //  750    774    777    781    Ljava/lang/IllegalArgumentException;
        //  764    791    794    798    Ljava/lang/IllegalArgumentException;
        //  882    899    899    903    Ljava/lang/IllegalArgumentException;
        //  903    925    925    929    Ljava/lang/IllegalArgumentException;
        //  938    952    955    959    Ljava/lang/IllegalArgumentException;
        //  948    966    966    970    Ljava/lang/IllegalArgumentException;
        //  983    999    1002   1006   Ljava/lang/IllegalArgumentException;
        //  988    1010   1010   1014   Ljava/lang/IllegalArgumentException;
        //  1017   1031   1031   1035   Ljava/lang/IllegalArgumentException;
        //  1041   1052   1052   1056   Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0049:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void a(final PsiBuilder.Marker marker, final boolean b) {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCKeywordElementType ocKeywordElementType = OCTokenTypes.USING_CPP_KEYWORD;
                if (elementType != ocKeywordElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCKeywordElementType ocKeywordElementType = OCTokenTypes.USING_CPP_KEYWORD;
                if (elementType != ocKeywordElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        this.aY();
        Label_0322: {
            if (this.aF() == OCTokenTypes.NAMESPACE_CPP_KEYWORD) {
                this.aY();
                final PsiBuilder.Marker a7 = this.a7();
                final String tokenText = this.myBuilder.getTokenText();
                final List<String> t = this.T();
                Label_0117: {
                    try {
                        if (t != null) {
                            this.myLocalNameScope.defineNamespaceUsing(t);
                            break Label_0117;
                        }
                    }
                    catch (IllegalArgumentException ex3) {
                        throw a(ex3);
                    }
                    try {
                        if (tokenText != null) {
                            this.myLocalNameScope.defineNamespaceUsing(tokenText);
                        }
                    }
                    catch (IllegalArgumentException ex4) {
                        throw a(ex4);
                    }
                }
                this.b(a7, OCElementTypes.REFERENCE_ELEMENT);
                this.aG();
                this.a(OCTokenTypes.SEMICOLON, "Expecting ';'");
            }
            else {
                final PsiBuilder.Marker a8 = this.a7();
                final String tokenText2 = this.myBuilder.getTokenText();
                final List<String> t2 = this.T();
                Label_0314: {
                    Label_0272: {
                        Label_0239: {
                            Label_0202: {
                                try {
                                    if (this.aF() != OCTokenTypes.EQ) {
                                        break Label_0272;
                                    }
                                    final PsiBuilder.Marker marker2 = a8;
                                    marker2.drop();
                                    final OCParsing ocParsing2 = this;
                                    ocParsing2.aY();
                                    final OCParsing ocParsing3 = this;
                                    ocParsing3.aS();
                                    final List<String> list = t2;
                                    if (list != null) {
                                        break Label_0202;
                                    }
                                    break Label_0239;
                                }
                                catch (IllegalArgumentException ex5) {
                                    throw a(ex5);
                                }
                                try {
                                    final PsiBuilder.Marker marker2 = a8;
                                    marker2.drop();
                                    final OCParsing ocParsing2 = this;
                                    ocParsing2.aY();
                                    final OCParsing ocParsing3 = this;
                                    ocParsing3.aS();
                                    final List<String> list = t2;
                                    if (list != null) {
                                        this.myLocalNameScope.defineType(t2.get(0), b, false, this.myBuilder.getCurrentOffset());
                                        break Label_0322;
                                    }
                                }
                                catch (IllegalArgumentException ex6) {
                                    throw a(ex6);
                                }
                            }
                            try {
                                if (tokenText2 != null) {
                                    this.myLocalNameScope.defineType(tokenText2, b, false, this.myBuilder.getCurrentOffset());
                                }
                                break Label_0322;
                            }
                            catch (IllegalArgumentException ex7) {
                                throw a(ex7);
                            }
                        }
                        try {
                            if (t2 != null) {
                                this.myLocalNameScope.defineSymbolUsing(t2);
                                break Label_0314;
                            }
                        }
                        catch (IllegalArgumentException ex8) {
                            throw a(ex8);
                        }
                    }
                    try {
                        if (tokenText2 != null) {
                            this.myLocalNameScope.defineSymbolUsing(tokenText2);
                        }
                    }
                    catch (IllegalArgumentException ex9) {
                        throw a(ex9);
                    }
                }
                this.b(a8, OCElementTypes.REFERENCE_ELEMENT);
            }
        }
        this.b(marker, OCElementTypes.CPP_USING_STATEMENT);
    }
    
    private void c(final List<String> p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //     4: aload_0        
        //     5: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     8: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    11: if_acmpne       112
        //    14: aload_0        
        //    15: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    18: astore_2       
        //    19: aload_0        
        //    20: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    23: iconst_1       
        //    24: istore_3       
        //    25: aload_0        
        //    26: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.F:()Z
        //    29: ifne            100
        //    32: aload_0        
        //    33: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    36: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    39: if_acmpeq       100
        //    42: aload_0        
        //    43: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    46: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GTGT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    49: if_acmpeq       100
        //    52: goto            59
        //    55: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    58: athrow         
        //    59: iload_3        
        //    60: ifne            87
        //    63: goto            70
        //    66: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    69: athrow         
        //    70: aload_0        
        //    71: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    74: ldc             "Expecting ','"
        //    76: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //    79: pop            
        //    80: goto            87
        //    83: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    86: athrow         
        //    87: iconst_0       
        //    88: istore_3       
        //    89: aload_0        
        //    90: aload_1        
        //    91: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/util/List;)Z
        //    94: ifne            25
        //    97: goto            100
        //   100: aload_0        
        //   101: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.X:()V
        //   104: aload_0        
        //   105: aload_2        
        //   106: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CPP_TEMPLATE_PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   109: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   112: return         
        //    Signature:
        //  (Ljava/util/List<Ljava/lang/String;>;)V
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  32     52     55     59     Ljava/lang/IllegalArgumentException;
        //  42     63     66     70     Ljava/lang/IllegalArgumentException;
        //  59     80     83     87     Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0059:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean a(final List<String> p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     4: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TEMPLATE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //     7: if_acmpne       22
        //    10: aload_0        
        //    11: aconst_null    
        //    12: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.c:(Ljava/util/List;)V
        //    15: goto            22
        //    18: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    21: athrow         
        //    22: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.TEMPLATE_PARAMETER_SPECIFIERS:Lcom/intellij/psi/tree/TokenSet;
        //    25: aload_0        
        //    26: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    29: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    32: ifeq            240
        //    35: aload_0        
        //    36: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    39: astore_2       
        //    40: aload_0        
        //    41: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    44: aload_0        
        //    45: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    48: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELLIPSIS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    51: if_acmpne       65
        //    54: aload_0        
        //    55: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    58: goto            65
        //    61: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    64: athrow         
        //    65: aload_0        
        //    66: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    69: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    72: if_acmpne       144
        //    75: aload_1        
        //    76: ifnull          121
        //    79: goto            86
        //    82: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    85: athrow         
        //    86: aload_0        
        //    87: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //    90: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //    95: astore_3       
        //    96: aload_1        
        //    97: aload_3        
        //    98: invokeinterface java/util/List.add:(Ljava/lang/Object;)Z
        //   103: pop            
        //   104: aload_0        
        //   105: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLocalNameScope:Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope;
        //   108: aload_3        
        //   109: aload_0        
        //   110: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   113: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //   118: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.addTemplateTypeParameter:(Ljava/lang/String;I)V
        //   121: aload_0        
        //   122: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.T:()Ljava/util/List;
        //   125: ifnull          144
        //   128: aload_2        
        //   129: invokeinterface com/intellij/lang/PsiBuilder$Marker.rollbackTo:()V
        //   134: aload_0        
        //   135: iconst_1       
        //   136: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Z)Z
        //   139: ireturn        
        //   140: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   143: athrow         
        //   144: aload_0        
        //   145: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   148: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EQ:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   151: if_acmpne       170
        //   154: aload_0        
        //   155: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   158: aload_0        
        //   159: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aS:()Z
        //   162: pop            
        //   163: goto            170
        //   166: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   169: athrow         
        //   170: aload_0        
        //   171: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   174: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   177: if_acmpeq       230
        //   180: aload_0        
        //   181: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   184: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GTGT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   187: if_acmpeq       230
        //   190: goto            197
        //   193: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   196: athrow         
        //   197: aload_0        
        //   198: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   201: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   204: if_acmpeq       230
        //   207: goto            214
        //   210: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   213: athrow         
        //   214: aload_2        
        //   215: invokeinterface com/intellij/lang/PsiBuilder$Marker.rollbackTo:()V
        //   220: aload_0        
        //   221: iconst_1       
        //   222: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Z)Z
        //   225: ireturn        
        //   226: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   229: athrow         
        //   230: aload_0        
        //   231: aload_2        
        //   232: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CPP_TYPE_PARAMETER_DECLARATION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   235: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   238: iconst_1       
        //   239: ireturn        
        //   240: aload_0        
        //   241: iconst_1       
        //   242: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Z)Z
        //   245: ireturn        
        //    Signature:
        //  (Ljava/util/List<Ljava/lang/String;>;)Z
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      15     18     22     Ljava/lang/IllegalArgumentException;
        //  40     58     61     65     Ljava/lang/IllegalArgumentException;
        //  65     79     82     86     Ljava/lang/IllegalArgumentException;
        //  121    140    140    144    Ljava/lang/IllegalArgumentException;
        //  144    163    166    170    Ljava/lang/IllegalArgumentException;
        //  170    190    193    197    Ljava/lang/IllegalArgumentException;
        //  180    207    210    214    Ljava/lang/IllegalArgumentException;
        //  197    226    226    230    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0197:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void f(final boolean b, final boolean b2) {
        final PsiBuilder.Marker a7 = this.a7();
        final BlockParsingMode myBlocksParsingMode = this.myBlocksParsingMode;
        try {
            if (b2) {
                this.myBlocksParsingMode = BlockParsingMode.EAGER;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        Label_0088: {
            Label_0060: {
                try {
                    if (this.myBlocksParsingMode == BlockParsingMode.EAGER) {
                        break Label_0060;
                    }
                    final OCParsing ocParsing = this;
                    final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LBRACE;
                    final OCPunctuatorElementType ocPunctuatorElementType2 = OCTokenTypes.RBRACE;
                    final boolean b3 = false;
                    final boolean b4 = ocParsing.a(ocPunctuatorElementType, ocPunctuatorElementType2, b3);
                    if (b4) {
                        break Label_0060;
                    }
                    break Label_0060;
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
                try {
                    final OCParsing ocParsing = this;
                    final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LBRACE;
                    final OCPunctuatorElementType ocPunctuatorElementType2 = OCTokenTypes.RBRACE;
                    final boolean b3 = false;
                    final boolean b4 = ocParsing.a(ocPunctuatorElementType, ocPunctuatorElementType2, b3);
                    if (b4) {
                        a7.collapse((IElementType)OCElementTypes.LAZY_BLOCK_STATEMENT);
                        break Label_0088;
                    }
                }
                catch (IllegalArgumentException ex3) {
                    throw a(ex3);
                }
            }
            a7.rollbackTo();
            this.parseCompoundStatement(b, true);
        }
        this.myBlocksParsingMode = myBlocksParsingMode;
    }
    
    private void H() {
        this.parseCompoundStatement(false, true);
    }
    
    public void parseCompoundStatement(final boolean b, final boolean b2) {
        final PsiBuilder.Marker a7 = this.a7();
        Label_0228: {
            Label_0216: {
                Label_0034: {
                    try {
                        if (this.myBlocksParsingMode == BlockParsingMode.SKIP) {
                            break Label_0216;
                        }
                        final OCParsing ocParsing = this;
                        final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LBRACE;
                        final String s = "{ expected";
                        final boolean b3 = ocParsing.a(ocPunctuatorElementType, s);
                        if (!b3) {
                            break Label_0034;
                        }
                        break Label_0034;
                    }
                    catch (IllegalArgumentException ex) {
                        throw a(ex);
                    }
                    try {
                        final OCParsing ocParsing = this;
                        final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LBRACE;
                        final String s = "{ expected";
                        final boolean b3 = ocParsing.a(ocPunctuatorElementType, s);
                        if (!b3) {
                            this.b(a7, OCElementTypes.EAGER_BLOCK_STATEMENT);
                            return;
                        }
                    }
                    catch (IllegalArgumentException ex2) {
                        throw a(ex2);
                    }
                }
                final OCParsingNameScope myLocalNameScope = this.myLocalNameScope;
                try {
                    if (b2) {
                        this.myLocalNameScope = this.myLocalNameScope.defineLocalScope();
                    }
                }
                catch (IllegalArgumentException ex3) {
                    throw a(ex3);
                }
                try {
                    if (b) {
                        this.myLocalNameScope.defineValue("self", false, this.myBuilder.getCurrentOffset());
                    }
                }
                catch (IllegalArgumentException ex4) {
                    throw a(ex4);
                }
                Label_0213: {
                    Label_0189: {
                        Logger logger = null;
                        boolean b4 = false;
                        Label_0185: {
                            Label_0176: {
                                Label_0142: {
                                    while (true) {
                                        Label_0130: {
                                            try {
                                                if (this.F()) {
                                                    break Label_0142;
                                                }
                                                final OCParsing ocParsing2 = this;
                                                final IElementType elementType = ocParsing2.aF();
                                                final OCPunctuatorElementType ocPunctuatorElementType2 = OCTokenTypes.RBRACE;
                                                if (elementType != ocPunctuatorElementType2) {
                                                    break Label_0130;
                                                }
                                                break Label_0142;
                                            }
                                            catch (IllegalArgumentException ex5) {
                                                throw a(ex5);
                                            }
                                            try {
                                                final OCParsing ocParsing2 = this;
                                                final IElementType elementType = ocParsing2.aF();
                                                final OCPunctuatorElementType ocPunctuatorElementType2 = OCTokenTypes.RBRACE;
                                                if (elementType != ocPunctuatorElementType2) {
                                                    this.m(true);
                                                    continue;
                                                }
                                            }
                                            catch (IllegalArgumentException ex6) {
                                                throw a(ex6);
                                            }
                                        }
                                        break;
                                    }
                                    try {
                                        if (!b2) {
                                            break Label_0189;
                                        }
                                        final OCParsing ocParsing3 = this;
                                        final OCParsing ocParsing4 = this;
                                        final OCParsingNameScope ocParsingNameScope = ocParsing4.myLocalNameScope;
                                        final OCParsingNameScope ocParsingNameScope2 = ocParsingNameScope.dropAndGetParent();
                                        ocParsing3.myLocalNameScope = ocParsingNameScope2;
                                        logger = OCParsing.LOG;
                                        final OCParsing ocParsing5 = this;
                                        final OCParsingNameScope ocParsingNameScope3 = ocParsing5.myLocalNameScope;
                                        final OCParsingNameScope ocParsingNameScope4 = myLocalNameScope;
                                        if (ocParsingNameScope3 == ocParsingNameScope4) {
                                            break Label_0176;
                                        }
                                        break Label_0176;
                                    }
                                    catch (IllegalArgumentException ex7) {
                                        throw a(ex7);
                                    }
                                }
                                try {
                                    final OCParsing ocParsing3 = this;
                                    final OCParsing ocParsing4 = this;
                                    final OCParsingNameScope ocParsingNameScope = ocParsing4.myLocalNameScope;
                                    final OCParsingNameScope ocParsingNameScope2 = ocParsingNameScope.dropAndGetParent();
                                    ocParsing3.myLocalNameScope = ocParsingNameScope2;
                                    logger = OCParsing.LOG;
                                    final OCParsing ocParsing5 = this;
                                    final OCParsingNameScope ocParsingNameScope3 = ocParsing5.myLocalNameScope;
                                    final OCParsingNameScope ocParsingNameScope4 = myLocalNameScope;
                                    if (ocParsingNameScope3 == ocParsingNameScope4) {
                                        b4 = true;
                                        break Label_0185;
                                    }
                                }
                                catch (IllegalArgumentException ex8) {
                                    throw a(ex8);
                                }
                            }
                            b4 = false;
                        }
                        logger.assertTrue(b4);
                        try {
                            if (this.F()) {
                                this.a("Unexpected end of file");
                                break Label_0213;
                            }
                        }
                        catch (IllegalArgumentException ex9) {
                            throw a(ex9);
                        }
                    }
                    this.aY();
                }
                break Label_0228;
            }
            this.a(OCTokenTypes.LBRACE, OCTokenTypes.RBRACE, true);
        }
        this.b(a7, OCElementTypes.EAGER_BLOCK_STATEMENT);
    }
    
    private void ao() {
        this.m(false);
    }
    
    private boolean au() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     4: astore_1       
        //     5: aload_1        
        //     6: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //     9: if_acmpne       22
        //    12: aload_0        
        //    13: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.H:()V
        //    16: iconst_1       
        //    17: ireturn        
        //    18: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    21: athrow         
        //    22: aload_1        
        //    23: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IF_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    26: if_acmpne       39
        //    29: aload_0        
        //    30: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.o:()V
        //    33: iconst_1       
        //    34: ireturn        
        //    35: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    38: athrow         
        //    39: aload_1        
        //    40: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SWITCH_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    43: if_acmpne       56
        //    46: aload_0        
        //    47: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ak:()V
        //    50: iconst_1       
        //    51: ireturn        
        //    52: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    55: athrow         
        //    56: aload_1        
        //    57: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CASE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    60: if_acmpeq       77
        //    63: aload_1        
        //    64: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DEFAULT_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    67: if_acmpne       87
        //    70: goto            77
        //    73: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    76: athrow         
        //    77: aload_0        
        //    78: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.e:()V
        //    81: iconst_1       
        //    82: ireturn        
        //    83: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    86: athrow         
        //    87: aload_1        
        //    88: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.WHILE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    91: if_acmpne       104
        //    94: aload_0        
        //    95: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.j:()V
        //    98: iconst_1       
        //    99: ireturn        
        //   100: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   103: athrow         
        //   104: aload_1        
        //   105: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DO_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   108: if_acmpne       121
        //   111: aload_0        
        //   112: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.x:()V
        //   115: iconst_1       
        //   116: ireturn        
        //   117: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   120: athrow         
        //   121: aload_1        
        //   122: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.FOR_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   125: if_acmpne       138
        //   128: aload_0        
        //   129: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aa:()V
        //   132: iconst_1       
        //   133: ireturn        
        //   134: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   137: athrow         
        //   138: aload_1        
        //   139: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GOTO_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   142: if_acmpne       155
        //   145: aload_0        
        //   146: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.z:()V
        //   149: iconst_1       
        //   150: ireturn        
        //   151: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   154: athrow         
        //   155: aload_1        
        //   156: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CONTINUE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   159: if_acmpne       172
        //   162: aload_0        
        //   163: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.L:()V
        //   166: iconst_1       
        //   167: ireturn        
        //   168: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   171: athrow         
        //   172: aload_1        
        //   173: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.BREAK_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   176: if_acmpne       189
        //   179: aload_0        
        //   180: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.s:()V
        //   183: iconst_1       
        //   184: ireturn        
        //   185: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   188: athrow         
        //   189: aload_1        
        //   190: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RETURN_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   193: if_acmpne       206
        //   196: aload_0        
        //   197: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.h:()V
        //   200: iconst_1       
        //   201: ireturn        
        //   202: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   205: athrow         
        //   206: aload_1        
        //   207: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   210: if_acmpne       223
        //   213: aload_0        
        //   214: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aD:()V
        //   217: iconst_1       
        //   218: ireturn        
        //   219: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   222: athrow         
        //   223: aload_1        
        //   224: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TRY_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   227: if_acmpne       240
        //   230: aload_0        
        //   231: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.t:()V
        //   234: iconst_1       
        //   235: ireturn        
        //   236: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   239: athrow         
        //   240: aload_1        
        //   241: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.THROW_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   244: if_acmpne       274
        //   247: aload_0        
        //   248: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:()Lcom/intellij/psi/tree/IElementType;
        //   251: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   254: if_acmpne       274
        //   257: goto            264
        //   260: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   263: athrow         
        //   264: aload_0        
        //   265: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aV:()V
        //   268: iconst_1       
        //   269: ireturn        
        //   270: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   273: athrow         
        //   274: aload_1        
        //   275: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SYNCHRONIZED_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   278: if_acmpne       291
        //   281: aload_0        
        //   282: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:()V
        //   285: iconst_1       
        //   286: ireturn        
        //   287: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   290: athrow         
        //   291: aload_1        
        //   292: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AUTO_RELEASE_POOL_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   295: if_acmpne       308
        //   298: aload_0        
        //   299: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aB:()V
        //   302: iconst_1       
        //   303: ireturn        
        //   304: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   307: athrow         
        //   308: aload_1        
        //   309: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.__ASM_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   312: if_acmpne       325
        //   315: aload_0        
        //   316: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.am:()V
        //   319: iconst_1       
        //   320: ireturn        
        //   321: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   324: athrow         
        //   325: aload_1        
        //   326: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELSE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   329: if_acmpne       349
        //   332: aload_0        
        //   333: ldc             "else without an if"
        //   335: aload_0        
        //   336: getfield        com/jetbrains/cidr/lang/parser/OCParsing.BLOCK_STATEMENT_PARSER:Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;
        //   339: aconst_null    
        //   340: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;Lcom/intellij/psi/tree/IElementType;)V
        //   343: iconst_1       
        //   344: ireturn        
        //   345: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   348: athrow         
        //   349: aload_0        
        //   350: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   353: ifeq            387
        //   356: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CPP_UNARY_OPERATIONS:Lcom/intellij/psi/tree/TokenSet;
        //   359: aload_0        
        //   360: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   363: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   366: ifeq            387
        //   369: goto            376
        //   372: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   375: athrow         
        //   376: aload_0        
        //   377: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aJ:()Z
        //   380: pop            
        //   381: iconst_1       
        //   382: ireturn        
        //   383: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   386: athrow         
        //   387: aload_0        
        //   388: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   391: ifeq            426
        //   394: aload_0        
        //   395: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   398: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.USING_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   401: if_acmpne       426
        //   404: goto            411
        //   407: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   410: athrow         
        //   411: aload_0        
        //   412: aload_0        
        //   413: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   416: iconst_0       
        //   417: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/lang/PsiBuilder$Marker;Z)V
        //   420: iconst_1       
        //   421: ireturn        
        //   422: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   425: athrow         
        //   426: aload_0        
        //   427: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   430: ifeq            464
        //   433: aload_0        
        //   434: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   437: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NAMESPACE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   440: if_acmpne       464
        //   443: goto            450
        //   446: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   449: athrow         
        //   450: aload_0        
        //   451: aload_0        
        //   452: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   455: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   458: iconst_1       
        //   459: ireturn        
        //   460: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   463: athrow         
        //   464: aload_0        
        //   465: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   468: ifeq            488
        //   471: aload_0        
        //   472: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   475: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STATIC_ASSERT_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   478: if_acmpeq       505
        //   481: goto            488
        //   484: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   487: athrow         
        //   488: aload_0        
        //   489: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   492: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STATIC_ASSERT_C_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   495: if_acmpne       519
        //   498: goto            505
        //   501: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   504: athrow         
        //   505: aload_0        
        //   506: aload_0        
        //   507: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   510: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.f:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   513: iconst_1       
        //   514: ireturn        
        //   515: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   518: athrow         
        //   519: iconst_0       
        //   520: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      18     18     22     Ljava/lang/IllegalArgumentException;
        //  22     35     35     39     Ljava/lang/IllegalArgumentException;
        //  39     52     52     56     Ljava/lang/IllegalArgumentException;
        //  56     70     73     77     Ljava/lang/IllegalArgumentException;
        //  63     83     83     87     Ljava/lang/IllegalArgumentException;
        //  87     100    100    104    Ljava/lang/IllegalArgumentException;
        //  104    117    117    121    Ljava/lang/IllegalArgumentException;
        //  121    134    134    138    Ljava/lang/IllegalArgumentException;
        //  138    151    151    155    Ljava/lang/IllegalArgumentException;
        //  155    168    168    172    Ljava/lang/IllegalArgumentException;
        //  172    185    185    189    Ljava/lang/IllegalArgumentException;
        //  189    202    202    206    Ljava/lang/IllegalArgumentException;
        //  206    219    219    223    Ljava/lang/IllegalArgumentException;
        //  223    236    236    240    Ljava/lang/IllegalArgumentException;
        //  240    257    260    264    Ljava/lang/IllegalArgumentException;
        //  247    270    270    274    Ljava/lang/IllegalArgumentException;
        //  274    287    287    291    Ljava/lang/IllegalArgumentException;
        //  291    304    304    308    Ljava/lang/IllegalArgumentException;
        //  308    321    321    325    Ljava/lang/IllegalArgumentException;
        //  325    345    345    349    Ljava/lang/IllegalArgumentException;
        //  349    369    372    376    Ljava/lang/IllegalArgumentException;
        //  356    383    383    387    Ljava/lang/IllegalArgumentException;
        //  387    404    407    411    Ljava/lang/IllegalArgumentException;
        //  394    422    422    426    Ljava/lang/IllegalArgumentException;
        //  426    443    446    450    Ljava/lang/IllegalArgumentException;
        //  433    460    460    464    Ljava/lang/IllegalArgumentException;
        //  464    481    484    488    Ljava/lang/IllegalArgumentException;
        //  471    498    501    505    Ljava/lang/IllegalArgumentException;
        //  488    515    515    519    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0488:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void m(final boolean b) {
        Label_0018: {
            try {
                if (this.az()) {
                    return;
                }
                final boolean b2 = b;
                if (b2) {
                    break Label_0018;
                }
                break Label_0018;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final boolean b2 = b;
                if (b2) {
                    this.a("Syntax error", this.BLOCK_STATEMENT_PARSER, null);
                    return;
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        this.a("Expecting a statement");
    }
    
    private boolean az() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.v:()Z
        //     4: pop            
        //     5: aload_0        
        //     6: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.au:()Z
        //     9: ifeq            18
        //    12: iconst_1       
        //    13: ireturn        
        //    14: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    17: athrow         
        //    18: aload_0        
        //    19: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    22: astore_1       
        //    23: aload_0        
        //    24: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //    27: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //    32: istore_2       
        //    33: aload_0        
        //    34: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    37: astore_3       
        //    38: iconst_0       
        //    39: istore          4
        //    41: aload_0        
        //    42: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    45: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    48: if_acmpeq       68
        //    51: aload_0        
        //    52: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    55: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    58: if_acmpne       270
        //    61: goto            68
        //    64: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    67: athrow         
        //    68: aload_0        
        //    69: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    72: astore          5
        //    74: aload_0        
        //    75: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.N:()Ljava/util/List;
        //    78: pop            
        //    79: aload_0        
        //    80: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    83: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    86: if_acmpne       223
        //    89: aload_0        
        //    90: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    93: aload_0        
        //    94: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    97: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.MUL:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   100: if_acmpeq       144
        //   103: goto            110
        //   106: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   109: athrow         
        //   110: aload_0        
        //   111: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   114: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   117: if_acmpeq       144
        //   120: goto            127
        //   123: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   126: athrow         
        //   127: aload_0        
        //   128: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   131: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ANDAND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   134: if_acmpne       155
        //   137: goto            144
        //   140: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   143: athrow         
        //   144: aload_0        
        //   145: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   148: goto            155
        //   151: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   154: athrow         
        //   155: aload_0        
        //   156: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   159: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   162: if_acmpne       252
        //   165: aload_0        
        //   166: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   169: aload_0        
        //   170: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   173: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   176: if_acmpne       208
        //   179: goto            186
        //   182: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   185: athrow         
        //   186: aload_0        
        //   187: aload           5
        //   189: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   192: aconst_null    
        //   193: astore          5
        //   195: aload_0        
        //   196: iconst_0       
        //   197: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Z)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   200: invokestatic    com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.isValue:(Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;)Z
        //   203: istore          4
        //   205: goto            252
        //   208: aload_0        
        //   209: aload           5
        //   211: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   214: aconst_null    
        //   215: astore          5
        //   217: iconst_1       
        //   218: istore          4
        //   220: goto            252
        //   223: aload_0        
        //   224: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   227: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   230: if_acmpne       252
        //   233: aload_0        
        //   234: aload           5
        //   236: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   239: aconst_null    
        //   240: astore          5
        //   242: aload_0        
        //   243: iconst_0       
        //   244: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Z)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   247: invokestatic    com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.isValue:(Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;)Z
        //   250: istore          4
        //   252: aload           5
        //   254: ifnull          270
        //   257: aload_0        
        //   258: aload           5
        //   260: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   263: goto            270
        //   266: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   269: athrow         
        //   270: iconst_0       
        //   271: istore          5
        //   273: iload           4
        //   275: ifne            541
        //   278: aload_0        
        //   279: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideMacro:Z
        //   282: ifne            541
        //   285: goto            292
        //   288: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   291: athrow         
        //   292: aload_0        
        //   293: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   296: astore          6
        //   298: aload_0        
        //   299: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   302: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //   307: istore          7
        //   309: iconst_1       
        //   310: istore          5
        //   312: aload_0        
        //   313: iconst_1       
        //   314: iconst_1       
        //   315: iconst_0       
        //   316: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(ZZZ)Z
        //   319: ifeq            351
        //   322: aload_0        
        //   323: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   326: checkcast       Lcom/intellij/lang/impl/PsiBuilderImpl;
        //   329: aload           6
        //   331: invokevirtual   com/intellij/lang/impl/PsiBuilderImpl.hasErrorsAfter:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //   334: ifne            351
        //   337: goto            344
        //   340: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   343: athrow         
        //   344: goto            534
        //   347: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   350: athrow         
        //   351: aload_0        
        //   352: aload           6
        //   354: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   357: aload_0        
        //   358: iload           7
        //   360: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(I)V
        //   363: aload_0        
        //   364: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   367: astore          6
        //   369: aload_0        
        //   370: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.au:()Z
        //   373: ifeq            405
        //   376: aload_0        
        //   377: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   380: checkcast       Lcom/intellij/lang/impl/PsiBuilderImpl;
        //   383: aload           6
        //   385: invokevirtual   com/intellij/lang/impl/PsiBuilderImpl.hasErrorsAfter:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //   388: ifne            405
        //   391: goto            398
        //   394: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   397: athrow         
        //   398: goto            534
        //   401: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   404: athrow         
        //   405: aload_0        
        //   406: aload           6
        //   408: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   411: aload_0        
        //   412: iload           7
        //   414: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(I)V
        //   417: aload_0        
        //   418: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   421: astore          6
        //   423: aload_0        
        //   424: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.G:()Z
        //   427: ifeq            459
        //   430: aload_0        
        //   431: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   434: checkcast       Lcom/intellij/lang/impl/PsiBuilderImpl;
        //   437: aload           6
        //   439: invokevirtual   com/intellij/lang/impl/PsiBuilderImpl.hasErrorsAfter:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //   442: ifne            459
        //   445: goto            452
        //   448: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   451: athrow         
        //   452: goto            534
        //   455: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   458: athrow         
        //   459: aload_0        
        //   460: aload           6
        //   462: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   465: aload_0        
        //   466: iload           7
        //   468: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(I)V
        //   471: aload_0        
        //   472: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   475: astore          6
        //   477: aload_0        
        //   478: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aJ:()Z
        //   481: ifeq            513
        //   484: aload_0        
        //   485: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   488: checkcast       Lcom/intellij/lang/impl/PsiBuilderImpl;
        //   491: aload           6
        //   493: invokevirtual   com/intellij/lang/impl/PsiBuilderImpl.hasErrorsAfter:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //   496: ifne            513
        //   499: goto            506
        //   502: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   505: athrow         
        //   506: goto            534
        //   509: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   512: athrow         
        //   513: aload_0        
        //   514: aload           6
        //   516: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   519: aload_0        
        //   520: iload           7
        //   522: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(I)V
        //   525: aload_0        
        //   526: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   529: astore          6
        //   531: iconst_0       
        //   532: istore          5
        //   534: aload           6
        //   536: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   541: iload           5
        //   543: ifne            708
        //   546: iload           4
        //   548: ifne            582
        //   551: goto            558
        //   554: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   557: athrow         
        //   558: aload_0        
        //   559: iconst_1       
        //   560: iconst_0       
        //   561: iconst_0       
        //   562: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(ZZZ)Z
        //   565: ifeq            582
        //   568: goto            575
        //   571: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   574: athrow         
        //   575: goto            708
        //   578: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   581: athrow         
        //   582: aload_0        
        //   583: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.au:()Z
        //   586: ifeq            596
        //   589: goto            708
        //   592: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   595: athrow         
        //   596: aload_0        
        //   597: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.G:()Z
        //   600: ifeq            610
        //   603: goto            708
        //   606: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   609: athrow         
        //   610: aload_0        
        //   611: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aJ:()Z
        //   614: ifeq            624
        //   617: goto            708
        //   620: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   623: athrow         
        //   624: aload_0        
        //   625: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   628: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //   633: istore          6
        //   635: aload_0        
        //   636: aload_1        
        //   637: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   640: iload_2        
        //   641: iload           6
        //   643: if_icmpeq       660
        //   646: aload_0        
        //   647: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aJ:()Z
        //   650: ifne            706
        //   653: goto            660
        //   656: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   659: athrow         
        //   660: aload_0        
        //   661: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   664: astore          7
        //   666: aload_0        
        //   667: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   670: iconst_1       
        //   671: iconst_0       
        //   672: iconst_0       
        //   673: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZ)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   676: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.FAIL:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   679: if_acmpeq       698
        //   682: aload_0        
        //   683: aload           7
        //   685: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DECLARATION_STATEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   688: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   691: goto            706
        //   694: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   697: athrow         
        //   698: aload_0        
        //   699: aload           7
        //   701: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   704: iconst_0       
        //   705: ireturn        
        //   706: iconst_1       
        //   707: ireturn        
        //   708: aload_1        
        //   709: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   714: iconst_1       
        //   715: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      14     14     18     Ljava/lang/IllegalArgumentException;
        //  41     61     64     68     Ljava/lang/IllegalArgumentException;
        //  74     103    106    110    Ljava/lang/IllegalArgumentException;
        //  89     120    123    127    Ljava/lang/IllegalArgumentException;
        //  110    137    140    144    Ljava/lang/IllegalArgumentException;
        //  127    148    151    155    Ljava/lang/IllegalArgumentException;
        //  155    179    182    186    Ljava/lang/IllegalArgumentException;
        //  252    263    266    270    Ljava/lang/IllegalArgumentException;
        //  273    285    288    292    Ljava/lang/IllegalArgumentException;
        //  312    337    340    344    Ljava/lang/IllegalArgumentException;
        //  322    347    347    351    Ljava/lang/IllegalArgumentException;
        //  369    391    394    398    Ljava/lang/IllegalArgumentException;
        //  376    401    401    405    Ljava/lang/IllegalArgumentException;
        //  423    445    448    452    Ljava/lang/IllegalArgumentException;
        //  430    455    455    459    Ljava/lang/IllegalArgumentException;
        //  477    499    502    506    Ljava/lang/IllegalArgumentException;
        //  484    509    509    513    Ljava/lang/IllegalArgumentException;
        //  541    551    554    558    Ljava/lang/IllegalArgumentException;
        //  546    568    571    575    Ljava/lang/IllegalArgumentException;
        //  558    578    578    582    Ljava/lang/IllegalArgumentException;
        //  582    592    592    596    Ljava/lang/IllegalArgumentException;
        //  596    606    606    610    Ljava/lang/IllegalArgumentException;
        //  610    620    620    624    Ljava/lang/IllegalArgumentException;
        //  635    653    656    660    Ljava/lang/IllegalArgumentException;
        //  666    694    694    698    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0110:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void a(final String s, @Nullable final BlockParser blockParser, @Nullable final IElementType elementType) {
        Label_0021: {
            try {
                if (this.aF() != OCTokenTypes.LBRACE) {
                    break Label_0021;
                }
                final BlockParser blockParser2 = blockParser;
                if (blockParser2 != null) {
                    break Label_0021;
                }
                break Label_0021;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final BlockParser blockParser2 = blockParser;
                if (blockParser2 != null) {
                    this.b(s, blockParser, elementType);
                    return;
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        try {
            this.aY();
            if (this.myDisableErrors) {
                a7.drop();
                return;
            }
        }
        catch (IllegalArgumentException ex3) {
            throw a(ex3);
        }
        a7.error(s);
    }
    
    private void a(final String p0, @Nullable final BlockParser p1, @Nullable final IElementType p2, @NotNull final IElementType p3) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload           4
        //     2: ifnonnull       45
        //     5: new             Ljava/lang/IllegalArgumentException;
        //     8: dup            
        //     9: ldc             "Argument for @NotNull parameter '%s' of %s.%s must not be null"
        //    11: ldc             3
        //    13: anewarray       Ljava/lang/Object;
        //    16: dup            
        //    17: ldc             0
        //    19: ldc             "untilType"
        //    21: aastore        
        //    22: dup            
        //    23: ldc             1
        //    25: ldc             "com/jetbrains/cidr/lang/parser/OCParsing"
        //    27: aastore        
        //    28: dup            
        //    29: ldc             2
        //    31: ldc             "errorAndSkipTokenUntil"
        //    33: aastore        
        //    34: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //    37: invokespecial   java/lang/IllegalArgumentException.<init>:(Ljava/lang/String;)V
        //    40: athrow         
        //    41: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    44: athrow         
        //    45: aload_0        
        //    46: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    49: astore          5
        //    51: aload_0        
        //    52: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    55: ifnull          123
        //    58: aload_0        
        //    59: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    62: aload           4
        //    64: if_acmpeq       123
        //    67: goto            74
        //    70: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    73: athrow         
        //    74: aload_0        
        //    75: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    78: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    81: if_acmpne       116
        //    84: goto            91
        //    87: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    90: athrow         
        //    91: aload_2        
        //    92: ifnull          116
        //    95: goto            102
        //    98: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   101: athrow         
        //   102: aload_0        
        //   103: aload_1        
        //   104: aload_2        
        //   105: aload_3        
        //   106: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Ljava/lang/String;Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;Lcom/intellij/psi/tree/IElementType;)V
        //   109: goto            51
        //   112: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   115: athrow         
        //   116: aload_0        
        //   117: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   120: goto            51
        //   123: aload_0        
        //   124: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myDisableErrors:Z
        //   127: ifeq            144
        //   130: aload           5
        //   132: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   137: goto            152
        //   140: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   143: athrow         
        //   144: aload           5
        //   146: aload_1        
        //   147: invokeinterface com/intellij/lang/PsiBuilder$Marker.error:(Ljava/lang/String;)V
        //   152: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      41     41     45     Ljava/lang/IllegalArgumentException;
        //  51     67     70     74     Ljava/lang/IllegalArgumentException;
        //  58     84     87     91     Ljava/lang/IllegalArgumentException;
        //  74     95     98     102    Ljava/lang/IllegalArgumentException;
        //  91     112    112    116    Ljava/lang/IllegalArgumentException;
        //  123    140    140    144    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0074:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void b(final String s, @NotNull final BlockParser blockParser, @Nullable final IElementType elementType) {
        try {
            if (blockParser == null) {
                throw new IllegalArgumentException(String.format("Argument for @NotNull parameter '%s' of %s.%s must not be null", "blockParser", "com/jetbrains/cidr/lang/parser/OCParsing", "skipBlock"));
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        PsiBuilder.Marker a7 = null;
        if (elementType != null) {
            a7 = this.a7();
        }
        try {
            if (!this.myDisableErrors) {
                this.myBuilder.error(s);
            }
        }
        catch (IllegalArgumentException ex2) {
            throw a(ex2);
        }
        try {
            blockParser.parseBlock();
            if (a7 != null) {
                this.b(a7, elementType);
            }
        }
        catch (IllegalArgumentException ex3) {
            throw a(ex3);
        }
    }
    
    private void a() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.SYNCHRONIZED_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.SYNCHRONIZED_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        try {
            this.aY();
            if (!this.a(OCTokenTypes.LPAR, "Expecting '('")) {
                return;
            }
            this.n(false);
            this.a(OCTokenTypes.RPAR, "Expecting ')'");
            this.H();
        }
        finally {
            this.b(a7, OCElementTypes.SYNCHRONIZED_STATEMENT);
        }
    }
    
    private void aB() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.AUTO_RELEASE_POOL_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.AUTO_RELEASE_POOL_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        try {
            this.aY();
            this.H();
        }
        finally {
            this.b(a7, OCElementTypes.AUTO_RELEASE_POOL_STATEMENT);
        }
    }
    
    private void am() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.$assertionsDisabled:Z
        //     3: ifne            35
        //     6: aload_0        
        //     7: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    10: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.__ASM_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    13: if_acmpeq       35
        //    16: goto            23
        //    19: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    22: athrow         
        //    23: new             Ljava/lang/AssertionError;
        //    26: dup            
        //    27: invokespecial   java/lang/AssertionError.<init>:()V
        //    30: athrow         
        //    31: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    34: athrow         
        //    35: aload_0        
        //    36: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    39: astore_1       
        //    40: aload_0        
        //    41: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    44: aload_0        
        //    45: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    48: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.VOLATILE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    51: if_acmpeq       105
        //    54: aload_0        
        //    55: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    58: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CONST_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    61: if_acmpeq       105
        //    64: goto            71
        //    67: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    70: athrow         
        //    71: aload_0        
        //    72: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    75: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RESTRICT_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    78: if_acmpeq       105
        //    81: goto            88
        //    84: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    87: athrow         
        //    88: aload_0        
        //    89: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    92: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ATOMIC_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    95: if_acmpne       116
        //    98: goto            105
        //   101: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   104: athrow         
        //   105: aload_0        
        //   106: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   109: goto            44
        //   112: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   115: athrow         
        //   116: aload_0        
        //   117: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   120: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   123: if_acmpne       214
        //   126: aload_0        
        //   127: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   130: iconst_1       
        //   131: istore_2       
        //   132: iload_2        
        //   133: ifle            211
        //   136: aload_0        
        //   137: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   140: astore_3       
        //   141: aload_3        
        //   142: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   145: if_acmpne       159
        //   148: aload_0        
        //   149: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.at:()V
        //   152: goto            204
        //   155: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   158: athrow         
        //   159: aload_3        
        //   160: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   163: if_acmpne       176
        //   166: iinc            2, 1
        //   169: goto            204
        //   172: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   175: athrow         
        //   176: aload_3        
        //   177: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   180: if_acmpne       193
        //   183: iinc            2, -1
        //   186: goto            204
        //   189: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   192: athrow         
        //   193: aload_3        
        //   194: ifnonnull       204
        //   197: goto            211
        //   200: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   203: athrow         
        //   204: aload_0        
        //   205: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   208: goto            132
        //   211: goto            314
        //   214: aload_0        
        //   215: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   218: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   221: if_acmpne       310
        //   224: aload_0        
        //   225: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   228: ldc             "Expecting '('"
        //   230: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   233: pop            
        //   234: aload_0        
        //   235: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.E:()V
        //   238: aload_0        
        //   239: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   242: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   245: if_acmpeq       272
        //   248: goto            255
        //   251: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   254: athrow         
        //   255: aload_0        
        //   256: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   259: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   262: if_acmpne       287
        //   265: goto            272
        //   268: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   271: athrow         
        //   272: aload_0        
        //   273: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   276: aload_0        
        //   277: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.W:()V
        //   280: goto            287
        //   283: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   286: athrow         
        //   287: aload_0        
        //   288: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   291: ldc             "Expecting ')'"
        //   293: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   296: pop            
        //   297: aload_0        
        //   298: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   301: ldc             "Missing ';'"
        //   303: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   306: pop            
        //   307: goto            314
        //   310: aload_0        
        //   311: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.at:()V
        //   314: aload_0        
        //   315: aload_1        
        //   316: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.ASM_STATEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   319: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   322: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      16     19     23     Ljava/lang/IllegalArgumentException;
        //  6      31     31     35     Ljava/lang/IllegalArgumentException;
        //  44     64     67     71     Ljava/lang/IllegalArgumentException;
        //  54     81     84     88     Ljava/lang/IllegalArgumentException;
        //  71     98     101    105    Ljava/lang/IllegalArgumentException;
        //  88     112    112    116    Ljava/lang/IllegalArgumentException;
        //  141    155    155    159    Ljava/lang/IllegalArgumentException;
        //  159    172    172    176    Ljava/lang/IllegalArgumentException;
        //  176    189    189    193    Ljava/lang/IllegalArgumentException;
        //  193    200    200    204    Ljava/lang/IllegalArgumentException;
        //  214    248    251    255    Ljava/lang/IllegalArgumentException;
        //  224    265    268    272    Ljava/lang/IllegalArgumentException;
        //  255    280    283    287    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0071:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void at() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //     4: invokeinterface com/intellij/lang/PsiBuilder.getOriginalText:()Ljava/lang/CharSequence;
        //     9: astore_1       
        //    10: aload_0        
        //    11: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //    14: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //    19: istore_2       
        //    20: iload_2        
        //    21: aload_1        
        //    22: invokeinterface java/lang/CharSequence.length:()I
        //    27: if_icmpge       83
        //    30: aload_1        
        //    31: iload_2        
        //    32: invokeinterface java/lang/CharSequence.charAt:(I)C
        //    37: istore_3       
        //    38: iload_3        
        //    39: bipush          10
        //    41: if_icmpeq       83
        //    44: iload_3        
        //    45: bipush          123
        //    47: if_icmpeq       83
        //    50: goto            57
        //    53: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    56: athrow         
        //    57: iload_3        
        //    58: bipush          125
        //    60: if_icmpne       77
        //    63: goto            70
        //    66: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    69: athrow         
        //    70: goto            83
        //    73: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    76: athrow         
        //    77: iinc            2, 1
        //    80: goto            20
        //    83: aload_0        
        //    84: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    87: ifnull          121
        //    90: aload_0        
        //    91: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //    94: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //    99: iload_2        
        //   100: if_icmpge       121
        //   103: goto            110
        //   106: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   109: athrow         
        //   110: aload_0        
        //   111: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   114: goto            83
        //   117: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   120: athrow         
        //   121: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  38     50     53     57     Ljava/lang/IllegalArgumentException;
        //  44     63     66     70     Ljava/lang/IllegalArgumentException;
        //  57     73     73     77     Ljava/lang/IllegalArgumentException;
        //  83     103    106    110    Ljava/lang/IllegalArgumentException;
        //  90     117    117    121    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0057:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void W() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.F:()Z
        //     4: ifne            193
        //     7: aload_0        
        //     8: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    11: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    14: if_acmpeq       193
        //    17: goto            24
        //    20: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    23: athrow         
        //    24: iconst_1       
        //    25: istore_1       
        //    26: aload_0        
        //    27: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    30: astore_2       
        //    31: aload_0        
        //    32: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.F:()Z
        //    35: ifne            147
        //    38: aload_0        
        //    39: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    42: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    45: if_acmpeq       147
        //    48: goto            55
        //    51: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    54: athrow         
        //    55: iload_1        
        //    56: ifne            83
        //    59: goto            66
        //    62: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    65: athrow         
        //    66: aload_0        
        //    67: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    70: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    73: if_acmpne       147
        //    76: goto            83
        //    79: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    82: athrow         
        //    83: iload_1        
        //    84: ifne            111
        //    87: goto            94
        //    90: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    93: athrow         
        //    94: aload_0        
        //    95: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    98: ldc             "Expecting ','"
        //   100: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   103: pop            
        //   104: goto            111
        //   107: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   110: athrow         
        //   111: aload_0        
        //   112: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STRING_LITERAL:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   115: ldc             "Expecting an operand-constraint string"
        //   117: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   120: pop            
        //   121: aload_0        
        //   122: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   125: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   128: if_acmpne       142
        //   131: aload_0        
        //   132: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.an:()V
        //   135: goto            142
        //   138: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   141: athrow         
        //   142: iconst_0       
        //   143: istore_1       
        //   144: goto            31
        //   147: aload_0        
        //   148: aload_2        
        //   149: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.ASM_STATEMENT_PART:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   152: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   155: aload_0        
        //   156: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   159: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   162: if_acmpeq       182
        //   165: aload_0        
        //   166: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   169: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   172: if_acmpne       193
        //   175: goto            182
        //   178: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   181: athrow         
        //   182: aload_0        
        //   183: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   186: goto            0
        //   189: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   192: athrow         
        //   193: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      17     20     24     Ljava/lang/IllegalArgumentException;
        //  31     48     51     55     Ljava/lang/IllegalArgumentException;
        //  38     59     62     66     Ljava/lang/IllegalArgumentException;
        //  55     76     79     83     Ljava/lang/IllegalArgumentException;
        //  66     87     90     94     Ljava/lang/IllegalArgumentException;
        //  83     104    107    111    Ljava/lang/IllegalArgumentException;
        //  111    135    138    142    Ljava/lang/IllegalArgumentException;
        //  147    175    178    182    Ljava/lang/IllegalArgumentException;
        //  165    189    189    193    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0055:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void aV() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.$assertionsDisabled:Z
        //     3: ifne            52
        //     6: aload_0        
        //     7: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    10: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.THROW_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    13: if_acmpeq       52
        //    16: goto            23
        //    19: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    22: athrow         
        //    23: aload_0        
        //    24: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    27: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.THROW_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    30: if_acmpeq       52
        //    33: goto            40
        //    36: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    39: athrow         
        //    40: new             Ljava/lang/AssertionError;
        //    43: dup            
        //    44: invokespecial   java/lang/AssertionError.<init>:()V
        //    47: athrow         
        //    48: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    51: athrow         
        //    52: aload_0        
        //    53: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    56: astore_1       
        //    57: aload_0        
        //    58: aload_0        
        //    59: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    62: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.h:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //    65: pop            
        //    66: aload_0        
        //    67: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    70: ldc             "Missing ';'"
        //    72: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //    75: pop            
        //    76: aload_0        
        //    77: aload_1        
        //    78: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.EXPRESSION_STATEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    81: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //    84: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      16     19     23     Ljava/lang/IllegalArgumentException;
        //  6      33     36     40     Ljava/lang/IllegalArgumentException;
        //  23     48     48     52     Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0023:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void t() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.TRY_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.TRY_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        this.aY();
        this.H();
        try {
            while (this.aF() == OCTokenTypes.CATCH_KEYWORD) {
                this.aM();
            }
        }
        catch (IllegalArgumentException ex3) {
            throw a(ex3);
        }
        if (this.aF() == OCTokenTypes.FINALLY_KEYWORD) {
            final PsiBuilder.Marker a8 = this.a7();
            this.aY();
            this.H();
            this.b(a8, OCElementTypes.FINALLY_SECTION);
        }
        this.b(a7, OCElementTypes.TRY_STATEMENT);
    }
    
    private void aM() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.CATCH_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.CATCH_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        Label_0071: {
            try {
                this.aY();
                if (this.aF() == OCTokenTypes.LPAR) {
                    this.af();
                    break Label_0071;
                }
            }
            catch (IllegalArgumentException ex3) {
                throw a(ex3);
            }
            this.a("Expecting catch section parameter");
        }
        this.H();
        this.b(a7, OCElementTypes.CATCH_SECTION);
    }
    
    private boolean G() {
        final PsiBuilder.Marker a7 = this.a7();
        try {
            this.aG();
            if (this.aF() != OCTokenTypes.IDENTIFIER) {
                this.i(a7);
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        try {
            this.aY();
            if (this.aF() != OCTokenTypes.COLON) {
                this.i(a7);
                return false;
            }
        }
        catch (IllegalArgumentException ex2) {
            throw a(ex2);
        }
        try {
            this.aY();
            if (!this.G()) {
                this.ao();
            }
        }
        catch (IllegalArgumentException ex3) {
            throw a(ex3);
        }
        this.b(a7, OCElementTypes.LABELED_STATEMENT);
        return true;
    }
    
    private void e() {
        boolean b = false;
        Label_0019: {
            try {
                if (this.aF() == OCTokenTypes.DEFAULT_KEYWORD) {
                    b = true;
                    break Label_0019;
                }
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            b = false;
        }
        final boolean b2 = b;
        final PsiBuilder.Marker a7 = this.a7();
        Label_0054: {
            try {
                this.aY();
                if (b2) {
                    break Label_0054;
                }
                final OCParsing ocParsing = this;
                ocParsing.E();
                final OCParsing ocParsing2 = this;
                final IElementType elementType = ocParsing2.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.ELLIPSIS;
                if (elementType == ocPunctuatorElementType) {
                    break Label_0054;
                }
                break Label_0054;
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
            try {
                final OCParsing ocParsing = this;
                ocParsing.E();
                final OCParsing ocParsing2 = this;
                final IElementType elementType = ocParsing2.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.ELLIPSIS;
                if (elementType == ocPunctuatorElementType) {
                    this.aY();
                    this.E();
                }
            }
            catch (IllegalArgumentException ex3) {
                throw a(ex3);
            }
        }
        this.a(OCTokenTypes.COLON, "Expecting ':'");
        this.ao();
        this.b(a7, OCElementTypes.CASE_STATEMENT);
    }
    
    private boolean P() {
        return this.a(false, false, false);
    }
    
    private boolean a(final boolean p0, final boolean p1, final boolean p2) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore          4
        //     6: aload_0        
        //     7: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //    10: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //    15: istore          5
        //    17: aload_0        
        //    18: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideDetectionMode:Z
        //    21: istore          6
        //    23: aload_0        
        //    24: iconst_1       
        //    25: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideDetectionMode:Z
        //    28: aload_0        
        //    29: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CODE_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //    32: iload_1        
        //    33: iload_2        
        //    34: iload_3        
        //    35: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZ)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //    38: astore          7
        //    40: aload_0        
        //    41: iload           6
        //    43: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideDetectionMode:Z
        //    46: aload_0        
        //    47: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //    50: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //    55: istore          8
        //    57: aload           7
        //    59: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //    62: if_acmpeq       512
        //    65: iconst_m1      
        //    66: istore          9
        //    68: iconst_0       
        //    69: istore          10
        //    71: aload_0        
        //    72: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //    75: invokeinterface com/intellij/lang/PsiBuilder.getOriginalText:()Ljava/lang/CharSequence;
        //    80: iload           5
        //    82: iload           8
        //    84: invokeinterface java/lang/CharSequence.subSequence:(II)Ljava/lang/CharSequence;
        //    89: astore          11
        //    91: aload           11
        //    93: invokeinterface java/lang/CharSequence.length:()I
        //    98: iconst_1       
        //    99: isub           
        //   100: istore          12
        //   102: iload           12
        //   104: iflt            184
        //   107: aload           11
        //   109: iload           12
        //   111: invokeinterface java/lang/CharSequence.charAt:(I)C
        //   116: istore          13
        //   118: iload           13
        //   120: bipush          123
        //   122: if_icmpne       135
        //   125: iinc            10, 1
        //   128: goto            178
        //   131: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   134: athrow         
        //   135: iload           13
        //   137: bipush          125
        //   139: if_icmpne       152
        //   142: iinc            10, -1
        //   145: goto            178
        //   148: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   151: athrow         
        //   152: iload           13
        //   154: bipush          10
        //   156: if_icmpne       178
        //   159: iload           10
        //   161: ifne            178
        //   164: goto            171
        //   167: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   170: athrow         
        //   171: iload           12
        //   173: istore          9
        //   175: goto            184
        //   178: iinc            12, -1
        //   181: goto            102
        //   184: iload           9
        //   186: iconst_m1      
        //   187: if_icmpeq       390
        //   190: aload_0        
        //   191: aload           4
        //   193: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   196: aload_0        
        //   197: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   200: astore          12
        //   202: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.CPP_SPECIFIERS_FIRST:Lcom/intellij/psi/tree/TokenSet;
        //   205: aload           12
        //   207: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   210: ifeq            228
        //   213: aload           12
        //   215: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   218: if_acmpne       242
        //   221: goto            228
        //   224: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   227: athrow         
        //   228: aload_0        
        //   229: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aK:()Z
        //   232: ifeq            250
        //   235: goto            242
        //   238: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   241: athrow         
        //   242: iconst_1       
        //   243: goto            251
        //   246: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   249: athrow         
        //   250: iconst_0       
        //   251: istore          13
        //   253: iload           13
        //   255: ifne            290
        //   258: aload_0        
        //   259: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.G:()Z
        //   262: ifne            388
        //   265: goto            272
        //   268: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   271: athrow         
        //   272: aload_0        
        //   273: iconst_1       
        //   274: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.c:(Z)Lcom/jetbrains/cidr/lang/parser/OCParsing$StatementParsingResult;
        //   277: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$StatementParsingResult.PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$StatementParsingResult;
        //   280: if_acmpeq       388
        //   283: goto            290
        //   286: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   289: athrow         
        //   290: aload_0        
        //   291: iload           5
        //   293: iload           9
        //   295: iadd           
        //   296: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myParseUntilOffset:I
        //   299: aload_0        
        //   300: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   303: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //   308: istore          14
        //   310: aload_0        
        //   311: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   314: astore          15
        //   316: aload_0        
        //   317: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CODE_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   320: iload_1        
        //   321: iconst_0       
        //   322: iload_3        
        //   323: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZ)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   326: pop            
        //   327: aload_0        
        //   328: aload           15
        //   330: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DECLARATION_STATEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   333: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   336: aload_0        
        //   337: iconst_0       
        //   338: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myParseUntilOffset:I
        //   341: iload           14
        //   343: aload_0        
        //   344: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   347: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //   352: if_icmpeq       386
        //   355: aload_0        
        //   356: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   359: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   362: if_acmpne       378
        //   365: goto            372
        //   368: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   371: athrow         
        //   372: iconst_1       
        //   373: ireturn        
        //   374: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   377: athrow         
        //   378: aload_0        
        //   379: iload_1        
        //   380: iconst_0       
        //   381: iload_3        
        //   382: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(ZZZ)Z
        //   385: ireturn        
        //   386: iconst_0       
        //   387: ireturn        
        //   388: iconst_1       
        //   389: ireturn        
        //   390: aload_0        
        //   391: aload           4
        //   393: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   396: aload           7
        //   398: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.PARSED_WITHOUT_SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   401: if_acmpne       510
        //   404: aload_0        
        //   405: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   408: astore          12
        //   410: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.CPP_SPECIFIERS_FIRST:Lcom/intellij/psi/tree/TokenSet;
        //   413: aload           12
        //   415: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   418: ifeq            436
        //   421: aload           12
        //   423: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   426: if_acmpne       450
        //   429: goto            436
        //   432: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   435: athrow         
        //   436: aload_0        
        //   437: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aK:()Z
        //   440: ifeq            458
        //   443: goto            450
        //   446: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   449: athrow         
        //   450: iconst_1       
        //   451: goto            459
        //   454: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   457: athrow         
        //   458: iconst_0       
        //   459: istore          13
        //   461: iload           13
        //   463: ifeq            508
        //   466: iload           5
        //   468: iload           8
        //   470: if_icmpeq       508
        //   473: goto            480
        //   476: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   479: athrow         
        //   480: aload_0        
        //   481: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   484: astore          14
        //   486: aload_0        
        //   487: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CODE_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   490: iload_1        
        //   491: iconst_0       
        //   492: iload_3        
        //   493: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZ)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   496: pop            
        //   497: aload_0        
        //   498: aload           14
        //   500: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DECLARATION_STATEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   503: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   506: iconst_1       
        //   507: ireturn        
        //   508: iconst_0       
        //   509: ireturn        
        //   510: iconst_0       
        //   511: ireturn        
        //   512: aload_0        
        //   513: aload           4
        //   515: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   518: aload_0        
        //   519: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   522: astore          4
        //   524: aload_0        
        //   525: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CODE_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   528: iload_1        
        //   529: iconst_0       
        //   530: iload_3        
        //   531: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZ)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //   534: pop            
        //   535: aload_0        
        //   536: aload           4
        //   538: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DECLARATION_STATEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   541: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   544: iconst_1       
        //   545: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  118    131    131    135    Ljava/lang/IllegalArgumentException;
        //  135    148    148    152    Ljava/lang/IllegalArgumentException;
        //  152    164    167    171    Ljava/lang/IllegalArgumentException;
        //  202    221    224    228    Ljava/lang/IllegalArgumentException;
        //  213    235    238    242    Ljava/lang/IllegalArgumentException;
        //  228    246    246    250    Ljava/lang/IllegalArgumentException;
        //  253    265    268    272    Ljava/lang/IllegalArgumentException;
        //  258    283    286    290    Ljava/lang/IllegalArgumentException;
        //  316    365    368    372    Ljava/lang/IllegalArgumentException;
        //  355    374    374    378    Ljava/lang/IllegalArgumentException;
        //  410    429    432    436    Ljava/lang/IllegalArgumentException;
        //  421    443    446    450    Ljava/lang/IllegalArgumentException;
        //  436    454    454    458    Ljava/lang/IllegalArgumentException;
        //  461    473    476    480    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0228:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private StatementParsingResult c(final boolean b) {
        final PsiBuilder.Marker a7 = this.a7();
        try {
            if (!this.n(true)) {
                this.i(a7);
                return StatementParsingResult.FAIL;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        final boolean a8 = this.a(OCTokenTypes.SEMICOLON, "Missing ';'");
        Label_0071: {
            Label_0051: {
                try {
                    if (a8) {
                        break Label_0051;
                    }
                    final boolean b2 = b;
                    if (b2) {
                        break Label_0051;
                    }
                    break Label_0051;
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
                try {
                    final boolean b2 = b;
                    if (b2) {
                        this.i(a7);
                        break Label_0071;
                    }
                }
                catch (IllegalArgumentException ex3) {
                    throw a(ex3);
                }
            }
            this.b(a7, OCElementTypes.EXPRESSION_STATEMENT);
            try {
                if (a8) {
                    return StatementParsingResult.PARSED;
                }
            }
            catch (IllegalArgumentException ex4) {
                throw a(ex4);
            }
        }
        return StatementParsingResult.PARSED_WITHOUT_SEMICOLON;
    }
    
    private boolean aJ() {
        final PsiBuilder.Marker a7 = this.a7();
        try {
            if (!this.n(true)) {
                a7.drop();
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        this.a(OCTokenTypes.SEMICOLON, "Missing ';'");
        this.b(a7, OCElementTypes.EXPRESSION_STATEMENT);
        return true;
    }
    
    private void aD() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.SEMICOLON;
                if (elementType != ocPunctuatorElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.SEMICOLON;
                if (elementType != ocPunctuatorElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        this.aY();
        this.b(a7, OCElementTypes.EMPTY_STATEMENT);
    }
    
    private void h() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.RETURN_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.RETURN_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        Label_0081: {
            try {
                this.aY();
                if (this.aF() == OCTokenTypes.SEMICOLON) {
                    this.aY();
                    break Label_0081;
                }
            }
            catch (IllegalArgumentException ex3) {
                throw a(ex3);
            }
            this.n(false);
            this.a(OCTokenTypes.SEMICOLON, "Missing ';'");
        }
        this.b(a7, OCElementTypes.RETURN_STATEMENT);
    }
    
    private void s() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.BREAK_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.BREAK_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        this.aY();
        this.a(OCTokenTypes.SEMICOLON, "Missing ';'");
        this.b(a7, OCElementTypes.BREAK_STATEMENT);
    }
    
    private void L() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.CONTINUE_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.CONTINUE_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        this.aY();
        this.a(OCTokenTypes.SEMICOLON, "Missing ';'");
        this.b(a7, OCElementTypes.CONTINUE_STATEMENT);
    }
    
    private void z() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.GOTO_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.GOTO_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        this.aY();
        final PsiBuilder.Marker a8 = this.a7();
        this.a(OCTokenTypes.IDENTIFIER, "Missing goto label");
        this.b(a8, OCElementTypes.REFERENCE_ELEMENT);
        this.a(OCTokenTypes.SEMICOLON, "Missing ';'");
        this.b(a7, OCElementTypes.GOTO_STATEMENT);
    }
    
    private void aa() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.$assertionsDisabled:Z
        //     3: ifne            35
        //     6: aload_0        
        //     7: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    10: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.FOR_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    13: if_acmpeq       35
        //    16: goto            23
        //    19: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    22: athrow         
        //    23: new             Ljava/lang/AssertionError;
        //    26: dup            
        //    27: invokespecial   java/lang/AssertionError.<init>:()V
        //    30: athrow         
        //    31: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    34: athrow         
        //    35: aload_0        
        //    36: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aI:()Lcom/jetbrains/cidr/lang/parser/OCParsing$LoopType;
        //    39: astore_1       
        //    40: aload_0        
        //    41: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    44: astore_2       
        //    45: aload_0        
        //    46: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    49: aload_0        
        //    50: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    53: ldc             "Expecting '('"
        //    55: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //    58: ifne            115
        //    61: aload_0        
        //    62: aload_2        
        //    63: aload_0        
        //    64: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsObjCSupport:Z
        //    67: ifeq            84
        //    70: aload_1        
        //    71: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$LoopType.OBJ_FOREACH_LOOP:Lcom/jetbrains/cidr/lang/parser/OCParsing$LoopType;
        //    74: if_acmpeq       98
        //    77: goto            84
        //    80: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    83: athrow         
        //    84: aload_1        
        //    85: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$LoopType.C11_FOREACH_LOOP:Lcom/jetbrains/cidr/lang/parser/OCParsing$LoopType;
        //    88: if_acmpne       108
        //    91: goto            98
        //    94: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    97: athrow         
        //    98: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.FOREACH_STATEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   101: goto            111
        //   104: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   107: athrow         
        //   108: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.FOR_STATEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   111: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   114: return         
        //   115: aload_1        
        //   116: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$LoopType.OBJ_FOREACH_LOOP:Lcom/jetbrains/cidr/lang/parser/OCParsing$LoopType;
        //   119: if_acmpne       372
        //   122: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.LOG:Lcom/intellij/openapi/diagnostic/Logger;
        //   125: aload_0        
        //   126: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsObjCSupport:Z
        //   129: invokevirtual   com/intellij/openapi/diagnostic/Logger.assertTrue:(Z)Z
        //   132: pop            
        //   133: iconst_1       
        //   134: istore_3       
        //   135: aload_0        
        //   136: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   139: astore          4
        //   141: aload_0        
        //   142: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aG:()Z
        //   145: pop            
        //   146: aload_0        
        //   147: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CODE_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   150: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;)Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   153: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   156: if_acmpne       167
        //   159: aload_0        
        //   160: aload           4
        //   162: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   165: iconst_0       
        //   166: istore_3       
        //   167: iload_3        
        //   168: ifeq            205
        //   171: aload_0        
        //   172: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   175: iconst_0       
        //   176: iconst_0       
        //   177: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED_FOR_SURE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   180: aconst_null    
        //   181: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZLcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;Ljava/lang/String;)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult;
        //   184: astore          5
        //   186: aload           5
        //   188: getfield        com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult.myType:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type;
        //   191: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type.isOk:()Z
        //   194: ifne            205
        //   197: aload_0        
        //   198: aload           4
        //   200: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   203: iconst_0       
        //   204: istore_3       
        //   205: iload_3        
        //   206: ifeq            295
        //   209: aload_0        
        //   210: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   213: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   216: if_acmpne       250
        //   219: goto            226
        //   222: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   225: athrow         
        //   226: ldc             "in"
        //   228: aload_0        
        //   229: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   232: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   237: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //   240: ifne            267
        //   243: goto            250
        //   246: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   249: athrow         
        //   250: aload_0        
        //   251: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   254: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   257: if_acmpne       287
        //   260: goto            267
        //   263: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   266: athrow         
        //   267: aload_0        
        //   268: aload           4
        //   270: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DECLARATION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   273: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   276: aload_0        
        //   277: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   280: goto            295
        //   283: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   286: athrow         
        //   287: aload_0        
        //   288: aload           4
        //   290: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   293: iconst_0       
        //   294: istore_3       
        //   295: iload_3        
        //   296: ifne            363
        //   299: aload_0        
        //   300: iconst_0       
        //   301: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.n:(Z)Z
        //   304: pop            
        //   305: aload_0        
        //   306: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   309: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   312: if_acmpne       357
        //   315: goto            322
        //   318: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   321: athrow         
        //   322: ldc             "in"
        //   324: aload_0        
        //   325: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   328: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   333: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //   336: ifeq            357
        //   339: goto            346
        //   342: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   345: athrow         
        //   346: aload_0        
        //   347: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   350: goto            363
        //   353: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   356: athrow         
        //   357: aload_0        
        //   358: ldc             "Expecting in"
        //   360: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   363: aload_0        
        //   364: iconst_0       
        //   365: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.n:(Z)Z
        //   368: pop            
        //   369: goto            527
        //   372: aload_1        
        //   373: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$LoopType.C_FOR_LOOP:Lcom/jetbrains/cidr/lang/parser/OCParsing$LoopType;
        //   376: if_acmpne       481
        //   379: aload_0        
        //   380: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   383: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   386: if_acmpeq       416
        //   389: goto            396
        //   392: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   395: athrow         
        //   396: aload_0        
        //   397: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.P:()Z
        //   400: istore_3       
        //   401: iload_3        
        //   402: ifne            416
        //   405: aload_0        
        //   406: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ai:()V
        //   409: goto            416
        //   412: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   415: athrow         
        //   416: aload_0        
        //   417: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   420: ldc             "Expecting ';'"
        //   422: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   425: pop            
        //   426: aload_0        
        //   427: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   430: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   433: if_acmpeq       450
        //   436: aload_0        
        //   437: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.ourSemicolonOrRparSet:Lcom/intellij/psi/tree/TokenSet;
        //   440: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/TokenSet;)V
        //   443: goto            450
        //   446: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   449: athrow         
        //   450: aload_0        
        //   451: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   454: ldc             "Expecting ';'"
        //   456: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   459: pop            
        //   460: aload_0        
        //   461: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   464: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   467: if_acmpeq       527
        //   470: aload_0        
        //   471: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ai:()V
        //   474: goto            527
        //   477: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   480: athrow         
        //   481: aload_0        
        //   482: iconst_1       
        //   483: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideLoop:Z
        //   486: aload_0        
        //   487: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.P:()Z
        //   490: istore_3       
        //   491: iload_3        
        //   492: ifne            506
        //   495: aload_0        
        //   496: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ai:()V
        //   499: goto            506
        //   502: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   505: athrow         
        //   506: aload_0        
        //   507: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   510: ldc             "Expecting ':'"
        //   512: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   515: pop            
        //   516: aload_0        
        //   517: iconst_0       
        //   518: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.n:(Z)Z
        //   521: pop            
        //   522: aload_0        
        //   523: iconst_0       
        //   524: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideLoop:Z
        //   527: aload_0        
        //   528: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   531: ldc             "Expecting ')'"
        //   533: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   536: pop            
        //   537: aload_0        
        //   538: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ao:()V
        //   541: aload_0        
        //   542: aload_2        
        //   543: aload_0        
        //   544: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsObjCSupport:Z
        //   547: ifeq            557
        //   550: aload_1        
        //   551: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$LoopType.OBJ_FOREACH_LOOP:Lcom/jetbrains/cidr/lang/parser/OCParsing$LoopType;
        //   554: if_acmpeq       571
        //   557: aload_1        
        //   558: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$LoopType.C11_FOREACH_LOOP:Lcom/jetbrains/cidr/lang/parser/OCParsing$LoopType;
        //   561: if_acmpne       581
        //   564: goto            571
        //   567: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   570: athrow         
        //   571: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.FOREACH_STATEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   574: goto            584
        //   577: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   580: athrow         
        //   581: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.FOR_STATEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   584: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   587: goto            648
        //   590: astore          6
        //   592: aload_0        
        //   593: aload_2        
        //   594: aload_0        
        //   595: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsObjCSupport:Z
        //   598: ifeq            615
        //   601: aload_1        
        //   602: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$LoopType.OBJ_FOREACH_LOOP:Lcom/jetbrains/cidr/lang/parser/OCParsing$LoopType;
        //   605: if_acmpeq       629
        //   608: goto            615
        //   611: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   614: athrow         
        //   615: aload_1        
        //   616: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$LoopType.C11_FOREACH_LOOP:Lcom/jetbrains/cidr/lang/parser/OCParsing$LoopType;
        //   619: if_acmpne       639
        //   622: goto            629
        //   625: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   628: athrow         
        //   629: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.FOREACH_STATEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   632: goto            642
        //   635: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   638: athrow         
        //   639: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.FOR_STATEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   642: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   645: aload           6
        //   647: athrow         
        //   648: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  6      31     31     35     Ljava/lang/IllegalArgumentException;
        //  0      16     19     23     Ljava/lang/IllegalArgumentException;
        //  49     61     590    648    Any
        //  491    499    502    506    Ljava/lang/IllegalArgumentException;
        //  450    477    477    481    Ljava/lang/IllegalArgumentException;
        //  416    443    446    450    Ljava/lang/IllegalArgumentException;
        //  401    409    412    416    Ljava/lang/IllegalArgumentException;
        //  372    389    392    396    Ljava/lang/IllegalArgumentException;
        //  322    353    353    357    Ljava/lang/IllegalArgumentException;
        //  299    339    342    346    Ljava/lang/IllegalArgumentException;
        //  295    315    318    322    Ljava/lang/IllegalArgumentException;
        //  250    283    283    287    Ljava/lang/IllegalArgumentException;
        //  226    260    263    267    Ljava/lang/IllegalArgumentException;
        //  209    243    246    250    Ljava/lang/IllegalArgumentException;
        //  205    219    222    226    Ljava/lang/IllegalArgumentException;
        //  84     104    104    108    Ljava/lang/IllegalArgumentException;
        //  70     91     94     98     Ljava/lang/IllegalArgumentException;
        //  61     77     80     84     Ljava/lang/IllegalArgumentException;
        //  115    541    590    648    Any
        //  557    577    577    581    Ljava/lang/IllegalArgumentException;
        //  550    564    567    571    Ljava/lang/IllegalArgumentException;
        //  590    592    590    648    Any
        //  592    608    611    615    Ljava/lang/IllegalArgumentException;
        //  601    622    625    629    Ljava/lang/IllegalArgumentException;
        //  615    635    635    639    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0226:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void ai() {
        final PsiBuilder.Marker a7 = this.a7();
        this.n(false);
        this.b(a7, OCElementTypes.EXPRESSION_STATEMENT);
    }
    
    private LoopType aI() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_1       
        //     5: iconst_0       
        //     6: istore_2       
        //     7: iconst_0       
        //     8: istore_3       
        //     9: iconst_0       
        //    10: istore          4
        //    12: aload_0        
        //    13: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    16: astore          5
        //    18: aload           5
        //    20: ifnull          307
        //    23: aload           5
        //    25: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    28: if_acmpeq       307
        //    31: goto            38
        //    34: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    37: athrow         
        //    38: aload           5
        //    40: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    43: if_acmpne       60
        //    46: goto            53
        //    49: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    52: athrow         
        //    53: goto            307
        //    56: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    59: athrow         
        //    60: iload_3        
        //    61: iconst_1       
        //    62: if_icmpne       223
        //    65: aload           5
        //    67: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.QUEST:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    70: if_acmpne       90
        //    73: goto            80
        //    76: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    79: athrow         
        //    80: iinc            4, 1
        //    83: goto            90
        //    86: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    89: athrow         
        //    90: aload           5
        //    92: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    95: if_acmpne       132
        //    98: iload_2        
        //    99: ifeq            119
        //   102: goto            109
        //   105: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   108: athrow         
        //   109: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$LoopType.OBJ_FOREACH_LOOP:Lcom/jetbrains/cidr/lang/parser/OCParsing$LoopType;
        //   112: goto            122
        //   115: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   118: athrow         
        //   119: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$LoopType.C_FOR_LOOP:Lcom/jetbrains/cidr/lang/parser/OCParsing$LoopType;
        //   122: astore          6
        //   124: aload_0        
        //   125: aload_1        
        //   126: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   129: aload           6
        //   131: areturn        
        //   132: aload           5
        //   134: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   137: if_acmpne       180
        //   140: aload_0        
        //   141: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsObjCSupport:Z
        //   144: ifeq            180
        //   147: goto            154
        //   150: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   153: athrow         
        //   154: ldc             "in"
        //   156: aload_0        
        //   157: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   160: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   165: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //   168: ifeq            180
        //   171: goto            178
        //   174: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   177: athrow         
        //   178: iconst_1       
        //   179: istore_2       
        //   180: aload           5
        //   182: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   185: if_acmpne       223
        //   188: iload           4
        //   190: ifle            210
        //   193: goto            200
        //   196: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   199: athrow         
        //   200: iinc            4, -1
        //   203: goto            223
        //   206: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   209: athrow         
        //   210: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$LoopType.C11_FOREACH_LOOP:Lcom/jetbrains/cidr/lang/parser/OCParsing$LoopType;
        //   213: astore          6
        //   215: aload_0        
        //   216: aload_1        
        //   217: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   220: aload           6
        //   222: areturn        
        //   223: aload           5
        //   225: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   228: if_acmpeq       246
        //   231: aload           5
        //   233: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   236: if_acmpne       256
        //   239: goto            246
        //   242: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   245: athrow         
        //   246: iinc            3, 1
        //   249: goto            256
        //   252: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   255: athrow         
        //   256: aload           5
        //   258: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   261: if_acmpeq       279
        //   264: aload           5
        //   266: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   269: if_acmpne       300
        //   272: goto            279
        //   275: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   278: athrow         
        //   279: iinc            3, -1
        //   282: iload_3        
        //   283: ifne            300
        //   286: goto            293
        //   289: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   292: athrow         
        //   293: goto            307
        //   296: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   299: athrow         
        //   300: aload_0        
        //   301: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   304: goto            12
        //   307: iload_2        
        //   308: ifeq            321
        //   311: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$LoopType.OBJ_FOREACH_LOOP:Lcom/jetbrains/cidr/lang/parser/OCParsing$LoopType;
        //   314: goto            324
        //   317: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   320: athrow         
        //   321: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$LoopType.C_FOR_LOOP:Lcom/jetbrains/cidr/lang/parser/OCParsing$LoopType;
        //   324: astore          5
        //   326: aload_0        
        //   327: aload_1        
        //   328: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   331: aload           5
        //   333: areturn        
        //   334: astore          7
        //   336: aload_0        
        //   337: aload_1        
        //   338: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   341: aload           7
        //   343: athrow         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  98     115    115    119    Ljava/lang/IllegalArgumentException;
        //  90     102    105    109    Ljava/lang/IllegalArgumentException;
        //  65     83     86     90     Ljava/lang/IllegalArgumentException;
        //  60     73     76     80     Ljava/lang/IllegalArgumentException;
        //  38     56     56     60     Ljava/lang/IllegalArgumentException;
        //  23     46     49     53     Ljava/lang/IllegalArgumentException;
        //  18     31     34     38     Ljava/lang/IllegalArgumentException;
        //  12     124    334    344    Any
        //  188    206    206    210    Ljava/lang/IllegalArgumentException;
        //  180    193    196    200    Ljava/lang/IllegalArgumentException;
        //  140    171    174    178    Ljava/lang/IllegalArgumentException;
        //  132    147    150    154    Ljava/lang/IllegalArgumentException;
        //  132    215    334    344    Any
        //  307    317    317    321    Ljava/lang/IllegalArgumentException;
        //  279    296    296    300    Ljava/lang/IllegalArgumentException;
        //  264    286    289    293    Ljava/lang/IllegalArgumentException;
        //  256    272    275    279    Ljava/lang/IllegalArgumentException;
        //  231    249    252    256    Ljava/lang/IllegalArgumentException;
        //  223    239    242    246    Ljava/lang/IllegalArgumentException;
        //  223    326    334    344    Any
        //  334    336    334    344    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0038:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void x() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.DO_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.DO_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        try {
            this.aY();
            this.ao();
            this.a(OCTokenTypes.WHILE_KEYWORD, "Missing 'while'");
            if (!this.a(OCTokenTypes.LPAR, "Missing '('")) {
                return;
            }
            this.n(false);
            this.a(OCTokenTypes.RPAR, "Missing ')");
            this.a(OCTokenTypes.SEMICOLON, "Missing ';'");
        }
        finally {
            this.b(a7, OCElementTypes.DO_WHILE_STATEMENT);
        }
    }
    
    private void j() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.WHILE_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.WHILE_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        try {
            this.aY();
            this.aj();
            this.ao();
        }
        finally {
            this.b(a7, OCElementTypes.WHILE_STATEMENT);
        }
    }
    
    private void ak() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.SWITCH_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.SWITCH_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        try {
            this.aY();
            this.aj();
            this.ao();
        }
        finally {
            this.b(a7, OCElementTypes.SWITCH_STATEMENT);
        }
    }
    
    private void o() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.IF_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.IF_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        try {
            this.aY();
            this.aj();
            this.ao();
            if (this.aF() == OCTokenTypes.ELSE_KEYWORD) {
                this.aY();
                this.ao();
            }
        }
        finally {
            this.b(a7, OCElementTypes.IF_STATEMENT);
        }
    }
    
    private void a5() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.GENERIC_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.GENERIC_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        try {
            this.aY();
            this.a(OCTokenTypes.LPAR, "Expecting '('");
            this.d(false);
            this.a(OCTokenTypes.COMMA, "Expecting ','");
            this.A();
            while (!this.F() && this.aF() != OCTokenTypes.RPAR) {
                final boolean a8 = this.a(OCTokenTypes.COMMA, "Expecting ','");
                try {
                    if (!a8) {
                        break;
                    }
                }
                catch (IllegalArgumentException ex3) {
                    throw a(ex3);
                }
                if (!this.A()) {
                    break;
                }
            }
            this.a(OCTokenTypes.RPAR, "Expecting ')'");
        }
        finally {
            this.b(a7, OCElementTypes.GENERIC_SELECTION_EXPRESSION);
        }
    }
    
    private boolean A() {
        final PsiBuilder.Marker a7 = this.a7();
        try {
            boolean a8 = false;
            if (this.aF() == OCTokenTypes.DEFAULT_KEYWORD) {
                this.aY();
                a8 = true;
            }
            if (!a8) {
                final PsiBuilder.Marker a9 = this.a7();
                this.myIsInsideGenericAssociation = true;
                a8 = this.a(DeclarationContext.TRAILING_RETURN_TYPE, TypeParsingExpectation.ANY);
                this.myIsInsideGenericAssociation = false;
                this.b(a9, OCElementTypes.TYPE_ELEMENT);
            }
            return a8 && this.a(OCTokenTypes.COLON, "Expecting ':'") && this.d(false);
        }
        finally {
            this.b(a7, OCElementTypes.GENERIC_SELECTION_ASSOCIATION);
        }
    }
    
    private void aj() {
        try {
            if (this.a(OCTokenTypes.LPAR, "Expected '('")) {
                this.a(OCParsing.ourSemicolonOrRparSet);
                this.a(OCTokenTypes.RPAR, "Missing ')");
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
    }
    
    private void a(final TokenSet p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_2       
        //     5: aload_0        
        //     6: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     9: astore_3       
        //    10: iconst_0       
        //    11: istore          4
        //    13: aload_0        
        //    14: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideMacro:Z
        //    17: ifne            250
        //    20: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.CPP_SPECIFIERS_FIRST:Lcom/intellij/psi/tree/TokenSet;
        //    23: aload_3        
        //    24: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    27: ifne            54
        //    30: goto            37
        //    33: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    36: athrow         
        //    37: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.CPP_EXPRESSIONS_FIRST:Lcom/intellij/psi/tree/TokenSet;
        //    40: aload_3        
        //    41: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    44: ifeq            68
        //    47: goto            54
        //    50: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    53: athrow         
        //    54: aload_3        
        //    55: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    58: if_acmpne       127
        //    61: goto            68
        //    64: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    67: athrow         
        //    68: aload_3        
        //    69: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    72: if_acmpeq       96
        //    75: goto            82
        //    78: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    81: athrow         
        //    82: aload_3        
        //    83: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    86: if_acmpne       110
        //    89: goto            96
        //    92: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    95: athrow         
        //    96: aload_0        
        //    97: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aK:()Z
        //   100: ifne            127
        //   103: goto            110
        //   106: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   109: athrow         
        //   110: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LITERALS:Lcom/intellij/psi/tree/TokenSet;
        //   113: aload_3        
        //   114: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   117: ifeq            250
        //   120: goto            127
        //   123: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   126: athrow         
        //   127: aload_0        
        //   128: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   131: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //   136: istore          5
        //   138: iconst_1       
        //   139: istore          4
        //   141: aload_0        
        //   142: iconst_0       
        //   143: iconst_0       
        //   144: iconst_1       
        //   145: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(ZZZ)Z
        //   148: ifeq            179
        //   151: aload_0        
        //   152: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   155: checkcast       Lcom/intellij/lang/impl/PsiBuilderImpl;
        //   158: aload_2        
        //   159: invokevirtual   com/intellij/lang/impl/PsiBuilderImpl.hasErrorsAfter:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //   162: ifne            179
        //   165: goto            172
        //   168: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   171: athrow         
        //   172: goto            250
        //   175: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   178: athrow         
        //   179: aload_0        
        //   180: aload_2        
        //   181: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   184: aload_0        
        //   185: iload           5
        //   187: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(I)V
        //   190: aload_0        
        //   191: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   194: astore_2       
        //   195: aload_0        
        //   196: iconst_0       
        //   197: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.n:(Z)Z
        //   200: ifeq            231
        //   203: aload_0        
        //   204: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   207: checkcast       Lcom/intellij/lang/impl/PsiBuilderImpl;
        //   210: aload_2        
        //   211: invokevirtual   com/intellij/lang/impl/PsiBuilderImpl.hasErrorsAfter:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //   214: ifne            231
        //   217: goto            224
        //   220: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   223: athrow         
        //   224: goto            250
        //   227: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   230: athrow         
        //   231: aload_0        
        //   232: aload_2        
        //   233: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   236: aload_0        
        //   237: iload           5
        //   239: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(I)V
        //   242: aload_0        
        //   243: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   246: astore_2       
        //   247: iconst_0       
        //   248: istore          4
        //   250: iload           4
        //   252: ifne            582
        //   255: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.CPP_SPECIFIERS_FIRST:Lcom/intellij/psi/tree/TokenSet;
        //   258: aload_3        
        //   259: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   262: ifeq            313
        //   265: goto            272
        //   268: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   271: athrow         
        //   272: aload_3        
        //   273: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   276: if_acmpeq       313
        //   279: goto            286
        //   282: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   285: athrow         
        //   286: aload_0        
        //   287: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.P:()Z
        //   290: ifne            582
        //   293: goto            300
        //   296: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   299: athrow         
        //   300: aload_0        
        //   301: iconst_0       
        //   302: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.n:(Z)Z
        //   305: pop            
        //   306: goto            582
        //   309: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   312: athrow         
        //   313: aload_3        
        //   314: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   317: if_acmpeq       334
        //   320: aload_3        
        //   321: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   324: if_acmpne       470
        //   327: goto            334
        //   330: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   333: athrow         
        //   334: aload_0        
        //   335: iconst_1       
        //   336: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.r:(Z)Z
        //   339: ifeq            470
        //   342: goto            349
        //   345: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   348: athrow         
        //   349: aload_0        
        //   350: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   353: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   356: if_acmpne       440
        //   359: goto            366
        //   362: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   365: athrow         
        //   366: aload_0        
        //   367: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   370: aload_0        
        //   371: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CODE_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   374: iconst_1       
        //   375: iconst_0       
        //   376: iconst_1       
        //   377: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZ)Z
        //   380: ifeq            420
        //   383: goto            390
        //   386: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   389: athrow         
        //   390: aload_0        
        //   391: aload_2        
        //   392: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   395: aload_0        
        //   396: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   399: astore_2       
        //   400: aload_0        
        //   401: iconst_0       
        //   402: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.n:(Z)Z
        //   405: ifne            582
        //   408: aload_0        
        //   409: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.P:()Z
        //   412: pop            
        //   413: goto            582
        //   416: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   419: athrow         
        //   420: aload_0        
        //   421: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.P:()Z
        //   424: ifne            582
        //   427: aload_0        
        //   428: iconst_0       
        //   429: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.n:(Z)Z
        //   432: pop            
        //   433: goto            582
        //   436: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   439: athrow         
        //   440: aload_0        
        //   441: aload_2        
        //   442: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   445: aload_0        
        //   446: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   449: astore_2       
        //   450: aload_0        
        //   451: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.P:()Z
        //   454: ifne            582
        //   457: aload_0        
        //   458: iconst_0       
        //   459: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.n:(Z)Z
        //   462: pop            
        //   463: goto            582
        //   466: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   469: athrow         
        //   470: aload_0        
        //   471: aload_2        
        //   472: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   475: aload_0        
        //   476: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   479: astore_2       
        //   480: aload_0        
        //   481: iconst_0       
        //   482: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.n:(Z)Z
        //   485: istore          5
        //   487: iload           5
        //   489: ifeq            510
        //   492: aload_1        
        //   493: aload_0        
        //   494: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   497: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   500: ifne            582
        //   503: goto            510
        //   506: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   509: athrow         
        //   510: aload_2        
        //   511: invokeinterface com/intellij/lang/PsiBuilder$Marker.rollbackTo:()V
        //   516: aload_0        
        //   517: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   520: astore_2       
        //   521: aload_0        
        //   522: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.P:()Z
        //   525: ifne            582
        //   528: iload           5
        //   530: ifeq            560
        //   533: goto            540
        //   536: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   539: athrow         
        //   540: aload_2        
        //   541: invokeinterface com/intellij/lang/PsiBuilder$Marker.rollbackTo:()V
        //   546: aload_0        
        //   547: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   550: astore_2       
        //   551: aload_0        
        //   552: iconst_0       
        //   553: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.n:(Z)Z
        //   556: pop            
        //   557: goto            582
        //   560: aload_0        
        //   561: aload_0        
        //   562: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   565: ifeq            577
        //   568: ldc             "Declaration or expression expected"
        //   570: goto            579
        //   573: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   576: athrow         
        //   577: ldc             "Expression expected"
        //   579: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   582: aload_0        
        //   583: aload_2        
        //   584: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DECLARATION_OR_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   587: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   590: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  13     30     33     37     Ljava/lang/IllegalArgumentException;
        //  20     47     50     54     Ljava/lang/IllegalArgumentException;
        //  37     61     64     68     Ljava/lang/IllegalArgumentException;
        //  54     75     78     82     Ljava/lang/IllegalArgumentException;
        //  68     89     92     96     Ljava/lang/IllegalArgumentException;
        //  82     103    106    110    Ljava/lang/IllegalArgumentException;
        //  96     120    123    127    Ljava/lang/IllegalArgumentException;
        //  141    165    168    172    Ljava/lang/IllegalArgumentException;
        //  151    175    175    179    Ljava/lang/IllegalArgumentException;
        //  195    217    220    224    Ljava/lang/IllegalArgumentException;
        //  203    227    227    231    Ljava/lang/IllegalArgumentException;
        //  250    265    268    272    Ljava/lang/IllegalArgumentException;
        //  255    279    282    286    Ljava/lang/IllegalArgumentException;
        //  272    293    296    300    Ljava/lang/IllegalArgumentException;
        //  286    309    309    313    Ljava/lang/IllegalArgumentException;
        //  313    327    330    334    Ljava/lang/IllegalArgumentException;
        //  320    342    345    349    Ljava/lang/IllegalArgumentException;
        //  334    359    362    366    Ljava/lang/IllegalArgumentException;
        //  349    383    386    390    Ljava/lang/IllegalArgumentException;
        //  400    416    416    420    Ljava/lang/IllegalArgumentException;
        //  420    436    436    440    Ljava/lang/IllegalArgumentException;
        //  450    466    466    470    Ljava/lang/IllegalArgumentException;
        //  487    503    506    510    Ljava/lang/IllegalArgumentException;
        //  521    533    536    540    Ljava/lang/IllegalArgumentException;
        //  560    573    573    577    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0037:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void a(final int n) {
        this.myLocalNameScope.undefineFromIndex(n);
        this.myTypeKindsCache.clear();
        this.myParseTypeFirstCache.clear();
        this.myNonTypeExpressionsCache.clear();
        this.myNonConstantExprInTemplateCache.clear();
        this.myTemplateArgumentListCache.clear();
    }
    
    @NotNull
    private DeclaratorsParsingResult a(final DeclarationContext declarationContext, final boolean b, final boolean b2, final TypeParsingResult typeParsingResult, final String s) {
        DeclaratorsParsingResult a;
        try {
            a = this.a(declarationContext, b, b2, typeParsingResult, false, false, s);
            if (a == null) {
                throw new IllegalStateException(String.format("@NotNull method %s.%s must not return null", "com/jetbrains/cidr/lang/parser/OCParsing", "parseDeclarators"));
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        return a;
    }
    
    @NotNull
    private DeclaratorsParsingResult a(final DeclarationContext p0, final boolean p1, final boolean p2, final TypeParsingResult p3, final boolean p4, final boolean p5, final String p6) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aconst_null    
        //     1: astore          8
        //     3: new             Ljava/util/ArrayList;
        //     6: dup            
        //     7: invokespecial   java/util/ArrayList.<init>:()V
        //    10: astore          9
        //    12: aload_0        
        //    13: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.F:()Z
        //    16: ifne            535
        //    19: aload_0        
        //    20: aconst_null    
        //    21: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //    24: aload_0        
        //    25: aload_1        
        //    26: iload_2        
        //    27: iload_3        
        //    28: aload           4
        //    30: iload           5
        //    32: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZLcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;Z)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //    35: astore          10
        //    37: aload_0        
        //    38: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //    41: ifnull          61
        //    44: aload           9
        //    46: aload_0        
        //    47: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //    50: invokevirtual   java/util/ArrayList.add:(Ljava/lang/Object;)Z
        //    53: pop            
        //    54: goto            61
        //    57: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    60: athrow         
        //    61: aload           10
        //    63: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.isOk:()Z
        //    66: ifne            123
        //    69: new             Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult;
        //    72: dup            
        //    73: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type.FAIL:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type;
        //    76: aload           9
        //    78: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult.<init>:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type;Ljava/util/List;)V
        //    81: dup            
        //    82: ifnonnull       122
        //    85: goto            92
        //    88: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    91: athrow         
        //    92: new             Ljava/lang/IllegalStateException;
        //    95: dup            
        //    96: ldc             "@NotNull method %s.%s must not return null"
        //    98: ldc             2
        //   100: anewarray       Ljava/lang/Object;
        //   103: dup            
        //   104: ldc             0
        //   106: ldc             "com/jetbrains/cidr/lang/parser/OCParsing"
        //   108: aastore        
        //   109: dup            
        //   110: ldc             1
        //   112: ldc             "parseDeclarators"
        //   114: aastore        
        //   115: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //   118: invokespecial   java/lang/IllegalStateException.<init>:(Ljava/lang/String;)V
        //   121: athrow         
        //   122: areturn        
        //   123: aload_0        
        //   124: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //   127: ifnull          146
        //   130: aload_0        
        //   131: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //   134: invokeinterface java/util/List.size:()I
        //   139: goto            147
        //   142: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   145: athrow         
        //   146: iconst_0       
        //   147: istore          11
        //   149: iconst_0       
        //   150: istore          12
        //   152: iload           11
        //   154: iconst_1       
        //   155: if_icmple       237
        //   158: aload_0        
        //   159: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //   162: iload           11
        //   164: iconst_2       
        //   165: isub           
        //   166: invokeinterface java/util/List.get:(I)Ljava/lang/Object;
        //   171: ifnull          231
        //   174: goto            181
        //   177: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   180: athrow         
        //   181: aload_0        
        //   182: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //   185: iload           11
        //   187: iconst_2       
        //   188: isub           
        //   189: invokeinterface java/util/List.get:(I)Ljava/lang/Object;
        //   194: checkcast       Ljava/lang/String;
        //   197: aload_0        
        //   198: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //   201: iload           11
        //   203: iconst_1       
        //   204: isub           
        //   205: invokeinterface java/util/List.get:(I)Ljava/lang/Object;
        //   210: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //   213: ifeq            231
        //   216: goto            223
        //   219: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   222: athrow         
        //   223: iconst_1       
        //   224: goto            232
        //   227: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   230: athrow         
        //   231: iconst_0       
        //   232: istore          12
        //   234: goto            286
        //   237: aload_0        
        //   238: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //   241: ifnonnull       286
        //   244: aload           7
        //   246: ifnull          283
        //   249: goto            256
        //   252: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   255: athrow         
        //   256: aload           7
        //   258: aload_0        
        //   259: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //   262: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //   265: ifeq            283
        //   268: goto            275
        //   271: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   274: athrow         
        //   275: iconst_1       
        //   276: goto            284
        //   279: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   282: athrow         
        //   283: iconst_0       
        //   284: istore          12
        //   286: aload_0        
        //   287: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //   290: ifnull          413
        //   293: aload_0        
        //   294: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideTypeNameParsing:Z
        //   297: ifne            413
        //   300: goto            307
        //   303: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   306: athrow         
        //   307: aload_0        
        //   308: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideDetectionMode:Z
        //   311: ifne            413
        //   314: goto            321
        //   317: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   320: athrow         
        //   321: iload           12
        //   323: ifne            413
        //   326: goto            333
        //   329: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   332: athrow         
        //   333: aload_0        
        //   334: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLocalNameScope:Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope;
        //   337: aload_0        
        //   338: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //   341: iload_3        
        //   342: aload_0        
        //   343: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   346: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //   351: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.defineValue:(Ljava/lang/String;ZI)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   354: pop            
        //   355: iload           6
        //   357: ifeq            413
        //   360: goto            367
        //   363: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   366: athrow         
        //   367: aload_0        
        //   368: getfield        com/jetbrains/cidr/lang/parser/OCParsing.mySupportsAutosynthesis:Z
        //   371: ifeq            413
        //   374: goto            381
        //   377: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   380: athrow         
        //   381: aload_0        
        //   382: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLocalNameScope:Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope;
        //   385: aload_0        
        //   386: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //   389: invokestatic    com/jetbrains/cidr/lang/refactoring/OCNameSuggester.getClang4ImplicitIvarName:(Ljava/lang/String;)Ljava/lang/String;
        //   392: iload_3        
        //   393: aload_0        
        //   394: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   397: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //   402: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.defineValue:(Ljava/lang/String;ZI)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   405: pop            
        //   406: goto            413
        //   409: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   412: athrow         
        //   413: aload           8
        //   415: ifnonnull       450
        //   418: aload           10
        //   420: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.PARSED_FUNCTION:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //   423: if_acmpne       450
        //   426: goto            433
        //   429: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   432: athrow         
        //   433: new             Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult;
        //   436: dup            
        //   437: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type.PARSED_FUNCTION:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type;
        //   440: aload           9
        //   442: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult.<init>:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type;Ljava/util/List;)V
        //   445: astore          8
        //   447: goto            464
        //   450: new             Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult;
        //   453: dup            
        //   454: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type.PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type;
        //   457: aload           9
        //   459: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult.<init>:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type;Ljava/util/List;)V
        //   462: astore          8
        //   464: aload_0        
        //   465: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   468: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   471: if_acmpeq       481
        //   474: goto            535
        //   477: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   480: athrow         
        //   481: aload_0        
        //   482: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ay:()Lcom/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType;
        //   485: astore          13
        //   487: aload_0        
        //   488: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideMacro:Z
        //   491: ifeq            528
        //   494: aload           13
        //   496: ifnull          528
        //   499: goto            506
        //   502: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   505: athrow         
        //   506: aload           13
        //   508: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType.isParamToken:()Z
        //   511: ifne            528
        //   514: goto            521
        //   517: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   520: athrow         
        //   521: goto            535
        //   524: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   527: athrow         
        //   528: aload_0        
        //   529: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   532: goto            12
        //   535: aload           8
        //   537: ifnull          549
        //   540: aload           8
        //   542: goto            561
        //   545: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   548: athrow         
        //   549: new             Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult;
        //   552: dup            
        //   553: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type.PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type;
        //   556: aload           9
        //   558: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult.<init>:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type;Ljava/util/List;)V
        //   561: dup            
        //   562: ifnonnull       599
        //   565: new             Ljava/lang/IllegalStateException;
        //   568: dup            
        //   569: ldc             "@NotNull method %s.%s must not return null"
        //   571: ldc             2
        //   573: anewarray       Ljava/lang/Object;
        //   576: dup            
        //   577: ldc             0
        //   579: ldc             "com/jetbrains/cidr/lang/parser/OCParsing"
        //   581: aastore        
        //   582: dup            
        //   583: ldc             1
        //   585: ldc             "parseDeclarators"
        //   587: aastore        
        //   588: invokestatic    java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
        //   591: invokespecial   java/lang/IllegalStateException.<init>:(Ljava/lang/String;)V
        //   594: athrow         
        //   595: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   598: athrow         
        //   599: areturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  37     54     57     61     Ljava/lang/IllegalArgumentException;
        //  61     85     88     92     Ljava/lang/IllegalArgumentException;
        //  123    142    142    146    Ljava/lang/IllegalArgumentException;
        //  152    174    177    181    Ljava/lang/IllegalArgumentException;
        //  158    216    219    223    Ljava/lang/IllegalArgumentException;
        //  181    227    227    231    Ljava/lang/IllegalArgumentException;
        //  237    249    252    256    Ljava/lang/IllegalArgumentException;
        //  244    268    271    275    Ljava/lang/IllegalArgumentException;
        //  256    279    279    283    Ljava/lang/IllegalArgumentException;
        //  286    300    303    307    Ljava/lang/IllegalArgumentException;
        //  293    314    317    321    Ljava/lang/IllegalArgumentException;
        //  307    326    329    333    Ljava/lang/IllegalArgumentException;
        //  321    360    363    367    Ljava/lang/IllegalArgumentException;
        //  333    374    377    381    Ljava/lang/IllegalArgumentException;
        //  367    406    409    413    Ljava/lang/IllegalArgumentException;
        //  413    426    429    433    Ljava/lang/IllegalArgumentException;
        //  464    477    477    481    Ljava/lang/IllegalArgumentException;
        //  487    499    502    506    Ljava/lang/IllegalArgumentException;
        //  494    514    517    521    Ljava/lang/IllegalArgumentException;
        //  506    524    524    528    Ljava/lang/IllegalArgumentException;
        //  535    545    545    549    Ljava/lang/IllegalArgumentException;
        //  561    595    595    599    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0181:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private DeclaratorParsingResult a(final DeclarationContext p0, final boolean p1, final boolean p2, final TypeParsingResult p3, final boolean p4) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_1        
        //     1: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.STRUCT:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //     4: if_acmpne       51
        //     7: aload_0        
        //     8: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    11: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    14: if_acmpne       51
        //    17: goto            24
        //    20: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    23: athrow         
        //    24: aload_0        
        //    25: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    28: aload_0        
        //    29: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    32: astore          6
        //    34: aload_0        
        //    35: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.E:()V
        //    38: aload_0        
        //    39: aload           6
        //    41: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.ANONYMOUS_DECLARATOR:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    44: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //    47: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //    50: areturn        
        //    51: aload_0        
        //    52: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    55: astore          6
        //    57: aload_0        
        //    58: aload_1        
        //    59: iconst_0       
        //    60: iload_2        
        //    61: iload_3        
        //    62: iconst_1       
        //    63: iconst_1       
        //    64: iconst_0       
        //    65: aload           4
        //    67: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZZZZLcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //    70: astore          7
        //    72: aload           7
        //    74: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.isOk:()Z
        //    77: ifne            94
        //    80: aload           6
        //    82: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //    87: aload           7
        //    89: areturn        
        //    90: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    93: athrow         
        //    94: aload_0        
        //    95: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    98: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.__ASM_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   101: if_acmpeq       121
        //   104: aload_0        
        //   105: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   108: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.__ATTRIBUTE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   111: if_acmpne       133
        //   114: goto            121
        //   117: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   120: athrow         
        //   121: aload_0        
        //   122: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a2:()Z
        //   125: pop            
        //   126: goto            94
        //   129: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   132: athrow         
        //   133: aload_0        
        //   134: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.v:()Z
        //   137: pop            
        //   138: iload           5
        //   140: ifeq            173
        //   143: aload_0        
        //   144: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EQ:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   147: ldc             "Expecting '='"
        //   149: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   152: ifeq            344
        //   155: goto            162
        //   158: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   161: athrow         
        //   162: aload_0        
        //   163: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aO:()V
        //   166: goto            344
        //   169: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   172: athrow         
        //   173: aload_1        
        //   174: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   177: if_acmpeq       208
        //   180: aload_1        
        //   181: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CODE_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   184: if_acmpeq       208
        //   187: goto            194
        //   190: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   193: athrow         
        //   194: aload_1        
        //   195: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.STRUCT:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   198: if_acmpne       344
        //   201: goto            208
        //   204: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   207: athrow         
        //   208: aload_0        
        //   209: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   212: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EQ:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   215: if_acmpne       344
        //   218: goto            225
        //   221: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   224: athrow         
        //   225: aload_0        
        //   226: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   229: aload_0        
        //   230: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   233: ifeq            316
        //   236: goto            243
        //   239: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   242: athrow         
        //   243: aload_1        
        //   244: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.STRUCT:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   247: if_acmpeq       271
        //   250: goto            257
        //   253: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   256: athrow         
        //   257: aload_1        
        //   258: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   261: if_acmpne       316
        //   264: goto            271
        //   267: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   270: athrow         
        //   271: aload_0        
        //   272: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   275: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DEFAULT_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   278: if_acmpeq       305
        //   281: goto            288
        //   284: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   287: athrow         
        //   288: aload_0        
        //   289: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   292: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DELETE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   295: if_acmpne       316
        //   298: goto            305
        //   301: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   304: athrow         
        //   305: aload_0        
        //   306: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   309: goto            344
        //   312: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   315: athrow         
        //   316: aload_0        
        //   317: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //   320: astore          8
        //   322: aload_0        
        //   323: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //   326: astore          9
        //   328: aload_0        
        //   329: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aO:()V
        //   332: aload_0        
        //   333: aload           8
        //   335: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //   338: aload_0        
        //   339: aload           9
        //   341: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //   344: aload_0        
        //   345: aload           6
        //   347: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DECLARATOR:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   350: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   353: aload           7
        //   355: areturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      17     20     24     Ljava/lang/IllegalArgumentException;
        //  72     90     90     94     Ljava/lang/IllegalArgumentException;
        //  94     114    117    121    Ljava/lang/IllegalArgumentException;
        //  104    129    129    133    Ljava/lang/IllegalArgumentException;
        //  133    155    158    162    Ljava/lang/IllegalArgumentException;
        //  143    169    169    173    Ljava/lang/IllegalArgumentException;
        //  173    187    190    194    Ljava/lang/IllegalArgumentException;
        //  180    201    204    208    Ljava/lang/IllegalArgumentException;
        //  194    218    221    225    Ljava/lang/IllegalArgumentException;
        //  208    236    239    243    Ljava/lang/IllegalArgumentException;
        //  225    250    253    257    Ljava/lang/IllegalArgumentException;
        //  243    264    267    271    Ljava/lang/IllegalArgumentException;
        //  257    281    284    288    Ljava/lang/IllegalArgumentException;
        //  271    298    301    305    Ljava/lang/IllegalArgumentException;
        //  288    312    312    316    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0194:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean aG() {
        return this.o(true);
    }
    
    private boolean o(final boolean b) {
        boolean b2 = false;
        while (true) {
            if (OCTokenTypes.__ATTRIBUTE_KEYWORD == this.aF()) {
                b2 |= this.a2();
            }
            else if (OCTokenTypes.__DECLSPEC_KEYWORD == this.aF()) {
                b2 |= this.ar();
            }
            else {
                try {
                    if (!b || !OCTokenTypes.CALL_CONVENTIONS.contains(this.aF())) {
                        break;
                    }
                }
                catch (IllegalArgumentException ex) {
                    throw a(ex);
                }
                b2 |= this.q();
            }
        }
        return b2 | this.v();
    }
    
    private boolean a2() {
        final PsiBuilder.Marker a7 = this.a7();
        Label_0079: {
            Label_0069: {
                Label_0040: {
                    try {
                        this.aY();
                        if (this.aF() != OCTokenTypes.LPAR) {
                            break Label_0079;
                        }
                        final OCParsing ocParsing = this;
                        ocParsing.aY();
                        final OCParsing ocParsing2 = this;
                        final IElementType elementType = ocParsing2.aF();
                        final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LPAR;
                        if (elementType == ocPunctuatorElementType) {
                            break Label_0040;
                        }
                        break Label_0040;
                    }
                    catch (IllegalArgumentException ex) {
                        throw a(ex);
                    }
                    try {
                        final OCParsing ocParsing = this;
                        ocParsing.aY();
                        final OCParsing ocParsing2 = this;
                        final IElementType elementType = ocParsing2.aF();
                        final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LPAR;
                        if (elementType == ocPunctuatorElementType) {
                            this.aY();
                            this.C();
                            this.a(OCTokenTypes.RPAR, "Missing ')'");
                            break Label_0069;
                        }
                    }
                    catch (IllegalArgumentException ex2) {
                        throw a(ex2);
                    }
                }
                this.C();
            }
            this.a(OCTokenTypes.RPAR, "Missing ')'");
        }
        this.b(a7, OCElementTypes.ATTRIBUTES);
        return true;
    }
    
    private boolean v() {
        Label_0030: {
            try {
                if (!this.myIsCppSupport) {
                    return false;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LBRACKET;
                if (elementType != ocPunctuatorElementType) {
                    return false;
                }
                break Label_0030;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LBRACKET;
                if (elementType != ocPunctuatorElementType) {
                    return false;
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        PsiBuilder.Marker a7;
        while (true) {
            a7 = this.a7();
            if (this.aF() != OCTokenTypes.LBRACKET) {
                break;
            }
            this.aY();
            boolean b = false;
            Label_0227: {
                if (this.aF() == OCTokenTypes.LBRACKET) {
                    this.aY();
                    final PsiBuilder.Marker a8 = this.a7();
                    int n = 1;
                    IElementType elementType2 = this.aF();
                    try {
                        if (elementType2 == OCTokenTypes.LBRACKET) {
                            ++n;
                        }
                    }
                    catch (IllegalArgumentException ex3) {
                        throw a(ex3);
                    }
                    try {
                        if (elementType2 == OCTokenTypes.RBRACKET) {
                            --n;
                        }
                    }
                    catch (IllegalArgumentException ex4) {
                        throw a(ex4);
                    }
                    while (true) {
                        try {
                            if (n <= 0 || elementType2 == null) {
                                break;
                            }
                        }
                        catch (IllegalArgumentException ex5) {
                            throw a(ex5);
                        }
                        this.aY();
                        elementType2 = this.aF();
                        try {
                            if (elementType2 == OCTokenTypes.LBRACKET) {
                                ++n;
                            }
                        }
                        catch (IllegalArgumentException ex6) {
                            throw a(ex6);
                        }
                        if (elementType2 == OCTokenTypes.RBRACKET) {
                            --n;
                        }
                    }
                    try {
                        this.b(a8, OCElementTypes.ATTRIBUTE);
                        if (this.aF() != OCTokenTypes.RBRACKET) {
                            break Label_0227;
                        }
                        this.aY();
                        if (this.aF() != OCTokenTypes.RBRACKET) {
                            break Label_0227;
                        }
                    }
                    catch (IllegalArgumentException ex7) {
                        throw a(ex7);
                    }
                    this.aY();
                    this.b(a7, OCElementTypes.ATTRIBUTES);
                    b = true;
                }
                try {
                    if (!b) {
                        this.i(a7);
                        return false;
                    }
                    continue;
                }
                catch (IllegalArgumentException ex8) {
                    throw a(ex8);
                }
            }
        }
        a7.drop();
        return true;
    }
    
    private boolean ar() {
        final PsiBuilder.Marker a7 = this.a7();
        try {
            this.aY();
            if (this.aF() == OCTokenTypes.LPAR) {
                this.aY();
                this.C();
                this.a(OCTokenTypes.RPAR, "Missing ')'");
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        this.b(a7, OCElementTypes.ATTRIBUTES);
        return true;
    }
    
    private boolean q() {
        final PsiBuilder.Marker a7 = this.a7();
        this.aY();
        this.b(a7, OCElementTypes.ATTRIBUTES);
        return true;
    }
    
    private void C() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     4: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //     7: if_acmpeq       59
        //    10: aload_0        
        //    11: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    14: ifnull          59
        //    17: goto            24
        //    20: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    23: athrow         
        //    24: aload_0        
        //    25: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a6:()V
        //    28: aload_0        
        //    29: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    32: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    35: if_acmpeq       52
        //    38: goto            45
        //    41: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    44: athrow         
        //    45: goto            59
        //    48: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    51: athrow         
        //    52: aload_0        
        //    53: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    56: goto            0
        //    59: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      17     20     24     Ljava/lang/IllegalArgumentException;
        //  10     38     41     45     Ljava/lang/IllegalArgumentException;
        //  24     48     48     52     Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0024:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void a6() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_1       
        //     5: aconst_null    
        //     6: astore_2       
        //     7: iconst_0       
        //     8: istore_3       
        //     9: iload_3        
        //    10: iflt            187
        //    13: aload_0        
        //    14: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    17: astore          4
        //    19: aload           4
        //    21: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    24: if_acmpne       37
        //    27: iinc            3, 1
        //    30: goto            37
        //    33: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    36: athrow         
        //    37: aload           4
        //    39: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    42: if_acmpne       55
        //    45: iinc            3, -1
        //    48: goto            55
        //    51: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    54: athrow         
        //    55: iload_3        
        //    56: ifne            74
        //    59: aload           4
        //    61: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    64: if_acmpeq       187
        //    67: goto            74
        //    70: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    73: athrow         
        //    74: iload_3        
        //    75: iflt            187
        //    78: goto            85
        //    81: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    84: athrow         
        //    85: aload           4
        //    87: ifnonnull       104
        //    90: goto            97
        //    93: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    96: athrow         
        //    97: goto            187
        //   100: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   103: athrow         
        //   104: aload           4
        //   106: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   109: if_acmpne       144
        //   112: iload_3        
        //   113: ifne            144
        //   116: goto            123
        //   119: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   122: athrow         
        //   123: aload_2        
        //   124: ifnull          144
        //   127: goto            134
        //   130: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   133: athrow         
        //   134: aload_0        
        //   135: aload_2        
        //   136: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.ATTRIBUTE_PARAMETERS:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   139: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   142: aconst_null    
        //   143: astore_2       
        //   144: aload_0        
        //   145: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   148: aload           4
        //   150: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   153: if_acmpne       184
        //   156: iload_3        
        //   157: iconst_1       
        //   158: if_icmpne       184
        //   161: goto            168
        //   164: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   167: athrow         
        //   168: aload_2        
        //   169: ifnonnull       184
        //   172: goto            179
        //   175: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   178: athrow         
        //   179: aload_0        
        //   180: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   183: astore_2       
        //   184: goto            9
        //   187: aload_2        
        //   188: ifnull          204
        //   191: aload_2        
        //   192: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   197: goto            204
        //   200: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   203: athrow         
        //   204: aload_0        
        //   205: aload_1        
        //   206: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.ATTRIBUTE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   209: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   212: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  19     30     33     37     Ljava/lang/IllegalArgumentException;
        //  37     48     51     55     Ljava/lang/IllegalArgumentException;
        //  55     67     70     74     Ljava/lang/IllegalArgumentException;
        //  59     78     81     85     Ljava/lang/IllegalArgumentException;
        //  74     90     93     97     Ljava/lang/IllegalArgumentException;
        //  85     100    100    104    Ljava/lang/IllegalArgumentException;
        //  104    116    119    123    Ljava/lang/IllegalArgumentException;
        //  112    127    130    134    Ljava/lang/IllegalArgumentException;
        //  144    161    164    168    Ljava/lang/IllegalArgumentException;
        //  156    172    175    179    Ljava/lang/IllegalArgumentException;
        //  187    197    200    204    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0074:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void aO() {
        try {
            if (this.aF() == OCTokenTypes.LBRACE) {
                this.ab();
                return;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        this.d(false);
    }
    
    private void ab() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LBRACE;
                if (elementType != ocPunctuatorElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LBRACE;
                if (elementType != ocPunctuatorElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        this.aY();
        while (true) {
            try {
                if (this.F() || this.aF() == OCTokenTypes.RBRACE) {
                    break;
                }
            }
            catch (IllegalArgumentException ex3) {
                throw a(ex3);
            }
            final IElementType af = this.aF();
            Label_0765: {
                Label_0469: {
                    try {
                        if (af != OCTokenTypes.DOT) {
                            if (af != OCTokenTypes.LBRACKET) {
                                break Label_0469;
                            }
                        }
                    }
                    catch (IllegalArgumentException ex4) {
                        throw a(ex4);
                    }
                    PsiBuilder.Marker a8 = this.a7();
                    PsiBuilder.Marker marker = this.a7();
                    int n = 0;
                    while (true) {
                        final IElementType af2 = this.aF();
                        Label_0305: {
                            if (af2 == OCTokenTypes.DOT) {
                                this.aY();
                                this.a(OCTokenTypes.IDENTIFIER, "field name expected");
                                this.b(marker, OCElementTypes.QUALIFIED_DESIGNATOR);
                                n = Integer.MAX_VALUE;
                            }
                            else {
                                Label_0187: {
                                    try {
                                        if (af2 != OCTokenTypes.LBRACKET) {
                                            break;
                                        }
                                        final OCParsing ocParsing2 = this;
                                        ocParsing2.aY();
                                        final OCParsing ocParsing3 = this;
                                        final boolean b = false;
                                        ocParsing3.d(b);
                                        final OCParsing ocParsing4 = this;
                                        final IElementType elementType2 = ocParsing4.aF();
                                        final OCPunctuatorElementType ocPunctuatorElementType2 = OCTokenTypes.ELLIPSIS;
                                        if (elementType2 == ocPunctuatorElementType2) {
                                            break Label_0187;
                                        }
                                        break Label_0187;
                                    }
                                    catch (IllegalArgumentException ex5) {
                                        throw a(ex5);
                                    }
                                    try {
                                        final OCParsing ocParsing2 = this;
                                        ocParsing2.aY();
                                        final OCParsing ocParsing3 = this;
                                        final boolean b = false;
                                        ocParsing3.d(b);
                                        final OCParsing ocParsing4 = this;
                                        final IElementType elementType2 = ocParsing4.aF();
                                        final OCPunctuatorElementType ocPunctuatorElementType2 = OCTokenTypes.ELLIPSIS;
                                        if (elementType2 == ocPunctuatorElementType2) {
                                            this.aY();
                                            this.d(false);
                                        }
                                    }
                                    catch (IllegalArgumentException ex6) {
                                        throw a(ex6);
                                    }
                                }
                                if (this.aF() != OCTokenTypes.RBRACKET) {
                                    this.i(a8);
                                    a8 = null;
                                    marker = null;
                                    break;
                                }
                                this.a(OCTokenTypes.RBRACKET, "Expecting ']'");
                                final IElementType af3 = this.aF();
                                Label_0280: {
                                    Label_0293: {
                                        Label_0265: {
                                            try {
                                                if (!this.myIsCppSupport) {
                                                    break Label_0293;
                                                }
                                                final IElementType elementType3 = af3;
                                                final OCPunctuatorElementType ocPunctuatorElementType3 = OCTokenTypes.LPAR;
                                                if (elementType3 != ocPunctuatorElementType3) {
                                                    break Label_0265;
                                                }
                                                break Label_0280;
                                            }
                                            catch (IllegalArgumentException ex7) {
                                                throw a(ex7);
                                            }
                                            try {
                                                final IElementType elementType3 = af3;
                                                final OCPunctuatorElementType ocPunctuatorElementType3 = OCTokenTypes.LPAR;
                                                if (elementType3 != ocPunctuatorElementType3) {
                                                    if (af3 != OCTokenTypes.LBRACE) {
                                                        break Label_0293;
                                                    }
                                                }
                                            }
                                            catch (IllegalArgumentException ex8) {
                                                throw a(ex8);
                                            }
                                        }
                                        break Label_0280;
                                    }
                                    this.b(marker, OCElementTypes.QUALIFIED_DESIGNATOR);
                                    ++n;
                                    break Label_0305;
                                }
                                this.i(a8);
                                a8 = null;
                                marker = null;
                                break;
                            }
                        }
                        marker = marker.precede();
                    }
                    try {
                        if (marker != null) {
                            marker.drop();
                        }
                    }
                    catch (IllegalArgumentException ex9) {
                        throw a(ex9);
                    }
                    Label_0447: {
                        Label_0376: {
                            try {
                                if (this.aF() == OCTokenTypes.EQ) {
                                    this.aY();
                                    break Label_0376;
                                }
                            }
                            catch (IllegalArgumentException ex10) {
                                throw a(ex10);
                            }
                            try {
                                if (n > 1) {
                                    this.a("Expecting '='");
                                }
                            }
                            catch (IllegalArgumentException ex11) {
                                throw a(ex11);
                            }
                            try {
                                if (this.aF() == OCTokenTypes.LBRACE) {
                                    this.ab();
                                    break Label_0447;
                                }
                            }
                            catch (IllegalArgumentException ex12) {
                                throw a(ex12);
                            }
                        }
                        final PsiBuilder.Marker a9 = this.a7();
                        try {
                            this.d(false);
                            if (this.aF() == OCTokenTypes.ELLIPSIS) {
                                this.aY();
                                a9.done((IElementType)OCElementTypes.CPP_VARIADIC_PACK_EXPRESSION);
                                break Label_0447;
                            }
                        }
                        catch (IllegalArgumentException ex13) {
                            throw a(ex13);
                        }
                        a9.drop();
                        try {
                            if (a8 != null) {
                                this.b(a8, OCElementTypes.DESIGNATED_INITIALIZER);
                            }
                        }
                        catch (IllegalArgumentException ex14) {
                            throw a(ex14);
                        }
                    }
                    break Label_0765;
                }
                if (af == OCTokenTypes.IDENTIFIER) {
                    final PsiBuilder.Marker a10 = this.a7();
                    final PsiBuilder.Marker a11 = this.a7();
                    Label_0658: {
                        Label_0571: {
                            Label_0560: {
                                Label_0543: {
                                    try {
                                        this.a(OCTokenTypes.IDENTIFIER, "field name expected");
                                        this.b(a11, OCElementTypes.QUALIFIED_DESIGNATOR);
                                        if (this.aF() != OCTokenTypes.COLON) {
                                            break Label_0571;
                                        }
                                        final OCParsing ocParsing5 = this;
                                        final OCPunctuatorElementType ocPunctuatorElementType4 = OCTokenTypes.COLON;
                                        final String s = ": expected";
                                        ocParsing5.a(ocPunctuatorElementType4, s);
                                        final OCParsing ocParsing6 = this;
                                        final IElementType elementType4 = ocParsing6.aF();
                                        final OCPunctuatorElementType ocPunctuatorElementType5 = OCTokenTypes.LBRACE;
                                        if (elementType4 == ocPunctuatorElementType5) {
                                            break Label_0543;
                                        }
                                        break Label_0543;
                                    }
                                    catch (IllegalArgumentException ex15) {
                                        throw a(ex15);
                                    }
                                    try {
                                        final OCParsing ocParsing5 = this;
                                        final OCPunctuatorElementType ocPunctuatorElementType4 = OCTokenTypes.COLON;
                                        final String s = ": expected";
                                        ocParsing5.a(ocPunctuatorElementType4, s);
                                        final OCParsing ocParsing6 = this;
                                        final IElementType elementType4 = ocParsing6.aF();
                                        final OCPunctuatorElementType ocPunctuatorElementType5 = OCTokenTypes.LBRACE;
                                        if (elementType4 == ocPunctuatorElementType5) {
                                            this.ab();
                                            break Label_0560;
                                        }
                                    }
                                    catch (IllegalArgumentException ex16) {
                                        throw a(ex16);
                                    }
                                }
                                this.d(false);
                            }
                            this.b(a10, OCElementTypes.DESIGNATED_INITIALIZER);
                            break Label_0658;
                        }
                        a11.drop();
                        this.i(a10);
                        final PsiBuilder.Marker a12 = this.a7();
                        try {
                            if (!this.d(false)) {
                                this.a("missing }", this.BLOCK_STATEMENT_PARSER, OCElementTypes.UNKNOWN_CPP_CODE, OCTokenTypes.RBRACE);
                            }
                        }
                        catch (IllegalArgumentException ex17) {
                            throw a(ex17);
                        }
                        try {
                            if (this.aF() == OCTokenTypes.ELLIPSIS) {
                                this.aY();
                                a12.done((IElementType)OCElementTypes.CPP_VARIADIC_PACK_EXPRESSION);
                                break Label_0658;
                            }
                        }
                        catch (IllegalArgumentException ex18) {
                            throw a(ex18);
                        }
                        a12.drop();
                    }
                }
                else {
                    try {
                        if (af == OCTokenTypes.LBRACE) {
                            this.ab();
                            break Label_0765;
                        }
                    }
                    catch (IllegalArgumentException ex19) {
                        throw a(ex19);
                    }
                    try {
                        if (af == OCTokenTypes.RBRACE) {
                            break;
                        }
                    }
                    catch (IllegalArgumentException ex20) {
                        throw a(ex20);
                    }
                    final PsiBuilder.Marker a13 = this.a7();
                    try {
                        if (!this.d(false)) {
                            this.a("missing }", this.BLOCK_STATEMENT_PARSER, OCElementTypes.UNKNOWN_CPP_CODE, OCTokenTypes.RBRACE);
                        }
                    }
                    catch (IllegalArgumentException ex21) {
                        throw a(ex21);
                    }
                    try {
                        if (this.aF() == OCTokenTypes.ELLIPSIS) {
                            this.aY();
                            a13.done((IElementType)OCElementTypes.CPP_VARIADIC_PACK_EXPRESSION);
                            break Label_0765;
                        }
                    }
                    catch (IllegalArgumentException ex22) {
                        throw a(ex22);
                    }
                    a13.drop();
                }
                try {
                    if (this.aF() == OCTokenTypes.RBRACE) {
                        break;
                    }
                }
                catch (IllegalArgumentException ex23) {
                    throw a(ex23);
                }
            }
            try {
                if (this.aF() != OCTokenTypes.COMMA) {
                    this.a("',' or '}' expected", this.BLOCK_STATEMENT_PARSER, OCElementTypes.UNKNOWN_CPP_CODE, OCTokenTypes.RBRACE);
                    continue;
                }
            }
            catch (IllegalArgumentException ex24) {
                throw a(ex24);
            }
            this.aY();
        }
        this.a(OCTokenTypes.RBRACE, "missing }");
        this.b(a7, OCElementTypes.COMPOUND_INITIALIZER);
    }
    
    private DeclaratorParsingResult a(final boolean b, final DeclarationContext declarationContext) {
        return this.a(declarationContext, false, false, false, true, true, b, TypeParsingResult.TYPE_PARSED_FOR_SURE);
    }
    
    private DeclaratorParsingResult a(final DeclarationContext p0, final boolean p1, final boolean p2, final boolean p3, final boolean p4, final boolean p5, final boolean p6, final TypeParsingResult p7) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: iconst_1       
        //     1: istore          9
        //     3: aload_0        
        //     4: aconst_null    
        //     5: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //     8: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ARC_TYPE_QUALIFIERS:Lcom/intellij/psi/tree/TokenSet;
        //    11: aload_0        
        //    12: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    15: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    18: ifeq            49
        //    21: aload_1        
        //    22: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CODE_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //    25: if_acmpne       39
        //    28: goto            35
        //    31: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    34: athrow         
        //    35: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //    38: astore_1       
        //    39: aload_0        
        //    40: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    43: iconst_0       
        //    44: istore          9
        //    46: goto            8
        //    49: iconst_0       
        //    50: istore          10
        //    52: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CALL_CONVENTIONS:Lcom/intellij/psi/tree/TokenSet;
        //    55: aload_0        
        //    56: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    59: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    62: ifeq            68
        //    65: iconst_1       
        //    66: istore          10
        //    68: aload_0        
        //    69: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aG:()Z
        //    72: pop            
        //    73: aload_0        
        //    74: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    77: astore          11
        //    79: aload           11
        //    81: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.MUL:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    84: if_acmpeq       146
        //    87: aload           11
        //    89: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.XOR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    92: if_acmpeq       146
        //    95: goto            102
        //    98: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   101: athrow         
        //   102: aload_0        
        //   103: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   106: ifeq            162
        //   109: goto            116
        //   112: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   115: athrow         
        //   116: aload           11
        //   118: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   121: if_acmpeq       146
        //   124: goto            131
        //   127: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   130: athrow         
        //   131: aload           11
        //   133: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ANDAND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   136: if_acmpne       162
        //   139: goto            146
        //   142: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   145: athrow         
        //   146: aload_0        
        //   147: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   150: aload_0        
        //   151: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.v:()Z
        //   154: pop            
        //   155: goto            198
        //   158: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   161: athrow         
        //   162: aload_0        
        //   163: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   166: ifeq            249
        //   169: aload           11
        //   171: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   174: if_acmpne       249
        //   177: goto            184
        //   180: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   183: athrow         
        //   184: aload_0        
        //   185: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.V:()Z
        //   188: ifeq            249
        //   191: goto            198
        //   194: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   197: athrow         
        //   198: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TYPE_QUALIFIERS:Lcom/intellij/psi/tree/TokenSet;
        //   201: aload_0        
        //   202: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   205: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   208: ifeq            243
        //   211: goto            218
        //   214: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   217: athrow         
        //   218: aload_1        
        //   219: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CODE_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   222: if_acmpne       236
        //   225: goto            232
        //   228: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   231: athrow         
        //   232: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   235: astore_1       
        //   236: aload_0        
        //   237: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   240: goto            198
        //   243: iconst_0       
        //   244: istore          9
        //   246: goto            52
        //   249: iload           5
        //   251: ifeq            282
        //   254: aload_0        
        //   255: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   258: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELLIPSIS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   261: if_acmpne       282
        //   264: goto            271
        //   267: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   270: athrow         
        //   271: aload_0        
        //   272: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   275: goto            249
        //   278: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   281: athrow         
        //   282: aload_0        
        //   283: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   286: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   289: if_acmpne       639
        //   292: aload_1        
        //   293: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CPP_NEW_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   296: if_acmpeq       639
        //   299: goto            306
        //   302: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   305: athrow         
        //   306: aload           8
        //   308: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED_FOR_SURE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   311: if_acmpeq       346
        //   314: goto            321
        //   317: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   320: athrow         
        //   321: aload_1        
        //   322: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CODE_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   325: if_acmpne       346
        //   328: goto            335
        //   331: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   334: athrow         
        //   335: iload_2        
        //   336: ifeq            639
        //   339: goto            346
        //   342: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   345: athrow         
        //   346: iload           10
        //   348: ifne            372
        //   351: goto            358
        //   354: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   357: athrow         
        //   358: aload_1        
        //   359: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   362: if_acmpne       383
        //   365: goto            372
        //   368: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   371: athrow         
        //   372: aload_0        
        //   373: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   376: goto            384
        //   379: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   382: athrow         
        //   383: aconst_null    
        //   384: astore          11
        //   386: iload           10
        //   388: ifne            419
        //   391: aload_1        
        //   392: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   395: if_acmpne       438
        //   398: goto            405
        //   401: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   404: athrow         
        //   405: aload_0        
        //   406: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.J:()Z
        //   409: ifeq            438
        //   412: goto            419
        //   415: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   418: athrow         
        //   419: aload_0        
        //   420: aload           11
        //   422: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   425: aload_0        
        //   426: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.af:()V
        //   429: iconst_1       
        //   430: istore          10
        //   432: iconst_0       
        //   433: istore          9
        //   435: goto            636
        //   438: aload_0        
        //   439: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   442: aload_0        
        //   443: aload_1        
        //   444: iload_2        
        //   445: iload_3        
        //   446: iload           4
        //   448: iconst_1       
        //   449: iconst_1       
        //   450: iload           7
        //   452: aload           8
        //   454: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZZZZLcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //   457: astore          12
        //   459: aload           12
        //   461: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.FAIL_EMPTY:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //   464: if_acmpne       480
        //   467: aload_0        
        //   468: ldc             "Declarator expected"
        //   470: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   473: goto            480
        //   476: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   479: athrow         
        //   480: aload           12
        //   482: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.PARSED_EMPTY:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //   485: if_acmpne       548
        //   488: iload           6
        //   490: ifeq            517
        //   493: goto            500
        //   496: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   499: athrow         
        //   500: aload_0        
        //   501: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   504: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   507: if_acmpeq       548
        //   510: goto            517
        //   513: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   516: athrow         
        //   517: aload           11
        //   519: ifnull          542
        //   522: goto            529
        //   525: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   528: athrow         
        //   529: aload_0        
        //   530: aload           11
        //   532: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   535: goto            542
        //   538: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   541: athrow         
        //   542: iload           9
        //   544: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.fail:(Z)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //   547: areturn        
        //   548: aload_0        
        //   549: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   552: ldc             ") expected"
        //   554: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   557: pop            
        //   558: aload           11
        //   560: ifnull          604
        //   563: aload           12
        //   565: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.isEmpty:()Z
        //   568: ifeq            591
        //   571: goto            578
        //   574: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   577: athrow         
        //   578: aload_0        
        //   579: aload           11
        //   581: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   584: goto            607
        //   587: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   590: athrow         
        //   591: aload           11
        //   593: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   598: iconst_0       
        //   599: istore          9
        //   601: goto            607
        //   604: iconst_0       
        //   605: istore          9
        //   607: aload           12
        //   609: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.isOk:()Z
        //   612: ifne            625
        //   615: iload           9
        //   617: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.fail:(Z)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //   620: areturn        
        //   621: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   624: athrow         
        //   625: aload           12
        //   627: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.PARSED_FUNCTION:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //   630: if_acmpne       636
        //   633: iconst_1       
        //   634: istore          10
        //   636: goto            958
        //   639: aload_1        
        //   640: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   643: if_acmpne       769
        //   646: iload_2        
        //   647: ifne            958
        //   650: goto            657
        //   653: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   656: athrow         
        //   657: aload_0        
        //   658: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:()Lcom/intellij/psi/tree/IElementType;
        //   661: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   664: if_acmpne       958
        //   667: goto            674
        //   670: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   673: athrow         
        //   674: aload_0        
        //   675: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideTypeNameParsing:Z
        //   678: ifne            759
        //   681: goto            688
        //   684: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   687: athrow         
        //   688: iload           7
        //   690: ifeq            732
        //   693: goto            700
        //   696: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   699: athrow         
        //   700: aload_0        
        //   701: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLocalNameScope:Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope;
        //   704: aload_0        
        //   705: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   708: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   713: aload_0        
        //   714: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   717: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //   722: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.addTemplateValueParameter:(Ljava/lang/String;I)V
        //   725: goto            759
        //   728: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   731: athrow         
        //   732: aload_0        
        //   733: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLocalNameScope:Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope;
        //   736: aload_0        
        //   737: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   740: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   745: iconst_0       
        //   746: aload_0        
        //   747: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   750: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //   755: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.defineValue:(Ljava/lang/String;ZI)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   758: pop            
        //   759: aload_0        
        //   760: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   763: iconst_0       
        //   764: istore          9
        //   766: goto            958
        //   769: iload_2        
        //   770: ifne            958
        //   773: aload_0        
        //   774: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   777: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   780: if_acmpeq       851
        //   783: goto            790
        //   786: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   789: athrow         
        //   790: aload_0        
        //   791: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   794: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.OPERATOR_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   797: if_acmpeq       851
        //   800: goto            807
        //   803: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   806: athrow         
        //   807: aload_0        
        //   808: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.B:()Lcom/intellij/psi/tree/IElementType;
        //   811: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TILDE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   814: if_acmpeq       851
        //   817: goto            824
        //   820: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   823: athrow         
        //   824: aload_0        
        //   825: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   828: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   831: if_acmpeq       851
        //   834: goto            841
        //   837: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   840: athrow         
        //   841: iload           9
        //   843: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.fail:(Z)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //   846: areturn        
        //   847: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   850: athrow         
        //   851: iload_3        
        //   852: ifeq            873
        //   855: aload_0        
        //   856: ldc             "Expecting type name"
        //   858: iconst_0       
        //   859: iconst_0       
        //   860: iconst_0       
        //   861: iconst_0       
        //   862: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;ZZZZ)Ljava/lang/String;
        //   865: pop            
        //   866: goto            955
        //   869: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   872: athrow         
        //   873: aload_0        
        //   874: aload_0        
        //   875: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   878: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   883: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //   886: aload_0        
        //   887: aconst_null    
        //   888: iconst_1       
        //   889: iconst_0       
        //   890: aconst_null    
        //   891: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;ZZLjava/lang/String;)Ljava/util/List;
        //   894: astore          11
        //   896: aload           11
        //   898: ifnull          955
        //   901: aload           11
        //   903: invokeinterface java/util/List.size:()I
        //   908: iconst_1       
        //   909: if_icmple       955
        //   912: goto            919
        //   915: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   918: athrow         
        //   919: aload_0        
        //   920: aload           11
        //   922: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //   925: aload_0        
        //   926: aload           11
        //   928: aload           11
        //   930: invokeinterface java/util/List.size:()I
        //   935: iconst_1       
        //   936: isub           
        //   937: invokeinterface java/util/List.get:(I)Ljava/lang/Object;
        //   942: checkcast       Ljava/lang/String;
        //   945: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //   948: goto            955
        //   951: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   954: athrow         
        //   955: iconst_0       
        //   956: istore          9
        //   958: iconst_0       
        //   959: istore          11
        //   961: aload_0        
        //   962: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.v:()Z
        //   965: pop            
        //   966: aload_1        
        //   967: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CPP_NEW_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   970: if_acmpeq       990
        //   973: aload_0        
        //   974: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   977: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   980: if_acmpeq       1007
        //   983: goto            990
        //   986: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   989: athrow         
        //   990: aload_0        
        //   991: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   994: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   997: if_acmpne       1199
        //  1000: goto            1007
        //  1003: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1006: athrow         
        //  1007: aload_0        
        //  1008: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1011: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1014: if_acmpne       1184
        //  1017: goto            1024
        //  1020: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1023: athrow         
        //  1024: iconst_1       
        //  1025: istore          11
        //  1027: aload_0        
        //  1028: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //  1031: astore          12
        //  1033: aload_0        
        //  1034: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //  1037: astore          13
        //  1039: aload_0        
        //  1040: aload           12
        //  1042: aload           13
        //  1044: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/util/List;Ljava/lang/String;)V
        //  1047: iconst_1       
        //  1048: istore          14
        //  1050: iload           4
        //  1052: ifne            1073
        //  1055: aload_0        
        //  1056: aload_1        
        //  1057: iconst_0       
        //  1058: iconst_0       
        //  1059: iconst_1       
        //  1060: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZ)Z
        //  1063: ifne            1145
        //  1066: goto            1073
        //  1069: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1072: athrow         
        //  1073: aload_1        
        //  1074: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1077: if_acmpeq       1115
        //  1080: goto            1087
        //  1083: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1086: athrow         
        //  1087: aload_1        
        //  1088: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.STRUCT:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1091: if_acmpeq       1115
        //  1094: goto            1101
        //  1097: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1100: athrow         
        //  1101: aload_1        
        //  1102: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CODE_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1105: if_acmpne       1126
        //  1108: goto            1115
        //  1111: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1114: athrow         
        //  1115: aload_0        
        //  1116: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.af:()V
        //  1119: goto            1133
        //  1122: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1125: athrow         
        //  1126: aload_0        
        //  1127: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.NON_EXACT_VALUES:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //  1130: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;)V
        //  1133: aload_0        
        //  1134: iconst_0       
        //  1135: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.o:(Z)Z
        //  1138: pop            
        //  1139: iconst_1       
        //  1140: istore          10
        //  1142: iconst_0       
        //  1143: istore          14
        //  1145: aload_0        
        //  1146: aload           12
        //  1148: aload           13
        //  1150: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Ljava/util/List;Ljava/lang/String;)V
        //  1153: aload_0        
        //  1154: aload           12
        //  1156: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //  1159: aload_0        
        //  1160: aload           13
        //  1162: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //  1165: iload           14
        //  1167: ifeq            1181
        //  1170: aload_0        
        //  1171: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.R:()V
        //  1174: goto            1181
        //  1177: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1180: athrow         
        //  1181: goto            1188
        //  1184: aload_0        
        //  1185: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.Z:()V
        //  1188: aload_0        
        //  1189: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.v:()Z
        //  1192: pop            
        //  1193: iconst_0       
        //  1194: istore          9
        //  1196: goto            966
        //  1199: aload_0        
        //  1200: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //  1203: ifeq            1286
        //  1206: iload           11
        //  1208: ifne            1286
        //  1211: goto            1218
        //  1214: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1217: athrow         
        //  1218: iload           10
        //  1220: ifne            1286
        //  1223: goto            1230
        //  1226: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1229: athrow         
        //  1230: aload_0        
        //  1231: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1234: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1237: if_acmpne       1286
        //  1240: goto            1247
        //  1243: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1246: athrow         
        //  1247: aload_1        
        //  1248: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1251: if_acmpeq       1286
        //  1254: goto            1261
        //  1257: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1260: athrow         
        //  1261: aload_1        
        //  1262: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.TRAILING_RETURN_TYPE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1265: if_acmpeq       1286
        //  1268: goto            1275
        //  1271: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1274: athrow         
        //  1275: aload_0        
        //  1276: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ab:()V
        //  1279: goto            1286
        //  1282: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1285: athrow         
        //  1286: aload_0        
        //  1287: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1290: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CONST_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1293: if_acmpne       1410
        //  1296: aload_1        
        //  1297: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.STRUCT:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1300: if_acmpeq       1344
        //  1303: goto            1310
        //  1306: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1309: athrow         
        //  1310: aload_0        
        //  1311: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //  1314: ifnull          1355
        //  1317: goto            1324
        //  1320: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1323: athrow         
        //  1324: aload_0        
        //  1325: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //  1328: invokeinterface java/util/List.size:()I
        //  1333: iconst_1       
        //  1334: if_icmple       1355
        //  1337: goto            1344
        //  1340: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1343: athrow         
        //  1344: aload_0        
        //  1345: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1348: goto            1410
        //  1351: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1354: athrow         
        //  1355: aload_0        
        //  1356: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //  1359: astore          12
        //  1361: aload_0        
        //  1362: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1365: aload_0        
        //  1366: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1369: iconst_1       
        //  1370: iconst_0       
        //  1371: iconst_0       
        //  1372: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZ)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //  1375: astore          13
        //  1377: aload_0        
        //  1378: aload           12
        //  1380: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //  1383: aload           13
        //  1385: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult.PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationParsingResult;
        //  1388: if_acmpeq       1402
        //  1391: aload_0        
        //  1392: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1395: goto            1410
        //  1398: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1401: athrow         
        //  1402: iload           9
        //  1404: iload           10
        //  1406: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.parsed:(ZZ)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //  1409: areturn        
        //  1410: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TYPE_QUALIFIERS:Lcom/intellij/psi/tree/TokenSet;
        //  1413: aload_0        
        //  1414: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1417: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //  1420: ifeq            1434
        //  1423: aload_0        
        //  1424: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1427: goto            1410
        //  1430: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1433: athrow         
        //  1434: aload_0        
        //  1435: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //  1438: ifeq            1540
        //  1441: aload_1        
        //  1442: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.STRUCT:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1445: if_acmpeq       1483
        //  1448: goto            1455
        //  1451: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1454: athrow         
        //  1455: aload_1        
        //  1456: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1459: if_acmpeq       1483
        //  1462: goto            1469
        //  1465: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1468: athrow         
        //  1469: aload_1        
        //  1470: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1473: if_acmpne       1540
        //  1476: goto            1483
        //  1479: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1482: athrow         
        //  1483: iload           10
        //  1485: ifeq            1540
        //  1488: goto            1495
        //  1491: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1494: athrow         
        //  1495: aload_0        
        //  1496: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1499: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1502: if_acmpeq       1529
        //  1505: goto            1512
        //  1508: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1511: athrow         
        //  1512: aload_0        
        //  1513: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1516: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ANDAND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1519: if_acmpne       1540
        //  1522: goto            1529
        //  1525: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1528: athrow         
        //  1529: aload_0        
        //  1530: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1533: goto            1540
        //  1536: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1539: athrow         
        //  1540: aload_0        
        //  1541: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1544: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.THROW_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1547: if_acmpne       1561
        //  1550: aload_0        
        //  1551: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.p:()V
        //  1554: goto            1561
        //  1557: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1560: athrow         
        //  1561: aload_0        
        //  1562: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1565: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NOEXCEPT_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1568: if_acmpne       1582
        //  1571: aload_0        
        //  1572: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aH:()V
        //  1575: goto            1582
        //  1578: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1581: athrow         
        //  1582: aload_0        
        //  1583: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1586: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TRY_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1589: if_acmpne       1603
        //  1592: aload_0        
        //  1593: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1596: goto            1603
        //  1599: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1602: athrow         
        //  1603: aload_0        
        //  1604: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //  1607: astore          12
        //  1609: aload_0        
        //  1610: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //  1613: astore          13
        //  1615: aload_0        
        //  1616: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //  1619: ifeq            1767
        //  1622: iload           9
        //  1624: ifne            1767
        //  1627: goto            1634
        //  1630: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1633: athrow         
        //  1634: iload           10
        //  1636: ifeq            1767
        //  1639: goto            1646
        //  1642: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1645: athrow         
        //  1646: aload_0        
        //  1647: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1650: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DEREF:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1653: if_acmpne       1767
        //  1656: goto            1663
        //  1659: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1662: athrow         
        //  1663: aload_1        
        //  1664: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1667: if_acmpeq       1719
        //  1670: goto            1677
        //  1673: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1676: athrow         
        //  1677: aload_1        
        //  1678: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.STRUCT:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1681: if_acmpeq       1719
        //  1684: goto            1691
        //  1687: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1690: athrow         
        //  1691: aload_1        
        //  1692: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1695: if_acmpeq       1719
        //  1698: goto            1705
        //  1701: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1704: athrow         
        //  1705: aload_1        
        //  1706: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.TRAILING_RETURN_TYPE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1709: if_acmpne       1767
        //  1712: goto            1719
        //  1715: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1718: athrow         
        //  1719: aload_0        
        //  1720: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1723: aload_0        
        //  1724: iconst_0       
        //  1725: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myForceEagerMode:Z
        //  1728: aload_0        
        //  1729: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.TRAILING_RETURN_TYPE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1732: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.ANY:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //  1735: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;)Z
        //  1738: pop            
        //  1739: aload_0        
        //  1740: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1743: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CONST_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1746: if_acmpne       1767
        //  1749: goto            1756
        //  1752: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1755: athrow         
        //  1756: aload_0        
        //  1757: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1760: goto            1767
        //  1763: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1766: athrow         
        //  1767: aload_0        
        //  1768: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //  1771: ifeq            1907
        //  1774: aload_1        
        //  1775: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.TRAILING_RETURN_TYPE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1778: if_acmpeq       1907
        //  1781: goto            1788
        //  1784: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1787: athrow         
        //  1788: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CPP_VIRTUAL_SPECIFIERS:Lcom/intellij/psi/tree/TokenSet;
        //  1791: aload_0        
        //  1792: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1795: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //  1798: ifeq            1819
        //  1801: goto            1808
        //  1804: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1807: athrow         
        //  1808: aload_0        
        //  1809: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1812: goto            1767
        //  1815: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1818: athrow         
        //  1819: aload_0        
        //  1820: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1823: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1826: if_acmpne       1907
        //  1829: aload_0        
        //  1830: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //  1833: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //  1838: astore          14
        //  1840: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.OVERRIDE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //  1843: invokevirtual   com/jetbrains/cidr/lang/parser/OCKeywordElementType.getName:()Ljava/lang/String;
        //  1846: aload           14
        //  1848: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //  1851: ifeq            1872
        //  1854: aload_0        
        //  1855: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.OVERRIDE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //  1858: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;)V
        //  1861: aload_0        
        //  1862: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1865: goto            1904
        //  1868: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1871: athrow         
        //  1872: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.FINAL_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //  1875: invokevirtual   com/jetbrains/cidr/lang/parser/OCKeywordElementType.getName:()Ljava/lang/String;
        //  1878: aload           14
        //  1880: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //  1883: ifeq            1907
        //  1886: aload_0        
        //  1887: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.FINAL_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //  1890: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;)V
        //  1893: aload_0        
        //  1894: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1897: goto            1904
        //  1900: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1903: athrow         
        //  1904: goto            1767
        //  1907: aload_0        
        //  1908: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1911: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1914: if_acmpne       2049
        //  1917: aload_0        
        //  1918: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideLoop:Z
        //  1921: ifne            2049
        //  1924: goto            1931
        //  1927: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1930: athrow         
        //  1931: aload_0        
        //  1932: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideGenericAssociation:Z
        //  1935: ifne            2049
        //  1938: goto            1945
        //  1941: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1944: athrow         
        //  1945: aload_0        
        //  1946: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1949: aload_1        
        //  1950: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.STRUCT:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1953: if_acmpne       2030
        //  1956: goto            1963
        //  1959: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1962: athrow         
        //  1963: aload           8
        //  1965: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.isEmpty:()Z
        //  1968: ifeq            2023
        //  1971: goto            1978
        //  1974: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1977: athrow         
        //  1978: aload_0        
        //  1979: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1982: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1985: if_acmpeq       2012
        //  1988: goto            1995
        //  1991: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1994: athrow         
        //  1995: aload_0        
        //  1996: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1999: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  2002: if_acmpne       2023
        //  2005: goto            2012
        //  2008: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  2011: athrow         
        //  2012: aload_0        
        //  2013: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ax:()V
        //  2016: goto            2049
        //  2019: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  2022: athrow         
        //  2023: aload_0        
        //  2024: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.E:()V
        //  2027: goto            2049
        //  2030: aload           8
        //  2032: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.isEmpty:()Z
        //  2035: ifeq            2049
        //  2038: aload_0        
        //  2039: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ax:()V
        //  2042: goto            2049
        //  2045: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  2048: athrow         
        //  2049: aload_0        
        //  2050: aload           12
        //  2052: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //  2055: aload_0        
        //  2056: aload           13
        //  2058: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //  2061: iload           9
        //  2063: iload           10
        //  2065: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.parsed:(ZZ)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //  2068: areturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  8      28     31     35     Ljava/lang/IllegalArgumentException;
        //  79     95     98     102    Ljava/lang/IllegalArgumentException;
        //  87     109    112    116    Ljava/lang/IllegalArgumentException;
        //  102    124    127    131    Ljava/lang/IllegalArgumentException;
        //  116    139    142    146    Ljava/lang/IllegalArgumentException;
        //  131    158    158    162    Ljava/lang/IllegalArgumentException;
        //  162    177    180    184    Ljava/lang/IllegalArgumentException;
        //  169    191    194    198    Ljava/lang/IllegalArgumentException;
        //  184    211    214    218    Ljava/lang/IllegalArgumentException;
        //  198    225    228    232    Ljava/lang/IllegalArgumentException;
        //  249    264    267    271    Ljava/lang/IllegalArgumentException;
        //  254    278    278    282    Ljava/lang/IllegalArgumentException;
        //  282    299    302    306    Ljava/lang/IllegalArgumentException;
        //  292    314    317    321    Ljava/lang/IllegalArgumentException;
        //  306    328    331    335    Ljava/lang/IllegalArgumentException;
        //  321    339    342    346    Ljava/lang/IllegalArgumentException;
        //  335    351    354    358    Ljava/lang/IllegalArgumentException;
        //  346    365    368    372    Ljava/lang/IllegalArgumentException;
        //  358    379    379    383    Ljava/lang/IllegalArgumentException;
        //  386    398    401    405    Ljava/lang/IllegalArgumentException;
        //  391    412    415    419    Ljava/lang/IllegalArgumentException;
        //  459    473    476    480    Ljava/lang/IllegalArgumentException;
        //  480    493    496    500    Ljava/lang/IllegalArgumentException;
        //  488    510    513    517    Ljava/lang/IllegalArgumentException;
        //  500    522    525    529    Ljava/lang/IllegalArgumentException;
        //  517    535    538    542    Ljava/lang/IllegalArgumentException;
        //  548    571    574    578    Ljava/lang/IllegalArgumentException;
        //  563    587    587    591    Ljava/lang/IllegalArgumentException;
        //  607    621    621    625    Ljava/lang/IllegalArgumentException;
        //  639    650    653    657    Ljava/lang/IllegalArgumentException;
        //  646    667    670    674    Ljava/lang/IllegalArgumentException;
        //  657    681    684    688    Ljava/lang/IllegalArgumentException;
        //  674    693    696    700    Ljava/lang/IllegalArgumentException;
        //  688    728    728    732    Ljava/lang/IllegalArgumentException;
        //  769    783    786    790    Ljava/lang/IllegalArgumentException;
        //  773    800    803    807    Ljava/lang/IllegalArgumentException;
        //  790    817    820    824    Ljava/lang/IllegalArgumentException;
        //  807    834    837    841    Ljava/lang/IllegalArgumentException;
        //  824    847    847    851    Ljava/lang/IllegalArgumentException;
        //  851    869    869    873    Ljava/lang/IllegalArgumentException;
        //  896    912    915    919    Ljava/lang/IllegalArgumentException;
        //  901    948    951    955    Ljava/lang/IllegalArgumentException;
        //  966    983    986    990    Ljava/lang/IllegalArgumentException;
        //  973    1000   1003   1007   Ljava/lang/IllegalArgumentException;
        //  990    1017   1020   1024   Ljava/lang/IllegalArgumentException;
        //  1050   1066   1069   1073   Ljava/lang/IllegalArgumentException;
        //  1055   1080   1083   1087   Ljava/lang/IllegalArgumentException;
        //  1073   1094   1097   1101   Ljava/lang/IllegalArgumentException;
        //  1087   1108   1111   1115   Ljava/lang/IllegalArgumentException;
        //  1101   1122   1122   1126   Ljava/lang/IllegalArgumentException;
        //  1145   1174   1177   1181   Ljava/lang/IllegalArgumentException;
        //  1199   1211   1214   1218   Ljava/lang/IllegalArgumentException;
        //  1206   1223   1226   1230   Ljava/lang/IllegalArgumentException;
        //  1218   1240   1243   1247   Ljava/lang/IllegalArgumentException;
        //  1230   1254   1257   1261   Ljava/lang/IllegalArgumentException;
        //  1247   1268   1271   1275   Ljava/lang/IllegalArgumentException;
        //  1261   1279   1282   1286   Ljava/lang/IllegalArgumentException;
        //  1286   1303   1306   1310   Ljava/lang/IllegalArgumentException;
        //  1296   1317   1320   1324   Ljava/lang/IllegalArgumentException;
        //  1310   1337   1340   1344   Ljava/lang/IllegalArgumentException;
        //  1324   1351   1351   1355   Ljava/lang/IllegalArgumentException;
        //  1377   1398   1398   1402   Ljava/lang/IllegalArgumentException;
        //  1410   1430   1430   1434   Ljava/lang/IllegalArgumentException;
        //  1434   1448   1451   1455   Ljava/lang/IllegalArgumentException;
        //  1441   1462   1465   1469   Ljava/lang/IllegalArgumentException;
        //  1455   1476   1479   1483   Ljava/lang/IllegalArgumentException;
        //  1469   1488   1491   1495   Ljava/lang/IllegalArgumentException;
        //  1483   1505   1508   1512   Ljava/lang/IllegalArgumentException;
        //  1495   1522   1525   1529   Ljava/lang/IllegalArgumentException;
        //  1512   1533   1536   1540   Ljava/lang/IllegalArgumentException;
        //  1540   1554   1557   1561   Ljava/lang/IllegalArgumentException;
        //  1561   1575   1578   1582   Ljava/lang/IllegalArgumentException;
        //  1582   1596   1599   1603   Ljava/lang/IllegalArgumentException;
        //  1615   1627   1630   1634   Ljava/lang/IllegalArgumentException;
        //  1622   1639   1642   1646   Ljava/lang/IllegalArgumentException;
        //  1634   1656   1659   1663   Ljava/lang/IllegalArgumentException;
        //  1646   1670   1673   1677   Ljava/lang/IllegalArgumentException;
        //  1663   1684   1687   1691   Ljava/lang/IllegalArgumentException;
        //  1677   1698   1701   1705   Ljava/lang/IllegalArgumentException;
        //  1691   1712   1715   1719   Ljava/lang/IllegalArgumentException;
        //  1705   1749   1752   1756   Ljava/lang/IllegalArgumentException;
        //  1719   1760   1763   1767   Ljava/lang/IllegalArgumentException;
        //  1767   1781   1784   1788   Ljava/lang/IllegalArgumentException;
        //  1774   1801   1804   1808   Ljava/lang/IllegalArgumentException;
        //  1788   1815   1815   1819   Ljava/lang/IllegalArgumentException;
        //  1840   1868   1868   1872   Ljava/lang/IllegalArgumentException;
        //  1872   1897   1900   1904   Ljava/lang/IllegalArgumentException;
        //  1907   1924   1927   1931   Ljava/lang/IllegalArgumentException;
        //  1917   1938   1941   1945   Ljava/lang/IllegalArgumentException;
        //  1931   1956   1959   1963   Ljava/lang/IllegalArgumentException;
        //  1945   1971   1974   1978   Ljava/lang/IllegalArgumentException;
        //  1963   1988   1991   1995   Ljava/lang/IllegalArgumentException;
        //  1978   2005   2008   2012   Ljava/lang/IllegalArgumentException;
        //  1995   2019   2019   2023   Ljava/lang/IllegalArgumentException;
        //  2030   2042   2045   2049   Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0102:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void p() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_1       
        //     5: aload_0        
        //     6: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //     9: aload_0        
        //    10: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    13: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    16: if_acmpne       126
        //    19: aload_0        
        //    20: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    23: iconst_1       
        //    24: istore_2       
        //    25: aload_0        
        //    26: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.F:()Z
        //    29: ifne            116
        //    32: aload_0        
        //    33: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    36: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    39: if_acmpeq       116
        //    42: goto            49
        //    45: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    48: athrow         
        //    49: iload_2        
        //    50: ifne            77
        //    53: goto            60
        //    56: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    59: athrow         
        //    60: aload_0        
        //    61: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    64: ldc             "Expecting ','"
        //    66: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //    69: pop            
        //    70: goto            77
        //    73: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    76: athrow         
        //    77: iconst_0       
        //    78: istore_2       
        //    79: aload_0        
        //    80: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    83: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELLIPSIS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    86: if_acmpne       100
        //    89: aload_0        
        //    90: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    93: goto            25
        //    96: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    99: athrow         
        //   100: aload_0        
        //   101: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   104: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.ANY:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //   107: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;)Z
        //   110: ifne            25
        //   113: goto            116
        //   116: aload_0        
        //   117: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   120: ldc             "Expecting ')'"
        //   122: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   125: pop            
        //   126: aload_0        
        //   127: aload_1        
        //   128: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CPP_EXCEPTION_SPECIFICATION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   131: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   134: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  25     42     45     49     Ljava/lang/IllegalArgumentException;
        //  32     53     56     60     Ljava/lang/IllegalArgumentException;
        //  49     70     73     77     Ljava/lang/IllegalArgumentException;
        //  79     96     96     100    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0049:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void aH() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.NOEXCEPT_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.NOEXCEPT_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        try {
            this.aY();
            if (this.aF() == OCTokenTypes.LPAR) {
                this.aY();
                this.n(false);
                this.a(OCTokenTypes.RPAR, "Expecting ')'");
            }
        }
        catch (IllegalArgumentException ex3) {
            throw a(ex3);
        }
        this.b(a7, OCElementTypes.CPP_NOEXCEPT_SPECIFIER);
    }
    
    private void ax() {
        final PsiBuilder.Marker a7 = this.a7();
        boolean b = false;
        while (true) {
            try {
                if (this.F() || this.aF() == OCTokenTypes.LBRACE) {
                    break;
                }
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            this.i();
            b = false;
            if (this.aF() == OCTokenTypes.COMMA) {
                this.aY();
                b = true;
            }
            else {
                try {
                    if (this.aF() == OCTokenTypes.ELLIPSIS) {
                        this.aY();
                        break;
                    }
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
                if (this.aF() != OCTokenTypes.LBRACE) {
                    this.a("',' or '{' expected");
                    break;
                }
                continue;
            }
        }
        try {
            if (b) {
                this.a("Initializer expected");
            }
        }
        catch (IllegalArgumentException ex3) {
            throw a(ex3);
        }
        this.b(a7, OCElementTypes.CPP_CONSTRUCTOR_INITIALIZATION_LIST);
    }
    
    private void i() {
        final PsiBuilder.Marker a7 = this.a7();
        final PsiBuilder.Marker a8 = this.a7();
        Label_0139: {
            Label_0122: {
                Label_0098: {
                    try {
                        this.T();
                        this.b(a8, OCElementTypes.REFERENCE_ELEMENT);
                        if (this.aF() != OCTokenTypes.LPAR) {
                            break Label_0098;
                        }
                        this.R();
                        if (this.aF() != OCTokenTypes.SEMICOLON) {
                            break Label_0139;
                        }
                    }
                    catch (IllegalArgumentException ex) {
                        throw a(ex);
                    }
                    final PsiBuilder.Marker a9 = this.a7();
                    Label_0095: {
                        try {
                            this.aY();
                            if (this.aF() == OCTokenTypes.RPAR) {
                                this.aY();
                                a9.drop();
                                break Label_0095;
                            }
                        }
                        catch (IllegalArgumentException ex2) {
                            throw a(ex2);
                        }
                        this.i(a9);
                    }
                    break Label_0139;
                    try {
                        if (!this.myIsCppSupport) {
                            break Label_0122;
                        }
                        final OCParsing ocParsing = this;
                        final IElementType elementType = ocParsing.aF();
                        final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LBRACE;
                        if (elementType == ocPunctuatorElementType) {
                            break Label_0122;
                        }
                        break Label_0122;
                    }
                    catch (IllegalArgumentException ex3) {
                        throw a(ex3);
                    }
                }
                try {
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LBRACE;
                    if (elementType == ocPunctuatorElementType) {
                        this.ab();
                        break Label_0139;
                    }
                }
                catch (IllegalArgumentException ex4) {
                    throw a(ex4);
                }
            }
            this.a("Expecting '('");
        }
        this.b(a7, OCElementTypes.CPP_CONSTRUCTOR_FIELD_INITIALIZER);
    }
    
    private void a(final List<String> list, final String s) {
        final OCParsingNameScope myLocalNameScope = this.myLocalNameScope;
        Label_0093: {
            try {
                if (list == null || list.size() <= 1) {
                    break Label_0093;
                }
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            for (int n = list.size() - 1, i = 0; i < n; ++i) {
                final String s2 = list.get(i);
                try {
                    if (s2 != null) {
                        this.myLocalNameScope = this.myLocalNameScope.defineNamespace(s2);
                    }
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
            }
            break Label_0093;
            try {
                if (s != null) {
                    this.myLocalNameScope = this.myLocalNameScope.defineNamespace(s);
                }
            }
            catch (IllegalArgumentException ex3) {
                throw a(ex3);
            }
        }
        if (myLocalNameScope != this.myLocalNameScope) {
            for (final Pair<String, Integer> pair : myLocalNameScope.getTemplateValueParameters()) {
                this.myLocalNameScope.defineValue((String)pair.getFirst(), false, (int)pair.getSecond());
            }
            for (final Pair<String, Integer> pair2 : myLocalNameScope.getTemplateTypeParameters()) {
                this.myLocalNameScope.defineType((String)pair2.getFirst(), true, false, (int)pair2.getSecond());
            }
            myLocalNameScope.clearTemplateParameters();
        }
    }
    
    private void b(final List<String> list, final String s) {
        Label_0107: {
            try {
                if (list == null || list.size() <= 1) {
                    break Label_0107;
                }
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            for (int n = list.size() - 1, i = 0; i < n; ++i) {
                final String s2 = list.get(i);
                Logger logger = null;
                boolean b = false;
                Label_0094: {
                    Label_0085: {
                        try {
                            if (s2 == null) {
                                continue;
                            }
                            final OCParsing ocParsing = this;
                            final OCParsing ocParsing2 = this;
                            final OCParsingNameScope ocParsingNameScope = ocParsing2.myLocalNameScope;
                            final OCParsingNameScope ocParsingNameScope2 = ocParsingNameScope.getParent();
                            ocParsing.myLocalNameScope = ocParsingNameScope2;
                            logger = OCParsing.LOG;
                            final OCParsing ocParsing3 = this;
                            final OCParsingNameScope ocParsingNameScope3 = ocParsing3.myLocalNameScope;
                            if (ocParsingNameScope3 != null) {
                                break Label_0085;
                            }
                            break Label_0085;
                        }
                        catch (IllegalArgumentException ex2) {
                            throw a(ex2);
                        }
                        try {
                            final OCParsing ocParsing = this;
                            final OCParsing ocParsing2 = this;
                            final OCParsingNameScope ocParsingNameScope = ocParsing2.myLocalNameScope;
                            final OCParsingNameScope ocParsingNameScope2 = ocParsingNameScope.getParent();
                            ocParsing.myLocalNameScope = ocParsingNameScope2;
                            logger = OCParsing.LOG;
                            final OCParsing ocParsing3 = this;
                            final OCParsingNameScope ocParsingNameScope3 = ocParsing3.myLocalNameScope;
                            if (ocParsingNameScope3 != null) {
                                b = true;
                                break Label_0094;
                            }
                        }
                        catch (IllegalArgumentException ex3) {
                            throw a(ex3);
                        }
                    }
                    b = false;
                }
                logger.assertTrue(b);
            }
            return;
            try {
                if (s != null) {
                    this.myLocalNameScope = this.myLocalNameScope.getParent();
                }
            }
            catch (IllegalArgumentException ex4) {
                throw a(ex4);
            }
        }
    }
    
    private boolean b() {
        final PsiBuilder.Marker a7 = this.a7();
        final List<String> a8 = this.a(null, true, false, null);
        boolean b = false;
        Label_0033: {
            try {
                if (this.aF() == OCTokenTypes.LPAR) {
                    b = true;
                    break Label_0033;
                }
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            b = false;
        }
        final boolean b2 = b;
        try {
            this.i(a7);
            if (!b2 || a8 == null) {
                return false;
            }
        }
        catch (IllegalArgumentException ex2) {
            throw a(ex2);
        }
        final int size = a8.size();
        try {
            if (size > 1) {
                return a8.get(size - 1).equals(a8.get(size - 2));
            }
        }
        catch (IllegalArgumentException ex3) {
            throw a(ex3);
        }
        return false;
    }
    
    private boolean V() {
        final PsiBuilder.Marker a7 = this.a7();
        final List<String> a8 = this.a(null, true, false, null);
        Label_0067: {
            if (a8 != null) {
                final int size = a8.size();
                Label_0053: {
                    try {
                        if (size == 0) {
                            break Label_0067;
                        }
                        final String s = "*";
                        final Object o = a8;
                        final int n = size;
                        final int n2 = 1;
                        final int n3 = n - n2;
                        final Object o2 = ((List<Object>)o).get(n3);
                        final boolean b = s.equals(o2);
                        if (b) {
                            break Label_0053;
                        }
                        break Label_0067;
                    }
                    catch (IllegalArgumentException ex) {
                        throw a(ex);
                    }
                    try {
                        final String s = "*";
                        final Object o = a8;
                        final int n = size;
                        final int n2 = 1;
                        final int n3 = n - n2;
                        final Object o2 = ((List<Object>)o).get(n3);
                        final boolean b = s.equals(o2);
                        if (b) {
                            this.b(a7, OCElementTypes.CPP_QUALIFIED_POINTER);
                            return true;
                        }
                    }
                    catch (IllegalArgumentException ex2) {
                        throw a(ex2);
                    }
                }
            }
        }
        this.i(a7);
        return false;
    }
    
    private List<String> N() {
        return this.a(null, false, false, null);
    }
    
    private List<String> a(final boolean b, final boolean b2, final String s) {
        return this.a(OCParsingNameScope.getTypeKind(b), true, b2, s);
    }
    
    private List<String> T() {
        return this.a(null, true, false, null);
    }
    
    private List<String> a(final OCParsingNameScope.Kind kind, final boolean b, final boolean b2, final String s) {
        return this.a(kind, b, false, b2, s);
    }
    
    private List<String> a(final OCParsingNameScope.Kind kind, boolean b, final boolean b2, final boolean b3, final String s) {
        boolean b4 = false;
        PsiBuilder.Marker marker = this.a7();
        if (this.aF() == OCTokenTypes.TYPENAME_CPP_KEYWORD) {
            b = true;
            this.aY();
        }
        else if (this.aF() == OCTokenTypes.TEMPLATE_CPP_KEYWORD) {
            b4 = true;
            this.aY();
        }
        try {
            if (this.B() == OCTokenTypes.TILDE) {
                this.aY();
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        String tokenText = null;
        ArrayList<String> list = null;
        if (this.aF() == OCTokenTypes.COLON2X) {
            list = new ArrayList<String>();
            list.add("");
            this.aY();
        }
    Label_0354_Outer:
        while (true) {
            while (true) {
                Label_0133: {
                    OCParsing ocParsing = null;
                    String s2 = null;
                    Label_0132: {
                        Label_0124: {
                            try {
                                if (kind == null) {
                                    break Label_0133;
                                }
                                ocParsing = this;
                                s2 = s;
                                final OCParsingNameScope.Kind kind2 = kind;
                                final OCParsingNameScope.Kind kind3 = OCParsingNameScope.Kind.TEMPLATE_TYPE;
                                if (kind2 == kind3) {
                                    break Label_0124;
                                }
                                break Label_0132;
                            }
                            catch (IllegalArgumentException ex2) {
                                throw a(ex2);
                            }
                            try {
                                ocParsing = this;
                                s2 = s;
                                final OCParsingNameScope.Kind kind2 = kind;
                                final OCParsingNameScope.Kind kind3 = OCParsingNameScope.Kind.TEMPLATE_TYPE;
                                if (kind2 == kind3) {
                                    final boolean b5 = true;
                                    break Label_0133;
                                }
                            }
                            catch (IllegalArgumentException ex3) {
                                throw a(ex3);
                            }
                        }
                        break Label_0132;
                        while (true) {
                            Label_0393: {
                                try {
                                    if (this.aF() != OCTokenTypes.COLON2X) {
                                        break;
                                    }
                                    if (list != null) {
                                        break Label_0393;
                                    }
                                }
                                catch (IllegalArgumentException ex4) {
                                    throw a(ex4);
                                }
                                list = new ArrayList<String>();
                                list.add(tokenText);
                            }
                            this.b(marker, OCElementTypes.CPP_NAMESPACE_QUALIFIER);
                            marker = marker.precede();
                            this.aY();
                            boolean b6 = false;
                            if (this.aF() == OCTokenTypes.TYPENAME_CPP_KEYWORD) {
                                this.aY();
                                b6 = true;
                            }
                            if (this.aF() == OCTokenTypes.TEMPLATE_CPP_KEYWORD) {
                                this.aY();
                                b6 = true;
                            }
                            try {
                                if (this.B() == OCTokenTypes.TILDE) {
                                    this.aY();
                                }
                            }
                            catch (IllegalArgumentException ex5) {
                                throw a(ex5);
                            }
                            final IElementType af = this.aF();
                            try {
                                if (af == OCTokenTypes.OPERATOR_CPP_KEYWORD) {
                                    this.aY();
                                    this.aZ();
                                    list.add("operator");
                                    continue Label_0354_Outer;
                                }
                            }
                            catch (IllegalArgumentException ex6) {
                                throw a(ex6);
                            }
                            try {
                                if (af == OCTokenTypes.MUL) {
                                    list.add("*");
                                    this.aY();
                                    continue Label_0354_Outer;
                                }
                            }
                            catch (IllegalArgumentException ex7) {
                                throw a(ex7);
                            }
                            final String tokenText2 = this.myBuilder.getTokenText();
                            try {
                                if (tokenText2 != null) {
                                    list.add(tokenText2);
                                }
                            }
                            catch (IllegalArgumentException ex8) {
                                throw a(ex8);
                            }
                            try {
                                if (!this.a(OCTokenTypes.IDENTIFIER, "Expecting identifier")) {
                                    break;
                                }
                            }
                            catch (IllegalArgumentException ex9) {
                                throw a(ex9);
                            }
                            this.a(b, b2, b6, list);
                        }
                        marker.drop();
                        return list;
                    }
                    final boolean b5 = false;
                    try {
                        ocParsing.a(s2, b5, false, false, b3);
                        if (this.aF() == OCTokenTypes.LT) {
                            this.aE();
                        }
                        continue;
                    }
                    catch (IllegalArgumentException ex10) {
                        throw a(ex10);
                    }
                }
                if (this.aF() == OCTokenTypes.TEMPLATE_CPP_KEYWORD) {
                    this.aY();
                    b4 = true;
                }
                final IElementType af2 = this.aF();
                try {
                    if (af2 == OCTokenTypes.OPERATOR_CPP_KEYWORD) {
                        this.aY();
                        this.aZ();
                        this.a(b, b2, b4, "operator");
                        continue;
                    }
                }
                catch (IllegalArgumentException ex11) {
                    throw a(ex11);
                }
                Label_0240: {
                    try {
                        if (af2 == OCTokenTypes.IDENTIFIER) {
                            break Label_0240;
                        }
                        final OCParsing ocParsing2 = this;
                        final boolean b7 = ocParsing2.myIsObjCSupport;
                        if (b7) {
                            break Label_0240;
                        }
                        continue;
                    }
                    catch (IllegalArgumentException ex12) {
                        throw a(ex12);
                    }
                    try {
                        final OCParsing ocParsing2 = this;
                        final boolean b7 = ocParsing2.myIsObjCSupport;
                        if (!b7) {
                            continue;
                        }
                        if (!this.c(af2)) {
                            continue;
                        }
                    }
                    catch (IllegalArgumentException ex13) {
                        throw a(ex13);
                    }
                }
                final OCParsingNameScope.Kind i = this.i(false);
                tokenText = this.myBuilder.getTokenText();
                try {
                    if (list != null) {
                        list.add(tokenText);
                    }
                }
                catch (IllegalArgumentException ex14) {
                    throw a(ex14);
                }
                try {
                    if (af2 != OCTokenTypes.IDENTIFIER) {
                        this.a(OCTokenTypes.IDENTIFIER);
                    }
                }
                catch (IllegalArgumentException ex15) {
                    throw a(ex15);
                }
                try {
                    this.aY();
                    if (i == OCParsingNameScope.Kind.OBJC_INTERFACE) {
                        this.q(this.a8());
                        continue;
                    }
                }
                catch (IllegalArgumentException ex16) {
                    throw a(ex16);
                }
                break;
            }
            this.a(b, b2, b4, tokenText);
            continue Label_0354_Outer;
        }
    }
    
    private boolean a8() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_1       
        //     5: aload_0        
        //     6: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     9: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    12: if_acmpne       88
        //    15: aload_0        
        //    16: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    19: aload_0        
        //    20: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    23: astore_2       
        //    24: aload_2        
        //    25: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    28: if_acmpeq       15
        //    31: aload_2        
        //    32: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    35: if_acmpeq       15
        //    38: aload_0        
        //    39: aload_1        
        //    40: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //    43: aload_2        
        //    44: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    47: if_acmpeq       86
        //    50: aload_2        
        //    51: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GTGT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    54: if_acmpeq       86
        //    57: goto            64
        //    60: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    63: athrow         
        //    64: aload_2        
        //    65: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    68: if_acmpeq       86
        //    71: goto            78
        //    74: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    77: athrow         
        //    78: iconst_1       
        //    79: goto            87
        //    82: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    85: athrow         
        //    86: iconst_0       
        //    87: ireturn        
        //    88: aload_0        
        //    89: aload_1        
        //    90: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //    93: iconst_0       
        //    94: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  38     57     60     64     Ljava/lang/IllegalArgumentException;
        //  50     71     74     78     Ljava/lang/IllegalArgumentException;
        //  64     82     82     86     Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0064:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private <T> void a(final boolean p0, final boolean p1, final boolean p2, final T p3) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     4: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //     7: if_acmpne       185
        //    10: iload_1        
        //    11: ifne            32
        //    14: goto            21
        //    17: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    20: athrow         
        //    21: iload_3        
        //    22: ifeq            43
        //    25: goto            32
        //    28: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    31: athrow         
        //    32: aload_0        
        //    33: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aE:()V
        //    36: goto            185
        //    39: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    42: athrow         
        //    43: aload           4
        //    45: instanceof      Ljava/lang/String;
        //    48: ifeq            67
        //    51: aload_0        
        //    52: aload           4
        //    54: checkcast       Ljava/lang/String;
        //    57: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.c:(Ljava/lang/String;)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //    60: goto            76
        //    63: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    66: athrow         
        //    67: aload_0        
        //    68: aload           4
        //    70: checkcast       Ljava/util/List;
        //    73: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Ljava/util/List;)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //    76: astore          5
        //    78: aload           5
        //    80: invokestatic    com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.isTemplate:(Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;)Z
        //    83: istore          6
        //    85: aload           5
        //    87: invokestatic    com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.isValue:(Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;)Z
        //    90: istore          7
        //    92: iload_2        
        //    93: ifne            148
        //    96: iload           6
        //    98: ifne            174
        //   101: goto            108
        //   104: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   107: athrow         
        //   108: iload           7
        //   110: ifne            148
        //   113: goto            120
        //   116: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   119: athrow         
        //   120: aload_0        
        //   121: aload           5
        //   123: ifnonnull       141
        //   126: goto            133
        //   129: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   132: athrow         
        //   133: iconst_1       
        //   134: goto            142
        //   137: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   140: athrow         
        //   141: iconst_0       
        //   142: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.u:(Z)Z
        //   145: ifne            174
        //   148: iload_2        
        //   149: ifeq            185
        //   152: goto            159
        //   155: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   158: athrow         
        //   159: aload_0        
        //   160: iconst_1       
        //   161: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.u:(Z)Z
        //   164: ifeq            185
        //   167: goto            174
        //   170: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   173: athrow         
        //   174: aload_0        
        //   175: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aE:()V
        //   178: goto            185
        //   181: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   184: athrow         
        //   185: return         
        //    Signature:
        //  <T:Ljava/lang/Object;>(ZZZTT;)V
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      14     17     21     Ljava/lang/IllegalArgumentException;
        //  10     25     28     32     Ljava/lang/IllegalArgumentException;
        //  21     39     39     43     Ljava/lang/IllegalArgumentException;
        //  43     63     63     67     Ljava/lang/IllegalArgumentException;
        //  92     101    104    108    Ljava/lang/IllegalArgumentException;
        //  96     113    116    120    Ljava/lang/IllegalArgumentException;
        //  108    126    129    133    Ljava/lang/IllegalArgumentException;
        //  120    137    137    141    Ljava/lang/IllegalArgumentException;
        //  142    152    155    159    Ljava/lang/IllegalArgumentException;
        //  148    167    170    174    Ljava/lang/IllegalArgumentException;
        //  159    178    181    185    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0021:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean u(final boolean p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing.getCurrentComplexOffset:()J
        //     4: lstore_2       
        //     5: aload_0        
        //     6: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myTemplateArgumentListCache:Lgnu/trove/TLongByteHashMap;
        //     9: lload_2        
        //    10: invokevirtual   gnu/trove/TLongByteHashMap.containsKey:(J)Z
        //    13: ifeq            45
        //    16: aload_0        
        //    17: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myTemplateArgumentListCache:Lgnu/trove/TLongByteHashMap;
        //    20: lload_2        
        //    21: invokevirtual   gnu/trove/TLongByteHashMap.get:(J)B
        //    24: iconst_1       
        //    25: if_icmpne       43
        //    28: goto            35
        //    31: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    34: athrow         
        //    35: iconst_1       
        //    36: goto            44
        //    39: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    42: athrow         
        //    43: iconst_0       
        //    44: ireturn        
        //    45: aload_0        
        //    46: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    49: astore          4
        //    51: aload_0        
        //    52: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    55: aload_0        
        //    56: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.F:()Z
        //    59: ifne            319
        //    62: aload_0        
        //    63: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    66: astore          5
        //    68: aload_0        
        //    69: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    72: astore          6
        //    74: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.CPP_SPECIFIERS_FIRST:Lcom/intellij/psi/tree/TokenSet;
        //    77: aload           5
        //    79: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    82: ifeq            138
        //    85: iload_1        
        //    86: ifne            138
        //    89: goto            96
        //    92: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    95: athrow         
        //    96: aload_0        
        //    97: iconst_1       
        //    98: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Z)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   101: invokestatic    com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.isCppType:(Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;)Z
        //   104: ifeq            138
        //   107: goto            114
        //   110: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   113: athrow         
        //   114: aload_0        
        //   115: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   118: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   121: if_acmpeq       301
        //   124: goto            131
        //   127: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   130: athrow         
        //   131: goto            319
        //   134: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   137: athrow         
        //   138: iload_1        
        //   139: ifeq            301
        //   142: aload_0        
        //   143: aload           6
        //   145: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   148: aload_0        
        //   149: iconst_0       
        //   150: iconst_1       
        //   151: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.d:(ZZ)Z
        //   154: ifne            171
        //   157: goto            164
        //   160: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   163: athrow         
        //   164: goto            319
        //   167: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   170: athrow         
        //   171: aload_0        
        //   172: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   175: astore          5
        //   177: aload           5
        //   179: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELLIPSIS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   182: if_acmpne       195
        //   185: aload_0        
        //   186: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   189: aload_0        
        //   190: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   193: astore          5
        //   195: aload           5
        //   197: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   200: if_acmpne       282
        //   203: aload_0        
        //   204: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   207: aload_0        
        //   208: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   211: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   214: if_acmpeq       319
        //   217: goto            224
        //   220: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   223: athrow         
        //   224: aload_0        
        //   225: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   228: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   231: if_acmpeq       319
        //   234: goto            241
        //   237: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   240: athrow         
        //   241: aload_0        
        //   242: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   245: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   248: if_acmpeq       319
        //   251: goto            258
        //   254: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   257: athrow         
        //   258: aload_0        
        //   259: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   262: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   265: if_acmpne       301
        //   268: goto            275
        //   271: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   274: athrow         
        //   275: goto            319
        //   278: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   281: athrow         
        //   282: aload           5
        //   284: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   287: if_acmpne       301
        //   290: aload_0        
        //   291: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   294: goto            55
        //   297: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   300: athrow         
        //   301: aload_0        
        //   302: aload           4
        //   304: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   307: aload_0        
        //   308: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myTemplateArgumentListCache:Lgnu/trove/TLongByteHashMap;
        //   311: lload_2        
        //   312: iconst_0       
        //   313: invokevirtual   gnu/trove/TLongByteHashMap.put:(JB)B
        //   316: pop            
        //   317: iconst_0       
        //   318: ireturn        
        //   319: aload_0        
        //   320: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myTemplateArgumentListCache:Lgnu/trove/TLongByteHashMap;
        //   323: lload_2        
        //   324: iconst_1       
        //   325: invokevirtual   gnu/trove/TLongByteHashMap.put:(JB)B
        //   328: pop            
        //   329: aload_0        
        //   330: aload           4
        //   332: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   335: iconst_1       
        //   336: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      28     31     35     Ljava/lang/IllegalArgumentException;
        //  16     39     39     43     Ljava/lang/IllegalArgumentException;
        //  74     89     92     96     Ljava/lang/IllegalArgumentException;
        //  85     107    110    114    Ljava/lang/IllegalArgumentException;
        //  96     124    127    131    Ljava/lang/IllegalArgumentException;
        //  114    134    134    138    Ljava/lang/IllegalArgumentException;
        //  138    157    160    164    Ljava/lang/IllegalArgumentException;
        //  142    167    167    171    Ljava/lang/IllegalArgumentException;
        //  195    217    220    224    Ljava/lang/IllegalArgumentException;
        //  203    234    237    241    Ljava/lang/IllegalArgumentException;
        //  224    251    254    258    Ljava/lang/IllegalArgumentException;
        //  241    268    271    275    Ljava/lang/IllegalArgumentException;
        //  258    278    278    282    Ljava/lang/IllegalArgumentException;
        //  282    297    297    301    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0096:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void ag() {
        try {
            if (this.aF() == OCTokenTypes.COLON2X) {
                this.aY();
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        try {
            if (this.B() == OCTokenTypes.TILDE) {
                this.aY();
            }
        }
        catch (IllegalArgumentException ex2) {
            throw a(ex2);
        }
        Label_0073: {
            try {
                if (this.aF() != OCTokenTypes.IDENTIFIER) {
                    return;
                }
                final OCParsing ocParsing = this;
                ocParsing.aY();
                final OCParsing ocParsing2 = this;
                final IElementType elementType = ocParsing2.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.COLON2X;
                if (elementType == ocPunctuatorElementType) {
                    break Label_0073;
                }
                return;
            }
            catch (IllegalArgumentException ex3) {
                throw a(ex3);
            }
            try {
                final OCParsing ocParsing = this;
                ocParsing.aY();
                final OCParsing ocParsing2 = this;
                final IElementType elementType = ocParsing2.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.COLON2X;
                if (elementType == ocPunctuatorElementType) {
                    this.ag();
                }
            }
            catch (IllegalArgumentException ex4) {
                throw a(ex4);
            }
        }
    }
    
    private void aZ() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     4: astore_1       
        //     5: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.OVERLOADED_CPP_OPERATORS:Lcom/intellij/psi/tree/TokenSet;
        //     8: aload_1        
        //     9: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    12: ifne            29
        //    15: aload_1        
        //    16: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STRING_LITERAL:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    19: if_acmpne       217
        //    22: goto            29
        //    25: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    28: athrow         
        //    29: aload_0        
        //    30: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    33: aload_1        
        //    34: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STRING_LITERAL:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    37: if_acmpne       92
        //    40: goto            47
        //    43: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    46: athrow         
        //    47: aload_0        
        //    48: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    51: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    54: if_acmpeq       81
        //    57: goto            64
        //    60: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    63: athrow         
        //    64: aload_0        
        //    65: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    68: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.UDL_SUFFIX:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    71: if_acmpne       92
        //    74: goto            81
        //    77: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    80: athrow         
        //    81: aload_0        
        //    82: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    85: goto            222
        //    88: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    91: athrow         
        //    92: aload_1        
        //    93: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NEW_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //    96: if_acmpeq       113
        //    99: aload_1        
        //   100: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DELETE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   103: if_acmpne       151
        //   106: goto            113
        //   109: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   112: athrow         
        //   113: aload_0        
        //   114: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   117: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   120: if_acmpne       151
        //   123: goto            130
        //   126: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   129: athrow         
        //   130: aload_0        
        //   131: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   134: aload_0        
        //   135: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   138: ldc             "Expecting ']'"
        //   140: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   143: pop            
        //   144: goto            222
        //   147: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   150: athrow         
        //   151: aload_1        
        //   152: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   155: if_acmpne       175
        //   158: aload_0        
        //   159: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   162: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   165: if_acmpeq       206
        //   168: goto            175
        //   171: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   174: athrow         
        //   175: aload_1        
        //   176: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   179: if_acmpne       222
        //   182: goto            189
        //   185: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   188: athrow         
        //   189: aload_0        
        //   190: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   193: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   196: if_acmpne       222
        //   199: goto            206
        //   202: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   205: athrow         
        //   206: aload_0        
        //   207: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   210: goto            222
        //   213: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   216: athrow         
        //   217: aload_0        
        //   218: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.D:()Z
        //   221: pop            
        //   222: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      22     25     29     Ljava/lang/IllegalArgumentException;
        //  15     40     43     47     Ljava/lang/IllegalArgumentException;
        //  29     57     60     64     Ljava/lang/IllegalArgumentException;
        //  47     74     77     81     Ljava/lang/IllegalArgumentException;
        //  64     88     88     92     Ljava/lang/IllegalArgumentException;
        //  92     106    109    113    Ljava/lang/IllegalArgumentException;
        //  99     123    126    130    Ljava/lang/IllegalArgumentException;
        //  113    147    147    151    Ljava/lang/IllegalArgumentException;
        //  151    168    171    175    Ljava/lang/IllegalArgumentException;
        //  158    182    185    189    Ljava/lang/IllegalArgumentException;
        //  175    199    202    206    Ljava/lang/IllegalArgumentException;
        //  189    213    213    217    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0029:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void Z() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LBRACKET;
                if (elementType != ocPunctuatorElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LBRACKET;
                if (elementType != ocPunctuatorElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        this.aY();
    Label_0080:
        while (true) {
            Label_0069: {
                try {
                    if (this.aF() == OCTokenTypes.STATIC_KEYWORD) {
                        break Label_0069;
                    }
                    final TokenSet set = OCTokenTypes.TYPE_QUALIFIERS;
                    final OCParsing ocParsing2 = this;
                    final IElementType elementType2 = ocParsing2.aF();
                    final boolean b = set.contains(elementType2);
                    if (b) {
                        break Label_0069;
                    }
                    break Label_0080;
                }
                catch (IllegalArgumentException ex3) {
                    throw a(ex3);
                }
                try {
                    final TokenSet set = OCTokenTypes.TYPE_QUALIFIERS;
                    final OCParsing ocParsing2 = this;
                    final IElementType elementType2 = ocParsing2.aF();
                    final boolean b = set.contains(elementType2);
                    if (b) {
                        this.aY();
                        continue;
                    }
                }
                catch (IllegalArgumentException ex4) {
                    throw a(ex4);
                }
            }
            break;
        }
        Label_0127: {
            if (this.aF() == OCTokenTypes.MUL) {
                final PsiBuilder.Marker a7 = this.a7();
                try {
                    this.aY();
                    if (this.aF() != OCTokenTypes.RBRACKET) {
                        this.i(a7);
                        break Label_0127;
                    }
                }
                catch (IllegalArgumentException ex5) {
                    throw a(ex5);
                }
                a7.drop();
            }
            try {
                if (this.aF() != OCTokenTypes.RBRACKET) {
                    this.n(true);
                }
            }
            catch (IllegalArgumentException ex6) {
                throw a(ex6);
            }
        }
        this.a(OCTokenTypes.RBRACKET, "] missing");
    }
    
    private void aE() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.$assertionsDisabled:Z
        //     3: ifne            35
        //     6: aload_0        
        //     7: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    10: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    13: if_acmpeq       35
        //    16: goto            23
        //    19: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    22: athrow         
        //    23: new             Ljava/lang/AssertionError;
        //    26: dup            
        //    27: invokespecial   java/lang/AssertionError.<init>:()V
        //    30: athrow         
        //    31: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    34: athrow         
        //    35: aload_0        
        //    36: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    39: astore_1       
        //    40: aload_0        
        //    41: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    44: iconst_1       
        //    45: istore_2       
        //    46: aload_0        
        //    47: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.F:()Z
        //    50: ifne            120
        //    53: aload_0        
        //    54: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    57: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    60: if_acmpeq       120
        //    63: aload_0        
        //    64: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    67: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GTGT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    70: if_acmpeq       120
        //    73: goto            80
        //    76: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    79: athrow         
        //    80: iload_2        
        //    81: ifne            108
        //    84: goto            91
        //    87: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    90: athrow         
        //    91: aload_0        
        //    92: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    95: ldc             "Expecting ','"
        //    97: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   100: pop            
        //   101: goto            108
        //   104: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   107: athrow         
        //   108: iconst_0       
        //   109: istore_2       
        //   110: aload_0        
        //   111: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aN:()Z
        //   114: ifne            46
        //   117: goto            120
        //   120: aload_0        
        //   121: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.X:()V
        //   124: aload_0        
        //   125: aload_1        
        //   126: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.TEMPLATE_ARGUMENT_LIST:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   129: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   132: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      16     19     23     Ljava/lang/IllegalArgumentException;
        //  6      31     31     35     Ljava/lang/IllegalArgumentException;
        //  53     73     76     80     Ljava/lang/IllegalArgumentException;
        //  63     84     87     91     Ljava/lang/IllegalArgumentException;
        //  80     101    104    108    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0080:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean O() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing.getCurrentComplexOffset:()J
        //     4: lstore_1       
        //     5: aload_0        
        //     6: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myParseTypeFirstCache:Lgnu/trove/TLongByteHashMap;
        //     9: lload_1        
        //    10: invokevirtual   gnu/trove/TLongByteHashMap.containsKey:(J)Z
        //    13: ifeq            45
        //    16: aload_0        
        //    17: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myParseTypeFirstCache:Lgnu/trove/TLongByteHashMap;
        //    20: lload_1        
        //    21: invokevirtual   gnu/trove/TLongByteHashMap.get:(J)B
        //    24: iconst_1       
        //    25: if_icmpne       43
        //    28: goto            35
        //    31: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    34: athrow         
        //    35: iconst_1       
        //    36: goto            44
        //    39: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    42: athrow         
        //    43: iconst_0       
        //    44: ireturn        
        //    45: aload_0        
        //    46: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    49: astore_3       
        //    50: aload_0        
        //    51: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    54: astore          4
        //    56: aload_3        
        //    57: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    60: if_acmpeq       80
        //    63: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.CPP_SPECIFIERS_FIRST:Lcom/intellij/psi/tree/TokenSet;
        //    66: aload_3        
        //    67: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    70: ifeq            364
        //    73: goto            80
        //    76: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    79: athrow         
        //    80: aload_3        
        //    81: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    84: if_acmpeq       108
        //    87: goto            94
        //    90: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    93: athrow         
        //    94: aload_3        
        //    95: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    98: if_acmpne       122
        //   101: goto            108
        //   104: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   107: athrow         
        //   108: aload_0        
        //   109: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.f:()Z
        //   112: ifeq            364
        //   115: goto            122
        //   118: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   121: athrow         
        //   122: aload_3        
        //   123: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   126: if_acmpeq       175
        //   129: goto            136
        //   132: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   135: athrow         
        //   136: aload_3        
        //   137: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   140: if_acmpeq       175
        //   143: goto            150
        //   146: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   149: athrow         
        //   150: aload_3        
        //   151: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DECLTYPE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   154: if_acmpeq       175
        //   157: goto            164
        //   160: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   163: athrow         
        //   164: aload_0        
        //   165: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   168: goto            175
        //   171: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   174: athrow         
        //   175: aload_0        
        //   176: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   179: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   182: if_acmpne       352
        //   185: aload_0        
        //   186: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   189: aload_0        
        //   190: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   193: astore          6
        //   195: aload           6
        //   197: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   200: if_acmpeq       263
        //   203: aload           6
        //   205: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.MUL:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   208: if_acmpeq       263
        //   211: goto            218
        //   214: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   217: athrow         
        //   218: aload           6
        //   220: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.XOR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   223: if_acmpeq       263
        //   226: goto            233
        //   229: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   232: athrow         
        //   233: aload           6
        //   235: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   238: if_acmpeq       263
        //   241: goto            248
        //   244: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   247: athrow         
        //   248: aload           6
        //   250: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ANDAND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   253: if_acmpne       269
        //   256: goto            263
        //   259: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   262: athrow         
        //   263: iconst_1       
        //   264: istore          5
        //   266: goto            349
        //   269: aload           6
        //   271: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   274: if_acmpeq       295
        //   277: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.CPP_SPECIFIERS_FIRST:Lcom/intellij/psi/tree/TokenSet;
        //   280: aload           6
        //   282: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   285: ifeq            340
        //   288: goto            295
        //   291: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   294: athrow         
        //   295: aload           6
        //   297: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   300: if_acmpeq       325
        //   303: goto            310
        //   306: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   309: athrow         
        //   310: aload           6
        //   312: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   315: if_acmpne       346
        //   318: goto            325
        //   321: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   324: athrow         
        //   325: aload_0        
        //   326: iconst_1       
        //   327: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.r:(Z)Z
        //   330: ifne            346
        //   333: goto            340
        //   336: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   339: athrow         
        //   340: iconst_0       
        //   341: istore          5
        //   343: goto            349
        //   346: iconst_1       
        //   347: istore          5
        //   349: goto            355
        //   352: iconst_1       
        //   353: istore          5
        //   355: aload_0        
        //   356: aload           4
        //   358: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   361: goto            513
        //   364: aload_0        
        //   365: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   368: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.MUL:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   371: if_acmpeq       408
        //   374: aload_0        
        //   375: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   378: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   381: if_acmpeq       408
        //   384: goto            391
        //   387: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   390: athrow         
        //   391: aload_0        
        //   392: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   395: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ANDAND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   398: if_acmpne       504
        //   401: goto            408
        //   404: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   407: athrow         
        //   408: aload_0        
        //   409: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   412: aload_0        
        //   413: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   416: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   419: if_acmpeq       480
        //   422: goto            429
        //   425: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   428: athrow         
        //   429: aload_0        
        //   430: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   433: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   436: if_acmpeq       480
        //   439: goto            446
        //   442: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   445: athrow         
        //   446: aload_0        
        //   447: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   450: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   453: if_acmpeq       480
        //   456: goto            463
        //   459: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   462: athrow         
        //   463: aload_0        
        //   464: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   467: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GTGT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   470: if_acmpne       492
        //   473: goto            480
        //   476: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   479: athrow         
        //   480: aload_0        
        //   481: aload           4
        //   483: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   486: iconst_1       
        //   487: istore          5
        //   489: goto            513
        //   492: iconst_0       
        //   493: istore          5
        //   495: aload_0        
        //   496: aload           4
        //   498: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   501: goto            513
        //   504: iconst_0       
        //   505: istore          5
        //   507: aload_0        
        //   508: aload           4
        //   510: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   513: aload_0        
        //   514: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myParseUntilOffset:I
        //   517: ifne            551
        //   520: aload_0        
        //   521: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myParseTypeFirstCache:Lgnu/trove/TLongByteHashMap;
        //   524: lload_1        
        //   525: iload           5
        //   527: ifeq            545
        //   530: goto            537
        //   533: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   536: athrow         
        //   537: iconst_1       
        //   538: goto            546
        //   541: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   544: athrow         
        //   545: iconst_0       
        //   546: i2b            
        //   547: invokevirtual   gnu/trove/TLongByteHashMap.put:(JB)B
        //   550: pop            
        //   551: iload           5
        //   553: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      28     31     35     Ljava/lang/IllegalArgumentException;
        //  16     39     39     43     Ljava/lang/IllegalArgumentException;
        //  56     73     76     80     Ljava/lang/IllegalArgumentException;
        //  63     87     90     94     Ljava/lang/IllegalArgumentException;
        //  80     101    104    108    Ljava/lang/IllegalArgumentException;
        //  94     115    118    122    Ljava/lang/IllegalArgumentException;
        //  108    129    132    136    Ljava/lang/IllegalArgumentException;
        //  122    143    146    150    Ljava/lang/IllegalArgumentException;
        //  136    157    160    164    Ljava/lang/IllegalArgumentException;
        //  150    168    171    175    Ljava/lang/IllegalArgumentException;
        //  195    211    214    218    Ljava/lang/IllegalArgumentException;
        //  203    226    229    233    Ljava/lang/IllegalArgumentException;
        //  218    241    244    248    Ljava/lang/IllegalArgumentException;
        //  233    256    259    263    Ljava/lang/IllegalArgumentException;
        //  269    288    291    295    Ljava/lang/IllegalArgumentException;
        //  277    303    306    310    Ljava/lang/IllegalArgumentException;
        //  295    318    321    325    Ljava/lang/IllegalArgumentException;
        //  310    333    336    340    Ljava/lang/IllegalArgumentException;
        //  364    384    387    391    Ljava/lang/IllegalArgumentException;
        //  374    401    404    408    Ljava/lang/IllegalArgumentException;
        //  391    422    425    429    Ljava/lang/IllegalArgumentException;
        //  408    439    442    446    Ljava/lang/IllegalArgumentException;
        //  429    456    459    463    Ljava/lang/IllegalArgumentException;
        //  446    473    476    480    Ljava/lang/IllegalArgumentException;
        //  513    530    533    537    Ljava/lang/IllegalArgumentException;
        //  520    541    541    545    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0080:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean aN() {
        final boolean myIsInTemplateArgument = this.myIsInTemplateArgument;
        this.myIsInTemplateArgument = true;
        PsiBuilder.Marker a7 = this.a7();
        Label_0093: {
            Label_0061: {
                try {
                    if (!this.O()) {
                        break Label_0061;
                    }
                    if (this.aW()) {
                        break Label_0093;
                    }
                }
                catch (IllegalArgumentException ex) {
                    throw a(ex);
                }
                this.i(a7);
                a7 = null;
                try {
                    if (!this.Q()) {
                        this.myIsInTemplateArgument = myIsInTemplateArgument;
                        return false;
                    }
                    break Label_0093;
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
            }
            if (!this.Y()) {
                this.i(a7);
                a7 = null;
                try {
                    if (!this.aS()) {
                        this.myIsInTemplateArgument = myIsInTemplateArgument;
                        return false;
                    }
                }
                catch (IllegalArgumentException ex3) {
                    throw a(ex3);
                }
            }
            try {
                if (a7 != null) {
                    a7.drop();
                }
            }
            catch (IllegalArgumentException ex4) {
                throw a(ex4);
            }
        }
        this.myIsInTemplateArgument = myIsInTemplateArgument;
        return true;
    }
    
    private boolean aW() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing.getCurrentComplexOffset:()J
        //     4: lstore_1       
        //     5: aload_0        
        //     6: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myNonTypeExpressionsCache:Lgnu/trove/TLongHashSet;
        //     9: lload_1        
        //    10: invokevirtual   gnu/trove/TLongHashSet.contains:(J)Z
        //    13: ifeq            22
        //    16: iconst_0       
        //    17: ireturn        
        //    18: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    21: athrow         
        //    22: aload_0        
        //    23: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aS:()Z
        //    26: ifeq            88
        //    29: aload_0        
        //    30: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    33: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    36: if_acmpeq       80
        //    39: goto            46
        //    42: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    45: athrow         
        //    46: aload_0        
        //    47: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    50: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    53: if_acmpeq       80
        //    56: goto            63
        //    59: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    62: athrow         
        //    63: aload_0        
        //    64: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    67: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GTGT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    70: if_acmpne       88
        //    73: goto            80
        //    76: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    79: athrow         
        //    80: iconst_1       
        //    81: goto            89
        //    84: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    87: athrow         
        //    88: iconst_0       
        //    89: istore_3       
        //    90: iload_3        
        //    91: ifne            124
        //    94: aload_0        
        //    95: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myParseUntilOffset:I
        //    98: ifne            124
        //   101: goto            108
        //   104: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   107: athrow         
        //   108: aload_0        
        //   109: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myNonTypeExpressionsCache:Lgnu/trove/TLongHashSet;
        //   112: lload_1        
        //   113: invokevirtual   gnu/trove/TLongHashSet.add:(J)Z
        //   116: pop            
        //   117: goto            124
        //   120: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   123: athrow         
        //   124: iload_3        
        //   125: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      18     18     22     Ljava/lang/IllegalArgumentException;
        //  22     39     42     46     Ljava/lang/IllegalArgumentException;
        //  29     56     59     63     Ljava/lang/IllegalArgumentException;
        //  46     73     76     80     Ljava/lang/IllegalArgumentException;
        //  63     84     84     88     Ljava/lang/IllegalArgumentException;
        //  90     101    104    108    Ljava/lang/IllegalArgumentException;
        //  94     117    120    124    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0046:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean Y() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing.getCurrentComplexOffset:()J
        //     4: lstore_1       
        //     5: aload_0        
        //     6: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myNonConstantExprInTemplateCache:Lgnu/trove/TLongHashSet;
        //     9: lload_1        
        //    10: invokevirtual   gnu/trove/TLongHashSet.contains:(J)Z
        //    13: ifeq            22
        //    16: iconst_0       
        //    17: ireturn        
        //    18: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    21: athrow         
        //    22: aload_0        
        //    23: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.Q:()Z
        //    26: ifeq            105
        //    29: aload_0        
        //    30: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    33: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    36: if_acmpeq       97
        //    39: goto            46
        //    42: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    45: athrow         
        //    46: aload_0        
        //    47: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    50: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    53: if_acmpeq       97
        //    56: goto            63
        //    59: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    62: athrow         
        //    63: aload_0        
        //    64: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    67: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GTGT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    70: if_acmpeq       97
        //    73: goto            80
        //    76: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    79: athrow         
        //    80: aload_0        
        //    81: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    84: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELLIPSIS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    87: if_acmpne       105
        //    90: goto            97
        //    93: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    96: athrow         
        //    97: iconst_1       
        //    98: goto            106
        //   101: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   104: athrow         
        //   105: iconst_0       
        //   106: istore_3       
        //   107: iload_3        
        //   108: ifne            141
        //   111: aload_0        
        //   112: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myParseUntilOffset:I
        //   115: ifne            141
        //   118: goto            125
        //   121: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   124: athrow         
        //   125: aload_0        
        //   126: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myNonConstantExprInTemplateCache:Lgnu/trove/TLongHashSet;
        //   129: lload_1        
        //   130: invokevirtual   gnu/trove/TLongHashSet.add:(J)Z
        //   133: pop            
        //   134: goto            141
        //   137: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   140: athrow         
        //   141: iload_3        
        //   142: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      18     18     22     Ljava/lang/IllegalArgumentException;
        //  22     39     42     46     Ljava/lang/IllegalArgumentException;
        //  29     56     59     63     Ljava/lang/IllegalArgumentException;
        //  46     73     76     80     Ljava/lang/IllegalArgumentException;
        //  63     90     93     97     Ljava/lang/IllegalArgumentException;
        //  80     101    101    105    Ljava/lang/IllegalArgumentException;
        //  107    118    121    125    Ljava/lang/IllegalArgumentException;
        //  111    134    137    141    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0046:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean f() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: iconst_1       
        //     2: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Z)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //     5: astore_1       
        //     6: aload_1        
        //     7: invokestatic    com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.isType:(Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;)Z
        //    10: ifne            92
        //    13: aload_1        
        //    14: ifnonnull       100
        //    17: goto            24
        //    20: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    23: athrow         
        //    24: aload_0        
        //    25: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    28: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    31: if_acmpeq       92
        //    34: goto            41
        //    37: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    40: athrow         
        //    41: aload_0        
        //    42: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    45: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    48: if_acmpeq       92
        //    51: goto            58
        //    54: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    57: athrow         
        //    58: aload_0        
        //    59: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    62: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GTGT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    65: if_acmpeq       92
        //    68: goto            75
        //    71: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    74: athrow         
        //    75: aload_0        
        //    76: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    79: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELLIPSIS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    82: if_acmpne       100
        //    85: goto            92
        //    88: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    91: athrow         
        //    92: iconst_1       
        //    93: goto            101
        //    96: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    99: athrow         
        //   100: iconst_0       
        //   101: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  6      17     20     24     Ljava/lang/IllegalArgumentException;
        //  13     34     37     41     Ljava/lang/IllegalArgumentException;
        //  24     51     54     58     Ljava/lang/IllegalArgumentException;
        //  41     68     71     75     Ljava/lang/IllegalArgumentException;
        //  58     85     88     92     Ljava/lang/IllegalArgumentException;
        //  75     96     96     100    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0024:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void ap() {
        final PsiBuilder.Marker a7 = this.a7();
        while (true) {
            try {
                if (this.F() || this.aF() == OCTokenTypes.LBRACE) {
                    break;
                }
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            final PsiBuilder.Marker a8 = this.a7();
            this.aG();
            final TypeParsingResult b = this.b(DeclarationContext.PARAMETER_LIST);
            try {
                if (b == TypeParsingResult.NONE) {
                    a8.drop();
                    break;
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
            Label_0130: {
                if (this.aF() != OCTokenTypes.LBRACE) {
                    final DeclaratorsParsingResult a9 = this.a(DeclarationContext.PARAMETER_LIST, false, false, TypeParsingResult.TYPE_PARSED_FOR_SURE, null);
                    Label_0117: {
                        try {
                            if (!b.isEmpty()) {
                                break Label_0130;
                            }
                            final DeclaratorsParsingResult declaratorsParsingResult = a9;
                            final DeclaratorsParsingResult.Type type = declaratorsParsingResult.myType;
                            final boolean b2 = type.isOk();
                            if (!b2) {
                                break Label_0117;
                            }
                            break Label_0130;
                        }
                        catch (IllegalArgumentException ex3) {
                            throw a(ex3);
                        }
                        try {
                            final DeclaratorsParsingResult declaratorsParsingResult = a9;
                            final DeclaratorsParsingResult.Type type = declaratorsParsingResult.myType;
                            final boolean b2 = type.isOk();
                            if (!b2) {
                                a8.drop();
                                break;
                            }
                        }
                        catch (IllegalArgumentException ex4) {
                            throw a(ex4);
                        }
                    }
                }
            }
            this.a(OCTokenTypes.SEMICOLON, "Expecting ';'");
            this.b(a8, OCElementTypes.PARAMETER_DECLARATION);
        }
        this.b(a7, OCElementTypes.PARAMETER_LIST);
    }
    
    private void af() {
        this.b(TypeParsingExpectation.ANY);
    }
    
    private void b(final TypeParsingExpectation typeParsingExpectation) {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LPAR;
                if (elementType != ocPunctuatorElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LPAR;
                if (elementType != ocPunctuatorElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        this.aY();
        int n = 1;
        while (!this.F()) {
            Label_0074: {
                try {
                    if (this.aF() == OCTokenTypes.RPAR) {
                        break;
                    }
                    final int n2 = n;
                    if (n2 == 0) {
                        break Label_0074;
                    }
                    break Label_0074;
                }
                catch (IllegalArgumentException ex3) {
                    throw a(ex3);
                }
                try {
                    final int n2 = n;
                    if (n2 == 0) {
                        this.a(OCTokenTypes.COMMA, "Expecting ','");
                    }
                }
                catch (IllegalArgumentException ex4) {
                    throw a(ex4);
                }
            }
            n = 0;
            try {
                if (this.aF() == OCTokenTypes.RPAR) {
                    this.a("Expecting parameter");
                    break;
                }
            }
            catch (IllegalArgumentException ex5) {
                throw a(ex5);
            }
            if (this.aF() == OCTokenTypes.ELLIPSIS) {
                final PsiBuilder.Marker a8 = this.a7();
                final PsiBuilder.Marker a9 = this.a7();
                this.aY();
                this.b(a9, OCElementTypes.DECLARATOR);
                this.b(a8, OCElementTypes.PARAMETER_DECLARATION);
                break;
            }
            if (!this.a(false, typeParsingExpectation)) {
                break;
            }
        }
        this.a(OCTokenTypes.RPAR, ") expected");
        this.b(a7, OCElementTypes.PARAMETER_LIST);
    }
    
    private boolean a(final boolean b) {
        return this.a(b, TypeParsingExpectation.ANY);
    }
    
    private boolean a(final boolean p0, final TypeParsingExpectation p1) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_3       
        //     5: aload_0        
        //     6: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aG:()Z
        //     9: pop            
        //    10: aload_0        
        //    11: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //    14: aconst_null    
        //    15: iconst_0       
        //    16: iconst_0       
        //    17: iconst_0       
        //    18: iconst_0       
        //    19: iconst_1       
        //    20: aload_2        
        //    21: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;Ljava/lang/String;ZZZZZLcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;)Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //    24: astore          4
        //    26: aload           4
        //    28: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //    31: if_acmpne       46
        //    34: aload_3        
        //    35: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //    40: iconst_0       
        //    41: ireturn        
        //    42: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    45: athrow         
        //    46: aload_0        
        //    47: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    50: astore          5
        //    52: aload_0        
        //    53: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    56: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    59: if_acmpeq       131
        //    62: aload_0        
        //    63: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    66: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    69: if_acmpeq       131
        //    72: goto            79
        //    75: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    78: athrow         
        //    79: aload_0        
        //    80: iload_1        
        //    81: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //    84: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(ZLcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //    87: astore          6
        //    89: aload           4
        //    91: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.isEmpty:()Z
        //    94: ifeq            131
        //    97: aload           6
        //    99: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.isEmpty:()Z
        //   102: ifeq            131
        //   105: goto            112
        //   108: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   111: athrow         
        //   112: aload           5
        //   114: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   119: aload_3        
        //   120: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   125: iconst_0       
        //   126: ireturn        
        //   127: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   130: athrow         
        //   131: aload_0        
        //   132: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   135: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.__ASM_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   138: if_acmpeq       158
        //   141: aload_0        
        //   142: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   145: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.__ATTRIBUTE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   148: if_acmpne       170
        //   151: goto            158
        //   154: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   157: athrow         
        //   158: aload_0        
        //   159: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a2:()Z
        //   162: pop            
        //   163: goto            131
        //   166: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   169: athrow         
        //   170: aload_0        
        //   171: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.v:()Z
        //   174: pop            
        //   175: aload_0        
        //   176: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   179: ifeq            232
        //   182: aload_0        
        //   183: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   186: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EQ:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   189: if_acmpne       232
        //   192: goto            199
        //   195: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   198: athrow         
        //   199: aload_0        
        //   200: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   203: iload_1        
        //   204: ifeq            226
        //   207: goto            214
        //   210: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   213: athrow         
        //   214: aload_0        
        //   215: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.Q:()Z
        //   218: pop            
        //   219: goto            232
        //   222: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   225: athrow         
        //   226: aload_0        
        //   227: iconst_0       
        //   228: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.d:(Z)Z
        //   231: pop            
        //   232: aload_0        
        //   233: aload           5
        //   235: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DECLARATOR:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   238: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   241: aload_0        
        //   242: aload_3        
        //   243: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.PARAMETER_DECLARATION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   246: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   249: iconst_1       
        //   250: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  26     42     42     46     Ljava/lang/IllegalArgumentException;
        //  52     72     75     79     Ljava/lang/IllegalArgumentException;
        //  89     105    108    112    Ljava/lang/IllegalArgumentException;
        //  97     127    127    131    Ljava/lang/IllegalArgumentException;
        //  131    151    154    158    Ljava/lang/IllegalArgumentException;
        //  141    166    166    170    Ljava/lang/IllegalArgumentException;
        //  170    192    195    199    Ljava/lang/IllegalArgumentException;
        //  182    207    210    214    Ljava/lang/IllegalArgumentException;
        //  199    222    222    226    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0199:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private TypeParsingResult b(final DeclarationContext declarationContext) {
        return this.a(declarationContext, false, false, false, TypeParsingExpectation.ANY);
    }
    
    private TypeParsingResult a(final DeclarationContext p0, final boolean p1, final boolean p2, final boolean p3, final TypeParsingExpectation p4) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_1        
        //     1: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CODE_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //     4: if_acmpne       52
        //     7: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.CPP_SPECIFIERS_FIRST:Lcom/intellij/psi/tree/TokenSet;
        //    10: aload_0        
        //    11: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    14: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    17: ifne            52
        //    20: goto            27
        //    23: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    26: athrow         
        //    27: aload_0        
        //    28: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    31: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    34: if_acmpeq       52
        //    37: goto            44
        //    40: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    43: athrow         
        //    44: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //    47: areturn        
        //    48: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    51: athrow         
        //    52: aload_0        
        //    53: aload_1        
        //    54: aconst_null    
        //    55: iload_2        
        //    56: iload_3        
        //    57: iload           4
        //    59: iconst_0       
        //    60: iconst_1       
        //    61: aload           5
        //    63: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;Ljava/lang/String;ZZZZZLcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;)Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //    66: areturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      20     23     27     Ljava/lang/IllegalArgumentException;
        //  7      37     40     44     Ljava/lang/IllegalArgumentException;
        //  27     48     48     52     Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0027:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean ad() {
        try {
            if (OCParsing.CPP_ACCESS_SPECIFIERS.contains(this.aF())) {
                this.aY();
                this.a(OCTokenTypes.COLON, "':' expected");
                return true;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        return false;
    }
    
    private TypeParsingResult a(final boolean b, final DeclarationContext declarationContext, final TypeParsingExpectation typeParsingExpectation) {
        try {
            if (declarationContext == DeclarationContext.TRAILING_RETURN_TYPE) {
                final DeclarationContext code_BLOCK = declarationContext;
                return this.a(code_BLOCK, null, false, false, false, false, b, typeParsingExpectation);
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        final DeclarationContext code_BLOCK = DeclarationContext.CODE_BLOCK;
        return this.a(code_BLOCK, null, false, false, false, false, b, typeParsingExpectation);
    }
    
    private TypeParsingResult a(final DeclarationContext p0, final String p1, final boolean p2, final boolean p3, final boolean p4, final boolean p5, final boolean p6, final TypeParsingExpectation p7) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore          9
        //     6: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //     9: astore          10
        //    11: iconst_0       
        //    12: istore          11
        //    14: iconst_0       
        //    15: istore          12
        //    17: iconst_0       
        //    18: istore          13
        //    20: aconst_null    
        //    21: astore          14
        //    23: aload_0        
        //    24: iconst_0       
        //    25: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.o:(Z)Z
        //    28: pop            
        //    29: aload_0        
        //    30: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    33: astore          15
        //    35: aload_1        
        //    36: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.STRUCT:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //    39: if_acmpne       113
        //    42: iload_3        
        //    43: ifne            113
        //    46: goto            53
        //    49: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    52: athrow         
        //    53: aload           15
        //    55: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    58: if_acmpne       113
        //    61: goto            68
        //    64: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    67: athrow         
        //    68: aload_0        
        //    69: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //    72: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //    77: aload_2        
        //    78: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //    81: ifeq            113
        //    84: goto            91
        //    87: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    90: athrow         
        //    91: aload_0        
        //    92: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.as:()Z
        //    95: ifeq            140
        //    98: goto            105
        //   101: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   104: athrow         
        //   105: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.EMPTY_TYPE_PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   108: astore          10
        //   110: goto            1706
        //   113: iload_3        
        //   114: ifne            140
        //   117: aload           15
        //   119: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TILDE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   122: if_acmpne       140
        //   125: goto            132
        //   128: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   131: athrow         
        //   132: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.EMPTY_TYPE_PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   135: astore          10
        //   137: goto            1706
        //   140: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.BULLSHIT_TYPE_MODIFIERS:Lcom/intellij/psi/tree/TokenSet;
        //   143: aload           15
        //   145: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   148: ifeq            241
        //   151: iload           13
        //   153: aload           15
        //   155: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TYPENAME_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   158: if_acmpne       176
        //   161: goto            168
        //   164: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   167: athrow         
        //   168: iconst_1       
        //   169: goto            177
        //   172: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   175: athrow         
        //   176: iconst_0       
        //   177: ior            
        //   178: istore          13
        //   180: aload_0        
        //   181: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   184: aload           15
        //   186: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ATOMIC_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   189: if_acmpne       219
        //   192: aload_0        
        //   193: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   196: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   199: if_acmpne       219
        //   202: goto            209
        //   205: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   208: athrow         
        //   209: aload_0        
        //   210: iconst_0       
        //   211: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.t:(Z)V
        //   214: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED_FOR_SURE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   217: astore          10
        //   219: iconst_0       
        //   220: invokestatic    java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
        //   223: astore          14
        //   225: aload           10
        //   227: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.UNKNOWN:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   230: if_acmpne       1703
        //   233: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   236: astore          10
        //   238: goto            1703
        //   241: aload           15
        //   243: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TYPEOF_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   246: if_acmpeq       264
        //   249: aload           15
        //   251: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DECLTYPE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   254: if_acmpne       302
        //   257: goto            264
        //   260: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   263: athrow         
        //   264: iload           12
        //   266: ifeq            289
        //   269: goto            276
        //   272: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   275: athrow         
        //   276: aload_0        
        //   277: ldc             "Expecting ';'"
        //   279: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   282: goto            1706
        //   285: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   288: athrow         
        //   289: aload_0        
        //   290: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ah:()Z
        //   293: pop            
        //   294: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   297: astore          10
        //   299: goto            1706
        //   302: aload           15
        //   304: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALIGNAS_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   307: if_acmpeq       325
        //   310: aload           15
        //   312: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALIGNAS_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   315: if_acmpne       340
        //   318: goto            325
        //   321: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   324: athrow         
        //   325: aload_0        
        //   326: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   329: aload_0        
        //   330: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.M:()V
        //   333: goto            1703
        //   336: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   339: athrow         
        //   340: aload           15
        //   342: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.UNDERLYING_TYPE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   345: if_acmpne       365
        //   348: aload_0        
        //   349: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   352: aload_0        
        //   353: iconst_0       
        //   354: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.t:(Z)V
        //   357: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED_FOR_SURE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   360: astore          10
        //   362: goto            1703
        //   365: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TYPE_SPECIFIERS:Lcom/intellij/psi/tree/TokenSet;
        //   368: aload           15
        //   370: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   373: ifne            421
        //   376: aload           15
        //   378: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   381: if_acmpeq       421
        //   384: goto            391
        //   387: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   390: athrow         
        //   391: aload           15
        //   393: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   396: if_acmpeq       421
        //   399: goto            406
        //   402: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   405: athrow         
        //   406: aload           15
        //   408: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.OPERATOR_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   411: if_acmpne       1706
        //   414: goto            421
        //   417: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   420: athrow         
        //   421: iconst_0       
        //   422: istore          16
        //   424: aload           15
        //   426: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   429: if_acmpeq       477
        //   432: aload           15
        //   434: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.OPERATOR_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   437: if_acmpeq       477
        //   440: goto            447
        //   443: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   446: athrow         
        //   447: aload           15
        //   449: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   452: if_acmpeq       477
        //   455: goto            462
        //   458: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   461: athrow         
        //   462: aload           15
        //   464: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   467: if_acmpne       1419
        //   470: goto            477
        //   473: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   476: athrow         
        //   477: aload           10
        //   479: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   482: if_acmpeq       499
        //   485: goto            492
        //   488: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   491: athrow         
        //   492: goto            1706
        //   495: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   498: athrow         
        //   499: aload_0        
        //   500: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   503: astore          17
        //   505: iload           13
        //   507: ifeq            516
        //   510: iconst_1       
        //   511: istore          11
        //   513: goto            703
        //   516: aload_0        
        //   517: iconst_0       
        //   518: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Z)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   521: astore          18
        //   523: aload           18
        //   525: invokestatic    com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.isValue:(Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;)Z
        //   528: ifeq            554
        //   531: aload           18
        //   533: getstatic       com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind.UNKNOWN:Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   536: if_acmpeq       554
        //   539: goto            546
        //   542: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   545: athrow         
        //   546: iconst_1       
        //   547: goto            555
        //   550: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   553: athrow         
        //   554: iconst_0       
        //   555: istore          19
        //   557: aload           18
        //   559: invokestatic    com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.isType:(Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;)Z
        //   562: istore          20
        //   564: iload           20
        //   566: ifeq            589
        //   569: iload           19
        //   571: ifne            589
        //   574: goto            581
        //   577: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   580: athrow         
        //   581: iconst_1       
        //   582: goto            590
        //   585: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   588: athrow         
        //   589: iconst_0       
        //   590: istore          11
        //   592: aload           18
        //   594: invokestatic    com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.isCppType:(Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;)Z
        //   597: istore          13
        //   599: aload           18
        //   601: ifnonnull       622
        //   604: aload           14
        //   606: ifnonnull       622
        //   609: goto            616
        //   612: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   615: athrow         
        //   616: iconst_1       
        //   617: invokestatic    java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
        //   620: astore          14
        //   622: aload           8
        //   624: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.NON_VALUES:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //   627: if_acmpne       642
        //   630: iload           19
        //   632: ifne            681
        //   635: goto            642
        //   638: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   641: athrow         
        //   642: aload           8
        //   644: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.NON_EXACT_VALUES:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //   647: if_acmpne       703
        //   650: goto            657
        //   653: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   656: athrow         
        //   657: iload           19
        //   659: ifeq            703
        //   662: goto            669
        //   665: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   668: athrow         
        //   669: iload           20
        //   671: ifne            703
        //   674: goto            681
        //   677: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   680: athrow         
        //   681: aload           17
        //   683: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   688: aload           9
        //   690: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   695: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   698: areturn        
        //   699: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   702: athrow         
        //   703: aload           15
        //   705: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   708: if_acmpne       728
        //   711: iconst_1       
        //   712: istore          16
        //   714: aload_0        
        //   715: aload_0        
        //   716: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   719: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.EMPTY_NAME:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   722: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   725: goto            908
        //   728: aload           15
        //   730: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   733: if_acmpeq       751
        //   736: aload           15
        //   738: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.OPERATOR_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   741: if_acmpne       800
        //   744: goto            751
        //   747: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   750: athrow         
        //   751: iload_3        
        //   752: ifne            800
        //   755: goto            762
        //   758: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   761: athrow         
        //   762: aload_0        
        //   763: aload_1        
        //   764: iload           5
        //   766: iload           6
        //   768: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZ)Z
        //   771: ifeq            800
        //   774: goto            781
        //   777: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   780: athrow         
        //   781: aload_0        
        //   782: aload_0        
        //   783: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   786: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.EMPTY_NAME:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   789: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   792: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.EMPTY_TYPE_PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   795: astore          10
        //   797: goto            908
        //   800: iload           7
        //   802: ifeq            849
        //   805: iload_3        
        //   806: ifne            849
        //   809: goto            816
        //   812: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   815: athrow         
        //   816: aload_0        
        //   817: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:()Z
        //   820: ifeq            849
        //   823: goto            830
        //   826: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   829: athrow         
        //   830: aload_0        
        //   831: aload_0        
        //   832: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   835: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.EMPTY_NAME:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   838: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   841: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.EMPTY_TYPE_PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   844: astore          10
        //   846: goto            908
        //   849: iload           13
        //   851: ifeq            903
        //   854: aload_0        
        //   855: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.T:()Ljava/util/List;
        //   858: astore          18
        //   860: aload           18
        //   862: ifnull          900
        //   865: ldc             "*"
        //   867: aload           18
        //   869: invokestatic    com/intellij/util/containers/ContainerUtil.getLastItem:(Ljava/util/List;)Ljava/lang/Object;
        //   872: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //   875: ifeq            900
        //   878: goto            885
        //   881: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   884: athrow         
        //   885: aload           17
        //   887: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   892: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   895: astore          10
        //   897: goto            1706
        //   900: goto            908
        //   903: aload_0        
        //   904: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.N:()Ljava/util/List;
        //   907: pop            
        //   908: aload_0        
        //   909: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   912: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   915: if_acmpne       1385
        //   918: iconst_0       
        //   919: istore          18
        //   921: iconst_0       
        //   922: istore          19
        //   924: aload_0        
        //   925: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   928: astore          20
        //   930: aload_0        
        //   931: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   934: aload_0        
        //   935: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   938: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   941: if_acmpne       1064
        //   944: aload_0        
        //   945: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   948: astore          21
        //   950: aload_0        
        //   951: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.T:()Ljava/util/List;
        //   954: pop            
        //   955: aload_0        
        //   956: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   959: astore          22
        //   961: iload           16
        //   963: ifne            1052
        //   966: aload_0        
        //   967: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   970: ifeq            1052
        //   973: goto            980
        //   976: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   979: athrow         
        //   980: aload           22
        //   982: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   985: if_acmpeq       1052
        //   988: goto            995
        //   991: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   994: athrow         
        //   995: aload           22
        //   997: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1000: if_acmpeq       1052
        //  1003: goto            1010
        //  1006: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1009: athrow         
        //  1010: aload           22
        //  1012: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1015: if_acmpeq       1052
        //  1018: goto            1025
        //  1021: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1024: athrow         
        //  1025: aload           22
        //  1027: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GTGT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1030: if_acmpeq       1052
        //  1033: goto            1040
        //  1036: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1039: athrow         
        //  1040: aload_0        
        //  1041: aload           21
        //  1043: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //  1046: iconst_1       
        //  1047: istore          18
        //  1049: goto            1121
        //  1052: aload_0        
        //  1053: aload           21
        //  1055: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.REFERENCE_ELEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1058: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //  1061: goto            1097
        //  1064: aload_0        
        //  1065: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //  1068: ifeq            1091
        //  1071: aload_0        
        //  1072: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aN:()Z
        //  1075: ifeq            1091
        //  1078: goto            1085
        //  1081: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1084: athrow         
        //  1085: iconst_1       
        //  1086: istore          19
        //  1088: goto            1097
        //  1091: aload_0        
        //  1092: ldc             "Protocol name expected"
        //  1094: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //  1097: aload_0        
        //  1098: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1101: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1104: if_acmpeq       1114
        //  1107: goto            1121
        //  1110: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1113: athrow         
        //  1114: aload_0        
        //  1115: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1118: goto            934
        //  1121: iload           18
        //  1123: ifne            1330
        //  1126: iload           11
        //  1128: ifeq            1166
        //  1131: goto            1138
        //  1134: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1137: athrow         
        //  1138: aload_0        
        //  1139: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1142: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1145: if_acmpne       1166
        //  1148: goto            1155
        //  1151: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1154: athrow         
        //  1155: aload_0        
        //  1156: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1159: goto            1166
        //  1162: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1165: athrow         
        //  1166: aload_0        
        //  1167: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1170: astore          21
        //  1172: aload           21
        //  1174: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1177: if_acmpeq       1236
        //  1180: aload           21
        //  1182: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GTGT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1185: if_acmpeq       1236
        //  1188: goto            1195
        //  1191: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1194: athrow         
        //  1195: aload           20
        //  1197: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //  1202: iload           11
        //  1204: ifne            1227
        //  1207: goto            1214
        //  1210: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1213: athrow         
        //  1214: aload_0        
        //  1215: aload           17
        //  1217: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //  1220: goto            1706
        //  1223: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1226: athrow         
        //  1227: aload_0        
        //  1228: ldc             "Missing '>'"
        //  1230: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //  1233: goto            1327
        //  1236: aload_0        
        //  1237: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1240: aload           21
        //  1242: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GTGT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1245: if_acmpne       1260
        //  1248: aload_0        
        //  1249: iconst_1       
        //  1250: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myTemplateGTGT:Z
        //  1253: goto            1260
        //  1256: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1259: athrow         
        //  1260: iload           19
        //  1262: ifeq            1281
        //  1265: aload_0        
        //  1266: aload           20
        //  1268: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.TEMPLATE_ARGUMENT_LIST:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1271: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //  1274: goto            1288
        //  1277: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1280: athrow         
        //  1281: aload           20
        //  1283: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //  1288: aload_0        
        //  1289: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1292: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1295: if_acmpne       1327
        //  1298: iload           16
        //  1300: ifne            1327
        //  1303: goto            1310
        //  1306: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1309: athrow         
        //  1310: aload_0        
        //  1311: aload           17
        //  1313: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //  1316: aload_0        
        //  1317: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //  1320: astore          17
        //  1322: aload_0        
        //  1323: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.T:()Ljava/util/List;
        //  1326: pop            
        //  1327: goto            1385
        //  1330: aload           20
        //  1332: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //  1337: aload_0        
        //  1338: aload           17
        //  1340: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //  1343: aload_0        
        //  1344: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //  1347: astore          17
        //  1349: iload           13
        //  1351: ifne            1368
        //  1354: aload_1        
        //  1355: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CODE_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //  1358: if_acmpeq       1380
        //  1361: goto            1368
        //  1364: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1367: athrow         
        //  1368: aload_0        
        //  1369: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.T:()Ljava/util/List;
        //  1372: pop            
        //  1373: goto            1385
        //  1376: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1379: athrow         
        //  1380: aload_0        
        //  1381: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.N:()Ljava/util/List;
        //  1384: pop            
        //  1385: aload           10
        //  1387: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.EMPTY_TYPE_PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //  1390: if_acmpne       1407
        //  1393: aload           17
        //  1395: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //  1400: goto            1416
        //  1403: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1406: athrow         
        //  1407: aload_0        
        //  1408: aload           17
        //  1410: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.REFERENCE_ELEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1413: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //  1416: goto            1639
        //  1419: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.SINGLE_TOKEN_SPECIFIER:Lcom/intellij/psi/tree/TokenSet;
        //  1422: aload           15
        //  1424: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //  1427: ifeq            1543
        //  1430: aload           15
        //  1432: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1435: if_acmpeq       1460
        //  1438: goto            1445
        //  1441: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1444: athrow         
        //  1445: aload           15
        //  1447: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.OPERATOR_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //  1450: if_acmpne       1472
        //  1453: goto            1460
        //  1456: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1459: athrow         
        //  1460: aload_0        
        //  1461: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.N:()Ljava/util/List;
        //  1464: pop            
        //  1465: goto            1639
        //  1468: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1471: athrow         
        //  1472: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SIMPLE_TYPE_SPECIFIERS:Lcom/intellij/psi/tree/TokenSet;
        //  1475: aload           15
        //  1477: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //  1480: ifeq            1508
        //  1483: iload           12
        //  1485: ifeq            1508
        //  1488: goto            1495
        //  1491: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1494: athrow         
        //  1495: aload_0        
        //  1496: ldc             "Expecting ';'"
        //  1498: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //  1501: goto            1706
        //  1504: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1507: athrow         
        //  1508: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AUTO_KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //  1511: aload_0        
        //  1512: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1515: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //  1518: ifeq            1533
        //  1521: aload_0        
        //  1522: iconst_1       
        //  1523: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myForceEagerMode:Z
        //  1526: goto            1533
        //  1529: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1532: athrow         
        //  1533: aload_0        
        //  1534: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1537: iconst_1       
        //  1538: istore          11
        //  1540: goto            1639
        //  1543: aload           15
        //  1545: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STRUCT_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1548: if_acmpeq       1596
        //  1551: aload           15
        //  1553: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CLASS_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1556: if_acmpeq       1596
        //  1559: goto            1566
        //  1562: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1565: athrow         
        //  1566: aload           15
        //  1568: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.UNION_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1571: if_acmpeq       1596
        //  1574: goto            1581
        //  1577: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1580: athrow         
        //  1581: aload           15
        //  1583: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ENUM_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1586: if_acmpne       1639
        //  1589: goto            1596
        //  1592: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1595: athrow         
        //  1596: iload           12
        //  1598: ifeq            1621
        //  1601: goto            1608
        //  1604: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1607: athrow         
        //  1608: aload_0        
        //  1609: ldc             "Expecting ';'"
        //  1611: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //  1614: goto            1706
        //  1617: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1620: athrow         
        //  1621: aload_0        
        //  1622: iload           4
        //  1624: iload           6
        //  1626: aload_1        
        //  1627: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(ZZLcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;)Z
        //  1630: ifeq            1636
        //  1633: iconst_1       
        //  1634: istore          12
        //  1636: iconst_1       
        //  1637: istore          11
        //  1639: aload           10
        //  1641: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //  1644: if_acmpne       1703
        //  1647: iload           11
        //  1649: ifeq            1667
        //  1652: goto            1659
        //  1655: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1658: athrow         
        //  1659: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED_FOR_SURE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //  1662: astore          10
        //  1664: goto            1703
        //  1667: aload           8
        //  1669: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.NON_EXACT_VALUES:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //  1672: if_acmpne       1698
        //  1675: aload           14
        //  1677: getstatic       java/lang/Boolean.TRUE:Ljava/lang/Boolean;
        //  1680: if_acmpne       1698
        //  1683: goto            1690
        //  1686: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1689: athrow         
        //  1690: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.UNKNOWN:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //  1693: astore          10
        //  1695: goto            1703
        //  1698: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //  1701: astore          10
        //  1703: goto            23
        //  1706: aload_0        
        //  1707: iconst_0       
        //  1708: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.o:(Z)Z
        //  1711: pop            
        //  1712: iload           7
        //  1714: ifeq            1733
        //  1717: aload_0        
        //  1718: aload           9
        //  1720: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.TYPE_ELEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1723: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //  1726: goto            1740
        //  1729: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1732: athrow         
        //  1733: aload           9
        //  1735: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //  1740: aload           8
        //  1742: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.ONLY_TYPES:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //  1745: if_acmpne       1773
        //  1748: aload           10
        //  1750: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED_FOR_SURE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //  1753: if_acmpeq       1773
        //  1756: goto            1763
        //  1759: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1762: athrow         
        //  1763: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //  1766: goto            1775
        //  1769: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1772: athrow         
        //  1773: aload           10
        //  1775: areturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  35     46     49     53     Ljava/lang/IllegalArgumentException;
        //  42     61     64     68     Ljava/lang/IllegalArgumentException;
        //  53     84     87     91     Ljava/lang/IllegalArgumentException;
        //  68     98     101    105    Ljava/lang/IllegalArgumentException;
        //  113    125    128    132    Ljava/lang/IllegalArgumentException;
        //  140    161    164    168    Ljava/lang/IllegalArgumentException;
        //  151    172    172    176    Ljava/lang/IllegalArgumentException;
        //  180    202    205    209    Ljava/lang/IllegalArgumentException;
        //  241    257    260    264    Ljava/lang/IllegalArgumentException;
        //  249    269    272    276    Ljava/lang/IllegalArgumentException;
        //  264    285    285    289    Ljava/lang/IllegalArgumentException;
        //  302    318    321    325    Ljava/lang/IllegalArgumentException;
        //  310    336    336    340    Ljava/lang/IllegalArgumentException;
        //  365    384    387    391    Ljava/lang/IllegalArgumentException;
        //  376    399    402    406    Ljava/lang/IllegalArgumentException;
        //  391    414    417    421    Ljava/lang/IllegalArgumentException;
        //  424    440    443    447    Ljava/lang/IllegalArgumentException;
        //  432    455    458    462    Ljava/lang/IllegalArgumentException;
        //  447    470    473    477    Ljava/lang/IllegalArgumentException;
        //  462    485    488    492    Ljava/lang/IllegalArgumentException;
        //  477    495    495    499    Ljava/lang/IllegalArgumentException;
        //  523    539    542    546    Ljava/lang/IllegalArgumentException;
        //  531    550    550    554    Ljava/lang/IllegalArgumentException;
        //  564    574    577    581    Ljava/lang/IllegalArgumentException;
        //  569    585    585    589    Ljava/lang/IllegalArgumentException;
        //  599    609    612    616    Ljava/lang/IllegalArgumentException;
        //  622    635    638    642    Ljava/lang/IllegalArgumentException;
        //  630    650    653    657    Ljava/lang/IllegalArgumentException;
        //  642    662    665    669    Ljava/lang/IllegalArgumentException;
        //  657    674    677    681    Ljava/lang/IllegalArgumentException;
        //  669    699    699    703    Ljava/lang/IllegalArgumentException;
        //  728    744    747    751    Ljava/lang/IllegalArgumentException;
        //  736    755    758    762    Ljava/lang/IllegalArgumentException;
        //  751    774    777    781    Ljava/lang/IllegalArgumentException;
        //  800    809    812    816    Ljava/lang/IllegalArgumentException;
        //  805    823    826    830    Ljava/lang/IllegalArgumentException;
        //  860    878    881    885    Ljava/lang/IllegalArgumentException;
        //  961    973    976    980    Ljava/lang/IllegalArgumentException;
        //  966    988    991    995    Ljava/lang/IllegalArgumentException;
        //  980    1003   1006   1010   Ljava/lang/IllegalArgumentException;
        //  995    1018   1021   1025   Ljava/lang/IllegalArgumentException;
        //  1010   1033   1036   1040   Ljava/lang/IllegalArgumentException;
        //  1064   1078   1081   1085   Ljava/lang/IllegalArgumentException;
        //  1097   1110   1110   1114   Ljava/lang/IllegalArgumentException;
        //  1121   1131   1134   1138   Ljava/lang/IllegalArgumentException;
        //  1126   1148   1151   1155   Ljava/lang/IllegalArgumentException;
        //  1138   1159   1162   1166   Ljava/lang/IllegalArgumentException;
        //  1172   1188   1191   1195   Ljava/lang/IllegalArgumentException;
        //  1180   1207   1210   1214   Ljava/lang/IllegalArgumentException;
        //  1195   1223   1223   1227   Ljava/lang/IllegalArgumentException;
        //  1236   1253   1256   1260   Ljava/lang/IllegalArgumentException;
        //  1260   1277   1277   1281   Ljava/lang/IllegalArgumentException;
        //  1288   1303   1306   1310   Ljava/lang/IllegalArgumentException;
        //  1349   1361   1364   1368   Ljava/lang/IllegalArgumentException;
        //  1354   1376   1376   1380   Ljava/lang/IllegalArgumentException;
        //  1385   1403   1403   1407   Ljava/lang/IllegalArgumentException;
        //  1419   1438   1441   1445   Ljava/lang/IllegalArgumentException;
        //  1430   1453   1456   1460   Ljava/lang/IllegalArgumentException;
        //  1445   1468   1468   1472   Ljava/lang/IllegalArgumentException;
        //  1472   1488   1491   1495   Ljava/lang/IllegalArgumentException;
        //  1483   1504   1504   1508   Ljava/lang/IllegalArgumentException;
        //  1508   1526   1529   1533   Ljava/lang/IllegalArgumentException;
        //  1543   1559   1562   1566   Ljava/lang/IllegalArgumentException;
        //  1551   1574   1577   1581   Ljava/lang/IllegalArgumentException;
        //  1566   1589   1592   1596   Ljava/lang/IllegalArgumentException;
        //  1581   1601   1604   1608   Ljava/lang/IllegalArgumentException;
        //  1596   1617   1617   1621   Ljava/lang/IllegalArgumentException;
        //  1639   1652   1655   1659   Ljava/lang/IllegalArgumentException;
        //  1667   1683   1686   1690   Ljava/lang/IllegalArgumentException;
        //  1706   1729   1729   1733   Ljava/lang/IllegalArgumentException;
        //  1740   1756   1759   1763   Ljava/lang/IllegalArgumentException;
        //  1748   1769   1769   1773   Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0053:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean as() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_1       
        //     5: aload_0        
        //     6: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //     9: aload_0        
        //    10: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    13: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    16: if_acmpne       30
        //    19: aload_0        
        //    20: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aE:()V
        //    23: goto            30
        //    26: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    29: athrow         
        //    30: aload_0        
        //    31: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    34: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    37: if_acmpne       246
        //    40: aload_0        
        //    41: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    44: aload_0        
        //    45: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    48: astore_2       
        //    49: aload_2        
        //    50: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.MUL:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    53: if_acmpeq       112
        //    56: aload_2        
        //    57: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.XOR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    60: if_acmpeq       112
        //    63: goto            70
        //    66: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    69: athrow         
        //    70: aload_0        
        //    71: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //    74: ifeq            123
        //    77: goto            84
        //    80: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    83: athrow         
        //    84: aload_2        
        //    85: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    88: if_acmpeq       112
        //    91: goto            98
        //    94: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    97: athrow         
        //    98: aload_2        
        //    99: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ANDAND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   102: if_acmpne       123
        //   105: goto            112
        //   108: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   111: athrow         
        //   112: aload_0        
        //   113: aload_1        
        //   114: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   117: iconst_0       
        //   118: ireturn        
        //   119: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   122: athrow         
        //   123: aload_0        
        //   124: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   127: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   130: if_acmpne       239
        //   133: aload_0        
        //   134: iconst_0       
        //   135: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Z)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   138: ifnonnull       239
        //   141: goto            148
        //   144: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   147: athrow         
        //   148: aload_0        
        //   149: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   152: aload_0        
        //   153: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   156: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   159: if_acmpne       218
        //   162: goto            169
        //   165: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   168: athrow         
        //   169: aload_0        
        //   170: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   173: aload_0        
        //   174: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   177: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EQ:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   180: if_acmpeq       207
        //   183: goto            190
        //   186: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   189: athrow         
        //   190: aload_0        
        //   191: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   194: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   197: if_acmpne       239
        //   200: goto            207
        //   203: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   206: athrow         
        //   207: aload_0        
        //   208: aload_1        
        //   209: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   212: iconst_0       
        //   213: ireturn        
        //   214: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   217: athrow         
        //   218: aload_0        
        //   219: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   222: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   225: if_acmpne       239
        //   228: aload_0        
        //   229: aload_1        
        //   230: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   233: iconst_0       
        //   234: ireturn        
        //   235: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   238: athrow         
        //   239: aload_0        
        //   240: aload_1        
        //   241: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   244: iconst_1       
        //   245: ireturn        
        //   246: aload_0        
        //   247: aload_1        
        //   248: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   251: iconst_0       
        //   252: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      23     26     30     Ljava/lang/IllegalArgumentException;
        //  49     63     66     70     Ljava/lang/IllegalArgumentException;
        //  56     77     80     84     Ljava/lang/IllegalArgumentException;
        //  70     91     94     98     Ljava/lang/IllegalArgumentException;
        //  84     105    108    112    Ljava/lang/IllegalArgumentException;
        //  98     119    119    123    Ljava/lang/IllegalArgumentException;
        //  123    141    144    148    Ljava/lang/IllegalArgumentException;
        //  133    162    165    169    Ljava/lang/IllegalArgumentException;
        //  148    183    186    190    Ljava/lang/IllegalArgumentException;
        //  169    200    203    207    Ljava/lang/IllegalArgumentException;
        //  190    214    214    218    Ljava/lang/IllegalArgumentException;
        //  218    235    235    239    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0070:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean a(final DeclarationContext declarationContext, final boolean b, final boolean b2) {
        boolean b3 = false;
        Label_0024: {
            try {
                if (declarationContext == DeclarationContext.FILE) {
                    break Label_0024;
                }
                final DeclarationContext declarationContext2 = declarationContext;
                final DeclarationContext declarationContext3 = DeclarationContext.STRUCT;
                if (declarationContext2 != declarationContext3) {
                    break Label_0024;
                }
                break Label_0024;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final DeclarationContext declarationContext2 = declarationContext;
                final DeclarationContext declarationContext3 = DeclarationContext.STRUCT;
                if (declarationContext2 != declarationContext3) {
                    if (!b) {
                        return b3;
                    }
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        String tokenText = this.myBuilder.getTokenText();
        final List<String> t = this.T();
        Label_0255: {
            Label_0220: {
                Label_0183: {
                    Label_0150: {
                        Label_0133: {
                            Label_0111: {
                                Label_0098: {
                                    try {
                                        if (!this.myIsCppSupport) {
                                            break Label_0111;
                                        }
                                        if (t == null) {
                                            break Label_0098;
                                        }
                                    }
                                    catch (IllegalArgumentException ex3) {
                                        throw a(ex3);
                                    }
                                    tokenText = t.get(t.size() - 1);
                                }
                                if ("operator".equals(tokenText)) {
                                    b3 = true;
                                }
                                try {
                                    if (b3) {
                                        break Label_0255;
                                    }
                                    final OCParsing ocParsing = this;
                                    final IElementType elementType = ocParsing.aF();
                                    final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.SEMICOLON;
                                    if (elementType == ocPunctuatorElementType) {
                                        break Label_0133;
                                    }
                                    break Label_0150;
                                }
                                catch (IllegalArgumentException ex4) {
                                    throw a(ex4);
                                }
                            }
                            try {
                                final OCParsing ocParsing = this;
                                final IElementType elementType = ocParsing.aF();
                                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.SEMICOLON;
                                if (elementType != ocPunctuatorElementType) {
                                    break Label_0150;
                                }
                                if (b2) {
                                    break Label_0150;
                                }
                            }
                            catch (IllegalArgumentException ex5) {
                                throw a(ex5);
                            }
                        }
                        b3 = true;
                        break Label_0255;
                        try {
                            if (this.aF() != OCTokenTypes.EQ) {
                                if (this.aF() != OCTokenTypes.COLON) {
                                    break Label_0183;
                                }
                            }
                        }
                        catch (IllegalArgumentException ex6) {
                            throw a(ex6);
                        }
                    }
                    b3 = true;
                    break Label_0255;
                    try {
                        if (this.aF() != OCTokenTypes.LPAR) {
                            break Label_0255;
                        }
                        this.aY();
                        if (this.aF() != OCTokenTypes.RPAR) {
                            break Label_0220;
                        }
                    }
                    catch (IllegalArgumentException ex7) {
                        throw a(ex7);
                    }
                }
                b3 = true;
                break Label_0255;
            }
            final IElementType af = this.aF();
            try {
                if (af == OCTokenTypes.IDENTIFIER || !OCParsing.CPP_SPECIFIERS_FIRST.contains(af)) {
                    break Label_0255;
                }
            }
            catch (IllegalArgumentException ex8) {
                throw a(ex8);
            }
            b3 = true;
        }
        this.i(a7);
        return b3;
    }
    
    private boolean a(final DeclarationContext p0, final boolean p1, final boolean p2, final boolean p3) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: iconst_0       
        //     1: istore          5
        //     3: iconst_0       
        //     4: istore          6
        //     6: aload_1        
        //     7: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CODE_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //    10: if_acmpeq       27
        //    13: aload_1        
        //    14: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //    17: if_acmpne       868
        //    20: goto            27
        //    23: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    26: athrow         
        //    27: aconst_null    
        //    28: astore          7
        //    30: iload_2        
        //    31: ifne            65
        //    34: aload_0        
        //    35: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    38: astore          7
        //    40: aload_0        
        //    41: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    44: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    47: if_acmpne       58
        //    50: iconst_1       
        //    51: goto            59
        //    54: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    57: athrow         
        //    58: iconst_0       
        //    59: istore          6
        //    61: aload_0        
        //    62: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    65: aload_0        
        //    66: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aG:()Z
        //    69: pop            
        //    70: aload_0        
        //    71: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    74: astore          8
        //    76: iload_3        
        //    77: ifeq            138
        //    80: aload           8
        //    82: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.MUL:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    85: if_acmpeq       125
        //    88: goto            95
        //    91: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    94: athrow         
        //    95: aload           8
        //    97: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   100: if_acmpeq       125
        //   103: goto            110
        //   106: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   109: athrow         
        //   110: aload           8
        //   112: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.XOR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   115: if_acmpne       138
        //   118: goto            125
        //   121: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   124: athrow         
        //   125: aload_0        
        //   126: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   129: aload_0        
        //   130: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   133: astore          8
        //   135: goto            76
        //   138: aload           8
        //   140: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   143: if_acmpeq       161
        //   146: aload           8
        //   148: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELLIPSIS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   151: if_acmpne       167
        //   154: goto            161
        //   157: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   160: athrow         
        //   161: iconst_0       
        //   162: istore          5
        //   164: goto            851
        //   167: aload           8
        //   169: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   172: if_acmpne       273
        //   175: iload           6
        //   177: ifeq            193
        //   180: goto            187
        //   183: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   186: athrow         
        //   187: iconst_1       
        //   188: istore          5
        //   190: goto            851
        //   193: aload_0        
        //   194: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   197: aload_0        
        //   198: aload_1        
        //   199: iconst_1       
        //   200: iload_3        
        //   201: iconst_1       
        //   202: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZ)Z
        //   205: istore          5
        //   207: aload_0        
        //   208: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   211: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   214: if_acmpne       851
        //   217: aload_0        
        //   218: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   221: iload           5
        //   223: ifne            851
        //   226: goto            233
        //   229: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   232: athrow         
        //   233: aload_0        
        //   234: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   237: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   240: if_acmpeq       851
        //   243: goto            250
        //   246: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   249: athrow         
        //   250: aload_0        
        //   251: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   254: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   257: if_acmpeq       851
        //   260: goto            267
        //   263: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   266: athrow         
        //   267: iconst_1       
        //   268: istore          5
        //   270: goto            851
        //   273: iload_3        
        //   274: ifeq            292
        //   277: aload           8
        //   279: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ANDAND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   282: if_acmpeq       307
        //   285: goto            292
        //   288: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   291: athrow         
        //   292: aload           8
        //   294: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.XOR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   297: if_acmpne       313
        //   300: goto            307
        //   303: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   306: athrow         
        //   307: iconst_0       
        //   308: istore          5
        //   310: goto            851
        //   313: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.CPP_SPECIFIERS_FIRST:Lcom/intellij/psi/tree/TokenSet;
        //   316: aload           8
        //   318: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   321: ifne            345
        //   324: aload           8
        //   326: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   329: if_acmpeq       345
        //   332: goto            339
        //   335: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   338: athrow         
        //   339: iconst_1       
        //   340: istore          5
        //   342: goto            851
        //   345: aload           8
        //   347: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   350: if_acmpeq       368
        //   353: aload           8
        //   355: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   358: if_acmpne       775
        //   361: goto            368
        //   364: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   367: athrow         
        //   368: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.CPP_EXPRESSIONS_FIRST:Lcom/intellij/psi/tree/TokenSet;
        //   371: aload_0        
        //   372: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   375: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   378: ifeq            394
        //   381: goto            388
        //   384: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   387: athrow         
        //   388: iconst_1       
        //   389: istore          5
        //   391: goto            851
        //   394: aload_0        
        //   395: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   398: astore          9
        //   400: aload_0        
        //   401: aload_1        
        //   402: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.NON_EXACT_VALUES:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //   405: iconst_0       
        //   406: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;Z)Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   409: astore          10
        //   411: aload           10
        //   413: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   416: if_acmpeq       493
        //   419: aload_0        
        //   420: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   423: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   426: if_acmpeq       493
        //   429: goto            436
        //   432: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   435: athrow         
        //   436: aload_0        
        //   437: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   440: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   443: if_acmpeq       493
        //   446: goto            453
        //   449: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   452: athrow         
        //   453: aload_0        
        //   454: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   457: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   460: if_acmpeq       493
        //   463: goto            470
        //   466: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   469: athrow         
        //   470: aload_0        
        //   471: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   474: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EQ:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   477: if_acmpeq       493
        //   480: goto            487
        //   483: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   486: athrow         
        //   487: iconst_1       
        //   488: istore          5
        //   490: goto            753
        //   493: aload           10
        //   495: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED_FOR_SURE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   498: if_acmpne       507
        //   501: iconst_0       
        //   502: istore          5
        //   504: goto            753
        //   507: aload           10
        //   509: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   512: if_acmpne       532
        //   515: iload_3        
        //   516: ifne            532
        //   519: goto            526
        //   522: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   525: athrow         
        //   526: iconst_1       
        //   527: istore          5
        //   529: goto            753
        //   532: iload           4
        //   534: iload_3        
        //   535: ifne            561
        //   538: aload           10
        //   540: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.UNKNOWN:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   543: if_acmpne       561
        //   546: goto            553
        //   549: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   552: athrow         
        //   553: iconst_1       
        //   554: goto            562
        //   557: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   560: athrow         
        //   561: iconst_0       
        //   562: iand           
        //   563: istore          4
        //   565: aload_0        
        //   566: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   569: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   572: if_acmpne       656
        //   575: aload_0        
        //   576: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   579: iload           4
        //   581: ifeq            650
        //   584: goto            591
        //   587: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   590: athrow         
        //   591: aload_0        
        //   592: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   595: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   598: if_acmpeq       642
        //   601: goto            608
        //   604: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   607: athrow         
        //   608: aload_0        
        //   609: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   612: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EQ:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   615: if_acmpeq       642
        //   618: goto            625
        //   621: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   624: athrow         
        //   625: aload_0        
        //   626: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   629: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   632: if_acmpne       650
        //   635: goto            642
        //   638: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   641: athrow         
        //   642: iconst_1       
        //   643: goto            651
        //   646: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   649: athrow         
        //   650: iconst_0       
        //   651: istore          5
        //   653: goto            753
        //   656: aload_0        
        //   657: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   660: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   663: if_acmpne       704
        //   666: aload_1        
        //   667: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.CODE_BLOCK:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   670: if_acmpne       686
        //   673: goto            680
        //   676: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   679: athrow         
        //   680: iconst_1       
        //   681: istore          5
        //   683: goto            753
        //   686: aload_0        
        //   687: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   690: aload_0        
        //   691: aload_1        
        //   692: iconst_1       
        //   693: iload_3        
        //   694: iload           4
        //   696: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZ)Z
        //   699: istore          5
        //   701: goto            753
        //   704: aload_0        
        //   705: aload           9
        //   707: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   710: aconst_null    
        //   711: astore          9
        //   713: aload_0        
        //   714: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   717: aload           10
        //   719: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.isEmpty:()Z
        //   722: ifeq            750
        //   725: aload_0        
        //   726: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   729: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   732: if_acmpeq       750
        //   735: goto            742
        //   738: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   741: athrow         
        //   742: iconst_1       
        //   743: goto            751
        //   746: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   749: athrow         
        //   750: iconst_0       
        //   751: istore          5
        //   753: aload           9
        //   755: ifnull          772
        //   758: aload           9
        //   760: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   765: goto            772
        //   768: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   771: athrow         
        //   772: goto            851
        //   775: aload_0        
        //   776: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   779: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.ANY:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //   782: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;)Z
        //   785: ifne            851
        //   788: aload_0        
        //   789: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   792: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   795: if_acmpne       851
        //   798: goto            805
        //   801: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   804: athrow         
        //   805: aload_0        
        //   806: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   809: aload_0        
        //   810: aload_1        
        //   811: iconst_1       
        //   812: iconst_1       
        //   813: iconst_1       
        //   814: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZ)Z
        //   817: istore          5
        //   819: iload           5
        //   821: ifne            851
        //   824: aload_0        
        //   825: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   828: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   831: if_acmpne       851
        //   834: goto            841
        //   837: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   840: athrow         
        //   841: aload_0        
        //   842: aload_1        
        //   843: iconst_1       
        //   844: iconst_1       
        //   845: iconst_1       
        //   846: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZ)Z
        //   849: istore          5
        //   851: iload_2        
        //   852: ifne            868
        //   855: aload_0        
        //   856: aload           7
        //   858: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   861: goto            868
        //   864: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   867: athrow         
        //   868: iload           5
        //   870: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  6      20     23     27     Ljava/lang/IllegalArgumentException;
        //  40     54     54     58     Ljava/lang/IllegalArgumentException;
        //  76     88     91     95     Ljava/lang/IllegalArgumentException;
        //  80     103    106    110    Ljava/lang/IllegalArgumentException;
        //  95     118    121    125    Ljava/lang/IllegalArgumentException;
        //  138    154    157    161    Ljava/lang/IllegalArgumentException;
        //  167    180    183    187    Ljava/lang/IllegalArgumentException;
        //  207    226    229    233    Ljava/lang/IllegalArgumentException;
        //  217    243    246    250    Ljava/lang/IllegalArgumentException;
        //  233    260    263    267    Ljava/lang/IllegalArgumentException;
        //  273    285    288    292    Ljava/lang/IllegalArgumentException;
        //  277    300    303    307    Ljava/lang/IllegalArgumentException;
        //  313    332    335    339    Ljava/lang/IllegalArgumentException;
        //  345    361    364    368    Ljava/lang/IllegalArgumentException;
        //  353    381    384    388    Ljava/lang/IllegalArgumentException;
        //  411    429    432    436    Ljava/lang/IllegalArgumentException;
        //  419    446    449    453    Ljava/lang/IllegalArgumentException;
        //  436    463    466    470    Ljava/lang/IllegalArgumentException;
        //  453    480    483    487    Ljava/lang/IllegalArgumentException;
        //  507    519    522    526    Ljava/lang/IllegalArgumentException;
        //  532    546    549    553    Ljava/lang/IllegalArgumentException;
        //  538    557    557    561    Ljava/lang/IllegalArgumentException;
        //  565    584    587    591    Ljava/lang/IllegalArgumentException;
        //  575    601    604    608    Ljava/lang/IllegalArgumentException;
        //  591    618    621    625    Ljava/lang/IllegalArgumentException;
        //  608    635    638    642    Ljava/lang/IllegalArgumentException;
        //  625    646    646    650    Ljava/lang/IllegalArgumentException;
        //  656    673    676    680    Ljava/lang/IllegalArgumentException;
        //  713    735    738    742    Ljava/lang/IllegalArgumentException;
        //  725    746    746    750    Ljava/lang/IllegalArgumentException;
        //  753    765    768    772    Ljava/lang/IllegalArgumentException;
        //  775    798    801    805    Ljava/lang/IllegalArgumentException;
        //  819    834    837    841    Ljava/lang/IllegalArgumentException;
        //  851    861    864    868    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0095:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean a(final boolean p0, final boolean p1, final DeclarationContext p2) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     4: astore          4
        //     6: aload           4
        //     8: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STRUCT_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    11: if_acmpne       22
        //    14: iconst_1       
        //    15: goto            23
        //    18: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    21: athrow         
        //    22: iconst_0       
        //    23: istore          5
        //    25: aload           4
        //    27: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.UNION_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    30: if_acmpne       41
        //    33: iconst_1       
        //    34: goto            42
        //    37: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    40: athrow         
        //    41: iconst_0       
        //    42: istore          6
        //    44: aload           4
        //    46: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ENUM_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    49: if_acmpne       60
        //    52: iconst_1       
        //    53: goto            61
        //    56: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    59: athrow         
        //    60: iconst_0       
        //    61: istore          7
        //    63: aload           4
        //    65: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CLASS_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    68: if_acmpne       79
        //    71: iconst_1       
        //    72: goto            80
        //    75: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    78: athrow         
        //    79: iconst_0       
        //    80: istore          8
        //    82: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.$assertionsDisabled:Z
        //    85: ifne            148
        //    88: iload           5
        //    90: ifne            148
        //    93: goto            100
        //    96: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    99: athrow         
        //   100: iload           6
        //   102: ifne            148
        //   105: goto            112
        //   108: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   111: athrow         
        //   112: iload           7
        //   114: ifne            148
        //   117: goto            124
        //   120: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   123: athrow         
        //   124: iload           8
        //   126: ifne            148
        //   129: goto            136
        //   132: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   135: athrow         
        //   136: new             Ljava/lang/AssertionError;
        //   139: dup            
        //   140: invokespecial   java/lang/AssertionError.<init>:()V
        //   143: athrow         
        //   144: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   147: athrow         
        //   148: aload_0        
        //   149: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   152: astore          9
        //   154: aload_0        
        //   155: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   158: iload           7
        //   160: ifeq            208
        //   163: aload_0        
        //   164: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   167: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CLASS_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   170: if_acmpeq       197
        //   173: goto            180
        //   176: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   179: athrow         
        //   180: aload_0        
        //   181: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   184: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STRUCT_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   187: if_acmpne       208
        //   190: goto            197
        //   193: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   196: athrow         
        //   197: aload_0        
        //   198: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   201: goto            208
        //   204: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   207: athrow         
        //   208: aload_0        
        //   209: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   212: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALIGNAS_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   215: if_acmpeq       235
        //   218: aload_0        
        //   219: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   222: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALIGNAS_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   225: if_acmpne       250
        //   228: goto            235
        //   231: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   234: athrow         
        //   235: aload_0        
        //   236: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   239: aload_0        
        //   240: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.M:()V
        //   243: goto            250
        //   246: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   249: athrow         
        //   250: aload_0        
        //   251: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aG:()Z
        //   254: pop            
        //   255: aload_0        
        //   256: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   259: astore          10
        //   261: aload_0        
        //   262: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   265: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   268: if_acmpeq       288
        //   271: aload_0        
        //   272: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   275: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   278: if_acmpne       296
        //   281: goto            288
        //   284: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   287: athrow         
        //   288: iconst_1       
        //   289: goto            297
        //   292: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   295: athrow         
        //   296: iconst_0       
        //   297: istore          11
        //   299: aconst_null    
        //   300: astore          12
        //   302: aconst_null    
        //   303: astore          13
        //   305: iload           11
        //   307: ifeq            422
        //   310: aload_0        
        //   311: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   314: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   319: astore          13
        //   321: aload_0        
        //   322: iload_1        
        //   323: iload_2        
        //   324: ldc             "class/struct/union/enum name expected"
        //   326: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(ZZLjava/lang/String;)Ljava/util/List;
        //   329: astore          12
        //   331: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CPP_CLASS_VIRTUAL_SPECIFIERS:Lcom/intellij/psi/tree/TokenSet;
        //   334: aload_0        
        //   335: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   338: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   341: ifeq            355
        //   344: aload_0        
        //   345: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   348: goto            422
        //   351: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   354: athrow         
        //   355: aload_0        
        //   356: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   359: ifeq            422
        //   362: aload_0        
        //   363: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   366: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   369: if_acmpne       422
        //   372: goto            379
        //   375: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   378: athrow         
        //   379: aload_0        
        //   380: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   383: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   388: astore          14
        //   390: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.FINAL_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   393: invokevirtual   com/jetbrains/cidr/lang/parser/OCKeywordElementType.getName:()Ljava/lang/String;
        //   396: aload           14
        //   398: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //   401: ifeq            422
        //   404: aload_0        
        //   405: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.FINAL_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   408: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;)V
        //   411: aload_0        
        //   412: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   415: goto            422
        //   418: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   421: athrow         
        //   422: aload_0        
        //   423: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   426: astore          14
        //   428: aload_3        
        //   429: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.TRAILING_RETURN_TYPE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   432: if_acmpeq       473
        //   435: aload           14
        //   437: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   440: if_acmpeq       465
        //   443: goto            450
        //   446: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   449: athrow         
        //   450: aload           14
        //   452: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   455: if_acmpne       473
        //   458: goto            465
        //   461: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   464: athrow         
        //   465: iconst_1       
        //   466: goto            474
        //   469: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   472: athrow         
        //   473: iconst_0       
        //   474: istore          15
        //   476: iload           15
        //   478: ifeq            608
        //   481: aload           10
        //   483: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   488: iload           7
        //   490: ifeq            511
        //   493: goto            500
        //   496: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   499: athrow         
        //   500: aload_0        
        //   501: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.r:()V
        //   504: goto            635
        //   507: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   510: athrow         
        //   511: iload           11
        //   513: ifeq            600
        //   516: aload_0        
        //   517: aload           12
        //   519: aload           13
        //   521: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/util/List;Ljava/lang/String;)V
        //   524: aload           12
        //   526: ifnull          579
        //   529: goto            536
        //   532: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   535: athrow         
        //   536: aload           12
        //   538: invokeinterface java/util/List.size:()I
        //   543: ifle            579
        //   546: goto            553
        //   549: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   552: athrow         
        //   553: aload           12
        //   555: aload           12
        //   557: invokeinterface java/util/List.size:()I
        //   562: iconst_1       
        //   563: isub           
        //   564: invokeinterface java/util/List.get:(I)Ljava/lang/Object;
        //   569: checkcast       Ljava/lang/String;
        //   572: goto            581
        //   575: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   578: athrow         
        //   579: aload           13
        //   581: astore          13
        //   583: aload_0        
        //   584: aload           13
        //   586: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.d:(Ljava/lang/String;)V
        //   589: aload_0        
        //   590: aload           12
        //   592: aload           13
        //   594: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Ljava/util/List;Ljava/lang/String;)V
        //   597: goto            635
        //   600: aload_0        
        //   601: aconst_null    
        //   602: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.d:(Ljava/lang/String;)V
        //   605: goto            635
        //   608: iload_1        
        //   609: ifne            628
        //   612: aload_0        
        //   613: aload           10
        //   615: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.REFERENCE_ELEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   618: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   621: goto            635
        //   624: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   627: athrow         
        //   628: aload           10
        //   630: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   635: iload           11
        //   637: ifne            701
        //   640: iload           15
        //   642: ifne            701
        //   645: goto            652
        //   648: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   651: athrow         
        //   652: iload           5
        //   654: ifeq            677
        //   657: goto            664
        //   660: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   663: athrow         
        //   664: aload_0        
        //   665: ldc             "struct name and/or body expected"
        //   667: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   670: goto            701
        //   673: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   676: athrow         
        //   677: iload           6
        //   679: ifeq            695
        //   682: aload_0        
        //   683: ldc             "union name and/or body expected"
        //   685: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   688: goto            701
        //   691: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   694: athrow         
        //   695: aload_0        
        //   696: ldc             "enum name and/or body expected"
        //   698: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   701: aload_0        
        //   702: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aG:()Z
        //   705: pop            
        //   706: aload_0        
        //   707: aload           9
        //   709: iload           7
        //   711: ifeq            724
        //   714: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.ENUM:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   717: goto            742
        //   720: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   723: athrow         
        //   724: iload           6
        //   726: ifeq            739
        //   729: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.UNION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   732: goto            742
        //   735: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   738: athrow         
        //   739: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.STRUCT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   742: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   745: iload           15
        //   747: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  6      18     18     22     Ljava/lang/IllegalArgumentException;
        //  25     37     37     41     Ljava/lang/IllegalArgumentException;
        //  44     56     56     60     Ljava/lang/IllegalArgumentException;
        //  63     75     75     79     Ljava/lang/IllegalArgumentException;
        //  82     93     96     100    Ljava/lang/IllegalArgumentException;
        //  88     105    108    112    Ljava/lang/IllegalArgumentException;
        //  100    117    120    124    Ljava/lang/IllegalArgumentException;
        //  112    129    132    136    Ljava/lang/IllegalArgumentException;
        //  124    144    144    148    Ljava/lang/IllegalArgumentException;
        //  154    173    176    180    Ljava/lang/IllegalArgumentException;
        //  163    190    193    197    Ljava/lang/IllegalArgumentException;
        //  180    201    204    208    Ljava/lang/IllegalArgumentException;
        //  208    228    231    235    Ljava/lang/IllegalArgumentException;
        //  218    243    246    250    Ljava/lang/IllegalArgumentException;
        //  261    281    284    288    Ljava/lang/IllegalArgumentException;
        //  271    292    292    296    Ljava/lang/IllegalArgumentException;
        //  331    351    351    355    Ljava/lang/IllegalArgumentException;
        //  355    372    375    379    Ljava/lang/IllegalArgumentException;
        //  390    415    418    422    Ljava/lang/IllegalArgumentException;
        //  428    443    446    450    Ljava/lang/IllegalArgumentException;
        //  435    458    461    465    Ljava/lang/IllegalArgumentException;
        //  450    469    469    473    Ljava/lang/IllegalArgumentException;
        //  476    493    496    500    Ljava/lang/IllegalArgumentException;
        //  481    507    507    511    Ljava/lang/IllegalArgumentException;
        //  511    529    532    536    Ljava/lang/IllegalArgumentException;
        //  516    546    549    553    Ljava/lang/IllegalArgumentException;
        //  536    575    575    579    Ljava/lang/IllegalArgumentException;
        //  608    624    624    628    Ljava/lang/IllegalArgumentException;
        //  635    645    648    652    Ljava/lang/IllegalArgumentException;
        //  640    657    660    664    Ljava/lang/IllegalArgumentException;
        //  652    673    673    677    Ljava/lang/IllegalArgumentException;
        //  677    691    691    695    Ljava/lang/IllegalArgumentException;
        //  701    720    720    724    Ljava/lang/IllegalArgumentException;
        //  724    735    735    739    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0100:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void r() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: iconst_1       
        //     2: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Z)V
        //     5: aload_0        
        //     6: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     9: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    12: if_acmpeq       20
        //    15: return         
        //    16: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    19: athrow         
        //    20: aload_0        
        //    21: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    24: aload_0        
        //    25: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.F:()Z
        //    28: ifne            136
        //    31: aload_0        
        //    32: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    35: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    38: if_acmpeq       136
        //    41: goto            48
        //    44: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    47: athrow         
        //    48: aload_0        
        //    49: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.l:()V
        //    52: aload_0        
        //    53: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    56: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    59: if_acmpne       76
        //    62: goto            69
        //    65: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    68: athrow         
        //    69: goto            136
        //    72: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    75: athrow         
        //    76: aload_0        
        //    77: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    80: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    83: if_acmpne       97
        //    86: aload_0        
        //    87: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    90: goto            24
        //    93: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    96: athrow         
        //    97: aload_0        
        //    98: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   101: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   104: if_acmpne       120
        //   107: aload_0        
        //   108: ldc             "Missing comma between enum constants"
        //   110: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   113: goto            24
        //   116: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   119: athrow         
        //   120: aload_0        
        //   121: ldc             "Expecting comma between enum constants"
        //   123: aload_0        
        //   124: getfield        com/jetbrains/cidr/lang/parser/OCParsing.BLOCK_STATEMENT_PARSER:Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;
        //   127: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.UNKNOWN_CPP_CODE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   130: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;Lcom/intellij/psi/tree/IElementType;)V
        //   133: goto            24
        //   136: aload_0        
        //   137: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   140: ldc             "} expected"
        //   142: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   145: pop            
        //   146: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      16     16     20     Ljava/lang/IllegalArgumentException;
        //  24     41     44     48     Ljava/lang/IllegalArgumentException;
        //  31     62     65     69     Ljava/lang/IllegalArgumentException;
        //  48     72     72     76     Ljava/lang/IllegalArgumentException;
        //  76     93     93     97     Ljava/lang/IllegalArgumentException;
        //  97     116    116    120    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0048:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void l() {
        final PsiBuilder.Marker a7 = this.a7();
        final PsiBuilder.Marker a8 = this.a7();
        Label_0064: {
            try {
                if (OCTokenTypes.IDENTIFIER == this.aF()) {
                    this.myLocalNameScope.defineValue(this.myBuilder.getTokenText(), false, this.myBuilder.getCurrentOffset());
                    this.aY();
                    break Label_0064;
                }
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            this.a("Enum constant name expected");
            try {
                this.aG();
                if (this.aF() == OCTokenTypes.EQ) {
                    this.aY();
                    this.E();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        this.b(a8, OCElementTypes.DECLARATOR);
        this.b(a7, OCElementTypes.DECLARATION);
    }
    
    private void d(final String s) {
        try {
            this.b(false);
            if (this.aF() != OCTokenTypes.LBRACE) {
                this.a("Expecting '{'");
                return;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        this.aY();
        while (true) {
            Label_0054: {
                try {
                    if (this.F()) {
                        break;
                    }
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.RBRACE;
                    if (elementType != ocPunctuatorElementType) {
                        break Label_0054;
                    }
                    break;
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
                try {
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.RBRACE;
                    if (elementType == ocPunctuatorElementType) {
                        break;
                    }
                    if (this.b(s)) {
                        continue;
                    }
                }
                catch (IllegalArgumentException ex3) {
                    throw a(ex3);
                }
            }
            try {
                if (this.aF() == OCTokenTypes.NAMESPACE_CPP_KEYWORD) {
                    this.a("Syntax error");
                    break;
                }
            }
            catch (IllegalArgumentException ex4) {
                throw a(ex4);
            }
            if (this.aF() == OCTokenTypes.LBRACE) {
                this.a("Syntax error");
                final PsiBuilder.Marker a7 = this.a7();
                this.H();
                this.b(a7, OCElementTypes.UNKNOWN_CPP_CODE);
            }
            else {
                this.a("Syntax error", this.BLOCK_STATEMENT_PARSER, OCElementTypes.UNKNOWN_CPP_CODE);
            }
        }
        this.a(OCTokenTypes.RBRACE, "} expected");
    }
    
    private void b(final boolean p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_2       
        //     5: aload_0        
        //     6: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     9: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    12: if_acmpne       356
        //    15: aload_0        
        //    16: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    19: iconst_0       
        //    20: istore_3       
        //    21: aload_0        
        //    22: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    25: ifnull          339
        //    28: aload_0        
        //    29: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    32: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    35: if_acmpeq       339
        //    38: goto            45
        //    41: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    44: athrow         
        //    45: aload_0        
        //    46: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    49: astore          4
        //    51: aload_0        
        //    52: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aG:()Z
        //    55: pop            
        //    56: aload_0        
        //    57: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    60: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.VIRTUAL_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //    63: if_acmpeq       86
        //    66: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.CPP_ACCESS_SPECIFIERS:Lcom/intellij/psi/tree/TokenSet;
        //    69: aload_0        
        //    70: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    73: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    76: ifeq            97
        //    79: goto            86
        //    82: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    85: athrow         
        //    86: aload_0        
        //    87: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    90: goto            56
        //    93: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    96: athrow         
        //    97: aload_0        
        //    98: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   101: astore          5
        //   103: aload           5
        //   105: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   108: if_acmpeq       174
        //   111: aload           5
        //   113: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   116: if_acmpeq       174
        //   119: goto            126
        //   122: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   125: athrow         
        //   126: aload           5
        //   128: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TYPENAME_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   131: if_acmpeq       174
        //   134: goto            141
        //   137: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   140: athrow         
        //   141: aload           5
        //   143: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DECLTYPE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   146: if_acmpeq       174
        //   149: goto            156
        //   152: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   155: athrow         
        //   156: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SIMPLE_TYPE_SPECIFIERS:Lcom/intellij/psi/tree/TokenSet;
        //   159: aload           5
        //   161: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   164: ifeq            324
        //   167: goto            174
        //   170: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   173: athrow         
        //   174: aload_0        
        //   175: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   178: astore          6
        //   180: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SIMPLE_TYPE_SPECIFIERS:Lcom/intellij/psi/tree/TokenSet;
        //   183: aload           5
        //   185: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   188: ifeq            206
        //   191: aload           5
        //   193: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   196: if_acmpne       221
        //   199: goto            206
        //   202: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   205: athrow         
        //   206: aload           5
        //   208: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DECLTYPE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   211: if_acmpne       248
        //   214: goto            221
        //   217: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   220: athrow         
        //   221: aload_0        
        //   222: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   225: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.ANY:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //   228: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;)Z
        //   231: pop            
        //   232: aload_0        
        //   233: aload           6
        //   235: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.TYPE_ELEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   238: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   241: goto            262
        //   244: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   247: athrow         
        //   248: aload_0        
        //   249: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.T:()Ljava/util/List;
        //   252: pop            
        //   253: aload_0        
        //   254: aload           6
        //   256: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.REFERENCE_ELEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   259: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   262: aload_0        
        //   263: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   266: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELLIPSIS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   269: if_acmpne       283
        //   272: aload_0        
        //   273: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   276: goto            283
        //   279: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   282: athrow         
        //   283: aload_0        
        //   284: aload           4
        //   286: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CPP_BASE_CLAUSE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   289: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   292: iconst_1       
        //   293: istore_3       
        //   294: iload_1        
        //   295: ifeq            305
        //   298: goto            339
        //   301: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   304: athrow         
        //   305: aload_0        
        //   306: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   309: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   312: if_acmpne       339
        //   315: aload_0        
        //   316: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   319: iconst_0       
        //   320: istore_3       
        //   321: goto            336
        //   324: aload_0        
        //   325: aload           4
        //   327: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CPP_BASE_CLAUSE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   330: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   333: goto            339
        //   336: goto            21
        //   339: iload_3        
        //   340: ifne            356
        //   343: aload_0        
        //   344: ldc             "Base clause element expected"
        //   346: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   349: goto            356
        //   352: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   355: athrow         
        //   356: aload_0        
        //   357: aload_2        
        //   358: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CPP_BASE_CLAUSE_LIST:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   361: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   364: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  21     38     41     45     Ljava/lang/IllegalArgumentException;
        //  56     79     82     86     Ljava/lang/IllegalArgumentException;
        //  66     93     93     97     Ljava/lang/IllegalArgumentException;
        //  103    119    122    126    Ljava/lang/IllegalArgumentException;
        //  111    134    137    141    Ljava/lang/IllegalArgumentException;
        //  126    149    152    156    Ljava/lang/IllegalArgumentException;
        //  141    167    170    174    Ljava/lang/IllegalArgumentException;
        //  180    199    202    206    Ljava/lang/IllegalArgumentException;
        //  191    214    217    221    Ljava/lang/IllegalArgumentException;
        //  206    244    244    248    Ljava/lang/IllegalArgumentException;
        //  262    276    279    283    Ljava/lang/IllegalArgumentException;
        //  294    301    301    305    Ljava/lang/IllegalArgumentException;
        //  339    349    352    356    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0126:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean b(final String s) {
        try {
            if (this.ad()) {
                return true;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        try {
            if (this.aF() == OCTokenTypes.SEMICOLON) {
                this.aY();
                return true;
            }
        }
        catch (IllegalArgumentException ex2) {
            throw a(ex2);
        }
        return this.a(s, false);
    }
    
    private static boolean f(final IElementType p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //     4: if_acmpeq       52
        //     7: aload_0        
        //     8: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.__ATTRIBUTE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    11: if_acmpeq       52
        //    14: goto            21
        //    17: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    20: athrow         
        //    21: aload_0        
        //    22: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.__DECLSPEC_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    25: if_acmpeq       52
        //    28: goto            35
        //    31: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    34: athrow         
        //    35: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CALL_CONVENTIONS:Lcom/intellij/psi/tree/TokenSet;
        //    38: aload_0        
        //    39: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    42: ifeq            60
        //    45: goto            52
        //    48: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    51: athrow         
        //    52: iconst_1       
        //    53: goto            61
        //    56: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    59: athrow         
        //    60: iconst_0       
        //    61: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      14     17     21     Ljava/lang/IllegalArgumentException;
        //  7      28     31     35     Ljava/lang/IllegalArgumentException;
        //  21     45     48     52     Ljava/lang/IllegalArgumentException;
        //  35     56     56     60     Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0021:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean a(final String p0, final boolean p1) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_3       
        //     5: new             Lcom/intellij/openapi/util/Ref;
        //     8: dup            
        //     9: iconst_0       
        //    10: invokestatic    java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
        //    13: invokespecial   com/intellij/openapi/util/Ref.<init>:(Ljava/lang/Object;)V
        //    16: astore          4
        //    18: new             Lcom/intellij/openapi/util/Ref;
        //    21: dup            
        //    22: iconst_0       
        //    23: invokestatic    java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
        //    26: invokespecial   com/intellij/openapi/util/Ref.<init>:(Ljava/lang/Object;)V
        //    29: astore          5
        //    31: aload_0        
        //    32: aload           4
        //    34: aload           5
        //    36: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/openapi/util/Ref;Lcom/intellij/openapi/util/Ref;)V
        //    39: aconst_null    
        //    40: astore          6
        //    42: iconst_0       
        //    43: istore          7
        //    45: aload_0        
        //    46: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    49: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TEMPLATE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //    52: if_acmpne       81
        //    55: iconst_1       
        //    56: istore          7
        //    58: aload           6
        //    60: ifnonnull       72
        //    63: new             Ljava/util/ArrayList;
        //    66: dup            
        //    67: invokespecial   java/util/ArrayList.<init>:()V
        //    70: astore          6
        //    72: aload_0        
        //    73: aload           6
        //    75: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.c:(Ljava/util/List;)V
        //    78: goto            45
        //    81: aload_0        
        //    82: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    85: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.USING_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //    88: if_acmpne       104
        //    91: aload_0        
        //    92: aload_3        
        //    93: iload           7
        //    95: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/lang/PsiBuilder$Marker;Z)V
        //    98: iconst_1       
        //    99: ireturn        
        //   100: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   103: athrow         
        //   104: aload_0        
        //   105: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   108: ifeq            128
        //   111: aload_0        
        //   112: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   115: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STATIC_ASSERT_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   118: if_acmpeq       145
        //   121: goto            128
        //   124: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   127: athrow         
        //   128: aload_0        
        //   129: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   132: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.STATIC_ASSERT_C_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   135: if_acmpne       156
        //   138: goto            145
        //   141: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   144: athrow         
        //   145: aload_0        
        //   146: aload_3        
        //   147: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.f:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   150: iconst_1       
        //   151: ireturn        
        //   152: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   155: athrow         
        //   156: aload_0        
        //   157: aload           4
        //   159: aload           5
        //   161: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/openapi/util/Ref;Lcom/intellij/openapi/util/Ref;)V
        //   164: aload_0        
        //   165: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   168: astore          8
        //   170: aload           8
        //   172: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TYPEDEF_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   175: if_acmpne       186
        //   178: iconst_1       
        //   179: goto            187
        //   182: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   185: athrow         
        //   186: iconst_0       
        //   187: istore          9
        //   189: aload_0        
        //   190: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.STRUCT:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   193: aload_1        
        //   194: iload           9
        //   196: iload           7
        //   198: aload           4
        //   200: invokevirtual   com/intellij/openapi/util/Ref.get:()Ljava/lang/Object;
        //   203: checkcast       Ljava/lang/Boolean;
        //   206: invokevirtual   java/lang/Boolean.booleanValue:()Z
        //   209: aload           5
        //   211: invokevirtual   com/intellij/openapi/util/Ref.get:()Ljava/lang/Object;
        //   214: checkcast       Ljava/lang/Boolean;
        //   217: invokevirtual   java/lang/Boolean.booleanValue:()Z
        //   220: iconst_1       
        //   221: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.ANY:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //   224: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;Ljava/lang/String;ZZZZZLcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;)Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   227: astore          10
        //   229: aload           10
        //   231: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   234: if_acmpne       260
        //   237: iload           7
        //   239: ifne            260
        //   242: goto            249
        //   245: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   248: athrow         
        //   249: aload_0        
        //   250: aload_3        
        //   251: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   254: iconst_0       
        //   255: ireturn        
        //   256: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   259: athrow         
        //   260: aload_0        
        //   261: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.STRUCT:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   264: iload           9
        //   266: iload           7
        //   268: aload           10
        //   270: aload_1        
        //   271: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZLcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;Ljava/lang/String;)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult;
        //   274: astore          11
        //   276: aload           11
        //   278: getfield        com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult.myType:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type;
        //   281: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type.isOk:()Z
        //   284: ifne            348
        //   287: aload_0        
        //   288: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   291: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   294: if_acmpeq       348
        //   297: goto            304
        //   300: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   303: athrow         
        //   304: aload           10
        //   306: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.EMPTY_TYPE_PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   309: if_acmpne       342
        //   312: goto            319
        //   315: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   318: athrow         
        //   319: iload           7
        //   321: ifne            342
        //   324: goto            331
        //   327: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   330: athrow         
        //   331: aload_0        
        //   332: aload_3        
        //   333: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   336: iconst_0       
        //   337: ireturn        
        //   338: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   341: athrow         
        //   342: aload_0        
        //   343: ldc             "Declarator expected"
        //   345: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   348: aload_0        
        //   349: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   352: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   355: if_acmpne       432
        //   358: aload_0        
        //   359: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorName:Ljava/util/List;
        //   362: astore          12
        //   364: aload_0        
        //   365: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //   368: astore          13
        //   370: aload_0        
        //   371: aload           12
        //   373: aload           13
        //   375: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/util/List;Ljava/lang/String;)V
        //   378: aload_0        
        //   379: aconst_null    
        //   380: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastDeclaratorSingleName:Ljava/lang/String;
        //   383: aload_0        
        //   384: iconst_0       
        //   385: aload_0        
        //   386: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myForceEagerMode:Z
        //   389: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.f:(ZZ)V
        //   392: aload_0        
        //   393: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   396: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CATCH_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   399: if_acmpne       413
        //   402: aload_0        
        //   403: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aM:()V
        //   406: goto            392
        //   409: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   412: athrow         
        //   413: aload_0        
        //   414: aload           12
        //   416: aload           13
        //   418: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Ljava/util/List;Ljava/lang/String;)V
        //   421: aload_0        
        //   422: aload_3        
        //   423: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.FUNCTION_DEFINITION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   426: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   429: goto            527
        //   432: aload_0        
        //   433: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   436: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   439: if_acmpne       453
        //   442: aload_0        
        //   443: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   446: goto            459
        //   449: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   452: athrow         
        //   453: aload_0        
        //   454: ldc             "Missing ';'"
        //   456: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   459: iload           9
        //   461: ifne            501
        //   464: iload_2        
        //   465: ifne            501
        //   468: goto            475
        //   471: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   474: athrow         
        //   475: aload           11
        //   477: getfield        com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult.myType:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type;
        //   480: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type.PARSED_FUNCTION:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorsParsingResult$Type;
        //   483: if_acmpne       501
        //   486: goto            493
        //   489: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   492: athrow         
        //   493: iconst_1       
        //   494: goto            502
        //   497: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   500: athrow         
        //   501: iconst_0       
        //   502: istore          12
        //   504: aload_0        
        //   505: aload_3        
        //   506: iload           12
        //   508: ifeq            521
        //   511: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.FUNCTION_DECLARATION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   514: goto            524
        //   517: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   520: athrow         
        //   521: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DECLARATION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   524: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   527: iconst_1       
        //   528: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  81     100    100    104    Ljava/lang/IllegalArgumentException;
        //  104    121    124    128    Ljava/lang/IllegalArgumentException;
        //  111    138    141    145    Ljava/lang/IllegalArgumentException;
        //  128    152    152    156    Ljava/lang/IllegalArgumentException;
        //  170    182    182    186    Ljava/lang/IllegalArgumentException;
        //  229    242    245    249    Ljava/lang/IllegalArgumentException;
        //  237    256    256    260    Ljava/lang/IllegalArgumentException;
        //  276    297    300    304    Ljava/lang/IllegalArgumentException;
        //  287    312    315    319    Ljava/lang/IllegalArgumentException;
        //  304    324    327    331    Ljava/lang/IllegalArgumentException;
        //  319    338    338    342    Ljava/lang/IllegalArgumentException;
        //  392    409    409    413    Ljava/lang/IllegalArgumentException;
        //  432    449    449    453    Ljava/lang/IllegalArgumentException;
        //  459    468    471    475    Ljava/lang/IllegalArgumentException;
        //  464    486    489    493    Ljava/lang/IllegalArgumentException;
        //  475    497    497    501    Ljava/lang/IllegalArgumentException;
        //  504    517    517    521    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0128:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void a(final Ref<Boolean> p0, final Ref<Boolean> p1) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     4: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.f:(Lcom/intellij/psi/tree/IElementType;)Z
        //     7: ifne            64
        //    10: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DECLARATION_SPECIFIERS_IN_TYPES:Lcom/intellij/psi/tree/TokenSet;
        //    13: aload_0        
        //    14: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    17: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    20: ifne            64
        //    23: goto            30
        //    26: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    29: athrow         
        //    30: aload_0        
        //    31: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //    34: ifne            195
        //    37: goto            44
        //    40: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    43: athrow         
        //    44: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AUTO_KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //    47: aload_0        
        //    48: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    51: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    54: ifeq            195
        //    57: goto            64
        //    60: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    63: athrow         
        //    64: aload_0        
        //    65: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aG:()Z
        //    68: ifeq            85
        //    71: goto            78
        //    74: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    77: athrow         
        //    78: goto            0
        //    81: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    84: athrow         
        //    85: aload_0        
        //    86: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    89: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.f:(Lcom/intellij/psi/tree/IElementType;)Z
        //    92: ifeq            108
        //    95: aload_0        
        //    96: ldc             "Attribute, decltype or declaration specifier expected"
        //    98: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   101: goto            108
        //   104: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   107: athrow         
        //   108: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AUTO_KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //   111: aload_0        
        //   112: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   115: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   118: ifeq            141
        //   121: aload_1        
        //   122: iconst_1       
        //   123: invokestatic    java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
        //   126: invokevirtual   com/intellij/openapi/util/Ref.set:(Ljava/lang/Object;)V
        //   129: aload_0        
        //   130: iconst_1       
        //   131: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myForceEagerMode:Z
        //   134: goto            141
        //   137: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   140: athrow         
        //   141: aload_0        
        //   142: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   145: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CONSTEXPR_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   148: if_acmpne       163
        //   151: aload_0        
        //   152: iconst_1       
        //   153: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myForceEagerMode:Z
        //   156: goto            163
        //   159: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   162: athrow         
        //   163: aload_0        
        //   164: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   167: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.FRIEND_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   170: if_acmpne       188
        //   173: aload_2        
        //   174: iconst_1       
        //   175: invokestatic    java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
        //   178: invokevirtual   com/intellij/openapi/util/Ref.set:(Ljava/lang/Object;)V
        //   181: goto            188
        //   184: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   187: athrow         
        //   188: aload_0        
        //   189: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   192: goto            0
        //   195: return         
        //    Signature:
        //  (Lcom/intellij/openapi/util/Ref<Ljava/lang/Boolean;>;Lcom/intellij/openapi/util/Ref<Ljava/lang/Boolean;>;)V
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      23     26     30     Ljava/lang/IllegalArgumentException;
        //  10     37     40     44     Ljava/lang/IllegalArgumentException;
        //  30     57     60     64     Ljava/lang/IllegalArgumentException;
        //  44     71     74     78     Ljava/lang/IllegalArgumentException;
        //  64     81     81     85     Ljava/lang/IllegalArgumentException;
        //  85     101    104    108    Ljava/lang/IllegalArgumentException;
        //  108    134    137    141    Ljava/lang/IllegalArgumentException;
        //  141    156    159    163    Ljava/lang/IllegalArgumentException;
        //  163    181    184    188    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0030:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean d(final boolean b) {
        return this.d(b, false);
    }
    
    private boolean d(final boolean b, final boolean b2) {
        final PsiBuilder.Marker a7 = this.a7();
        try {
            if (!this.b(b, b2)) {
                a7.drop();
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        try {
            if (OCTokenTypes.ASSIGNMENT_OPERATIONS.contains(this.B())) {
                this.aY();
                this.d(false, b2);
                this.b(a7, OCElementTypes.ASSIGNMENT_EXPRESSION);
                return true;
            }
        }
        catch (IllegalArgumentException ex2) {
            throw a(ex2);
        }
        a7.drop();
        return true;
    }
    
    private boolean b(final boolean b, final boolean b2) {
        final PsiBuilder.Marker a7 = this.a7();
        try {
            if (!this.e(b, b2)) {
                a7.drop();
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        if (this.aF() == OCTokenTypes.QUEST) {
            this.aY();
            final MessagePassingContext myIsInMessagePassingParameter = this.myIsInMessagePassingParameter;
            this.myIsInMessagePassingParameter = MessagePassingContext.None;
            try {
                this.n(true);
            }
            finally {
                this.myIsInMessagePassingParameter = myIsInMessagePassingParameter;
            }
            this.a(OCTokenTypes.COLON, "Expecting ':'");
            this.d(false, b2);
            this.b(a7, OCElementTypes.CONDITIONAL_EXPRESSION);
        }
        else {
            a7.drop();
        }
        return true;
    }
    
    private boolean e(final boolean b, final boolean b2) {
        PsiBuilder.Marker marker = this.a7();
        try {
            if (!this.a(b, b2)) {
                marker.drop();
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        while (this.aF() == OCTokenTypes.OROR) {
            this.aY();
            this.a(false, b2);
            this.b(marker, OCElementTypes.BINARY_EXPRESSION);
            marker = marker.precede();
        }
        marker.drop();
        return true;
    }
    
    private boolean a(final boolean b, final boolean b2) {
        PsiBuilder.Marker marker = this.a7();
        try {
            if (!this.j(b, b2)) {
                marker.drop();
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        while (this.B() == OCTokenTypes.ANDAND) {
            this.aY();
            this.j(false, b2);
            this.b(marker, OCElementTypes.BINARY_EXPRESSION);
            marker = marker.precede();
        }
        marker.drop();
        return true;
    }
    
    private boolean j(final boolean b, final boolean b2) {
        PsiBuilder.Marker marker = this.a7();
        try {
            if (!this.g(b, b2)) {
                marker.drop();
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        while (this.B() == OCTokenTypes.OR) {
            this.aY();
            this.g(false, b2);
            this.b(marker, OCElementTypes.BINARY_EXPRESSION);
            marker = marker.precede();
        }
        marker.drop();
        return true;
    }
    
    private boolean g(final boolean b, final boolean b2) {
        PsiBuilder.Marker marker = this.a7();
        try {
            if (!this.c(b, b2)) {
                marker.drop();
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        while (this.B() == OCTokenTypes.XOR) {
            this.aY();
            this.c(false, b2);
            this.b(marker, OCElementTypes.BINARY_EXPRESSION);
            marker = marker.precede();
        }
        marker.drop();
        return true;
    }
    
    private boolean c(final boolean b, final boolean b2) {
        PsiBuilder.Marker marker = this.a7();
        try {
            if (!this.k(b, b2)) {
                marker.drop();
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        while (this.B() == OCTokenTypes.AND) {
            this.aY();
            this.k(false, b2);
            this.b(marker, OCElementTypes.BINARY_EXPRESSION);
            marker = marker.precede();
        }
        marker.drop();
        return true;
    }
    
    private boolean k(final boolean b, final boolean b2) {
        PsiBuilder.Marker marker = this.a7();
        try {
            if (!this.h(b, b2)) {
                marker.drop();
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        while (true) {
            try {
                if (this.aF() != OCTokenTypes.EQEQ) {
                    if (this.B() != OCTokenTypes.EXCLEQ) {
                        break;
                    }
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
            this.aY();
            this.h(false, b2);
            this.b(marker, OCElementTypes.BINARY_EXPRESSION);
            marker = marker.precede();
        }
        marker.drop();
        return true;
    }
    
    private boolean h(final boolean p0, final boolean p1) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_3       
        //     5: aload_0        
        //     6: iload_1        
        //     7: iload_2        
        //     8: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(ZZ)Z
        //    11: ifne            26
        //    14: aload_3        
        //    15: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //    20: iconst_0       
        //    21: ireturn        
        //    22: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    25: athrow         
        //    26: aload_0        
        //    27: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    30: astore          4
        //    32: aload           4
        //    34: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    37: if_acmpeq       110
        //    40: iload_2        
        //    41: ifne            80
        //    44: goto            51
        //    47: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    50: athrow         
        //    51: aload_0        
        //    52: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myTemplateGTGT:Z
        //    55: ifne            80
        //    58: goto            65
        //    61: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    64: athrow         
        //    65: aload           4
        //    67: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    70: if_acmpeq       110
        //    73: goto            80
        //    76: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    79: athrow         
        //    80: aload           4
        //    82: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LTEQ:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    85: if_acmpeq       110
        //    88: goto            95
        //    91: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    94: athrow         
        //    95: aload           4
        //    97: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GTEQ:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   100: if_acmpne       145
        //   103: goto            110
        //   106: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   109: athrow         
        //   110: aload_0        
        //   111: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   114: aload_0        
        //   115: iconst_0       
        //   116: iload_2        
        //   117: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(ZZ)Z
        //   120: pop            
        //   121: aload_0        
        //   122: aload_3        
        //   123: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.BINARY_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   126: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   129: aload_3        
        //   130: invokeinterface com/intellij/lang/PsiBuilder$Marker.precede:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   135: astore_3       
        //   136: aload_0        
        //   137: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   140: astore          4
        //   142: goto            32
        //   145: aload_3        
        //   146: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   151: iconst_1       
        //   152: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      22     22     26     Ljava/lang/IllegalArgumentException;
        //  32     44     47     51     Ljava/lang/IllegalArgumentException;
        //  40     58     61     65     Ljava/lang/IllegalArgumentException;
        //  51     73     76     80     Ljava/lang/IllegalArgumentException;
        //  65     88     91     95     Ljava/lang/IllegalArgumentException;
        //  80     103    106    110    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0051:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean i(final boolean b, final boolean b2) {
        PsiBuilder.Marker marker = this.a7();
        try {
            if (!this.h(b)) {
                marker.drop();
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        while (true) {
            Label_0046: {
                try {
                    if (this.aF() == OCTokenTypes.LTLT) {
                        break Label_0046;
                    }
                    final boolean b3 = b2;
                    if (!b3) {
                        break Label_0046;
                    }
                    break;
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
                try {
                    final boolean b3 = b2;
                    if (b3) {
                        break;
                    }
                    if (this.aF() != OCTokenTypes.GTGT) {
                        break;
                    }
                }
                catch (IllegalArgumentException ex3) {
                    throw a(ex3);
                }
            }
            this.aY();
            this.h(false);
            this.b(marker, OCElementTypes.BINARY_EXPRESSION);
            marker = marker.precede();
        }
        marker.drop();
        return true;
    }
    
    private boolean h(final boolean b) {
        PsiBuilder.Marker marker = this.a7();
        try {
            if (!this.j(b)) {
                marker.drop();
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        while (true) {
            try {
                if (this.aF() != OCTokenTypes.PLUS) {
                    if (this.aF() != OCTokenTypes.MINUS) {
                        break;
                    }
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
            this.aY();
            this.j(false);
            this.b(marker, OCElementTypes.BINARY_EXPRESSION);
            marker = marker.precede();
        }
        marker.drop();
        return true;
    }
    
    private boolean j(final boolean b) {
        PsiBuilder.Marker marker = this.a7();
        try {
            if (!this.s(b)) {
                marker.drop();
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        while (true) {
            Label_0052: {
                try {
                    if (this.aF() == OCTokenTypes.MUL) {
                        break Label_0052;
                    }
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.DIV;
                    if (elementType != ocPunctuatorElementType) {
                        break Label_0052;
                    }
                    break Label_0052;
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
                try {
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.DIV;
                    if (elementType != ocPunctuatorElementType) {
                        if (this.aF() != OCTokenTypes.PERC) {
                            break;
                        }
                    }
                }
                catch (IllegalArgumentException ex3) {
                    throw a(ex3);
                }
            }
            this.aY();
            this.s(false);
            this.b(marker, OCElementTypes.BINARY_EXPRESSION);
            marker = marker.precede();
        }
        marker.drop();
        return true;
    }
    
    private boolean s(final boolean b) {
        PsiBuilder.Marker marker = this.a7();
        try {
            if (!this.l(b)) {
                marker.drop();
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        while (true) {
            try {
                if (this.aF() != OCTokenTypes.DOT_MUL) {
                    if (this.aF() != OCTokenTypes.DEREF_MUL) {
                        break;
                    }
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
            this.aY();
            this.l(false);
            this.b(marker, OCElementTypes.BINARY_EXPRESSION);
            marker = marker.precede();
        }
        marker.drop();
        return true;
    }
    
    private boolean aX() {
        if (OCTokenTypes.CPP_CAST_OPERATIONS.contains(this.aF())) {
            final PsiBuilder.Marker a7 = this.a7();
            this.aY();
            this.a(OCTokenTypes.LT, "Expecting '<'");
            this.aS();
            this.a(OCTokenTypes.GT, "Expecting '>'");
            this.a(OCTokenTypes.LPAR, "Expecting '('");
            this.n(false);
            this.a(OCTokenTypes.RPAR, "Expecting ')'");
            this.b(a7, OCElementTypes.CAST_EXPRESSION);
            return true;
        }
        return false;
    }
    
    private boolean l(final boolean p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     4: astore_2       
        //     5: aload_2        
        //     6: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //     9: if_acmpne       492
        //    12: aload_0        
        //    13: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    16: astore_3       
        //    17: aload_0        
        //    18: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    21: aload_0        
        //    22: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:()Lcom/intellij/psi/tree/IElementType;
        //    25: astore          4
        //    27: aload           4
        //    29: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    32: if_acmpeq       50
        //    35: aload           4
        //    37: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    40: if_acmpne       58
        //    43: goto            50
        //    46: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    49: athrow         
        //    50: iconst_1       
        //    51: goto            59
        //    54: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    57: athrow         
        //    58: iconst_0       
        //    59: istore          5
        //    61: aload_0        
        //    62: iconst_0       
        //    63: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Z)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //    66: astore          6
        //    68: aload_0        
        //    69: aload_3        
        //    70: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //    73: aload_0        
        //    74: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    77: astore          7
        //    79: aload_0        
        //    80: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.NON_EXACT_VALUES:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //    83: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;)Z
        //    86: ifne            105
        //    89: aload_0        
        //    90: aload           7
        //    92: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //    95: aload_0        
        //    96: iload_1        
        //    97: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:(Z)Z
        //   100: ireturn        
        //   101: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   104: athrow         
        //   105: aload_0        
        //   106: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   109: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   112: if_acmpne       126
        //   115: aload_0        
        //   116: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ab:()V
        //   119: goto            481
        //   122: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   125: athrow         
        //   126: aload_0        
        //   127: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   130: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   133: if_acmpeq       267
        //   136: aload_0        
        //   137: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   140: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   143: if_acmpeq       267
        //   146: goto            153
        //   149: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   152: athrow         
        //   153: aload_0        
        //   154: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   157: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   160: if_acmpeq       267
        //   163: goto            170
        //   166: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   169: athrow         
        //   170: aload           4
        //   172: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   175: if_acmpeq       215
        //   178: goto            185
        //   181: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   184: athrow         
        //   185: aload           4
        //   187: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.OPERATOR_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   190: if_acmpeq       215
        //   193: goto            200
        //   196: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   199: athrow         
        //   200: aload           4
        //   202: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   205: if_acmpne       283
        //   208: goto            215
        //   211: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   214: athrow         
        //   215: aload           6
        //   217: invokestatic    com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.isType:(Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;)Z
        //   220: ifne            283
        //   223: goto            230
        //   226: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   229: athrow         
        //   230: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LITERALS:Lcom/intellij/psi/tree/TokenSet;
        //   233: aload_0        
        //   234: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   237: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   240: ifne            283
        //   243: goto            250
        //   246: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   249: athrow         
        //   250: aload_0        
        //   251: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   254: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   257: if_acmpeq       283
        //   260: goto            267
        //   263: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   266: athrow         
        //   267: aload_0        
        //   268: aload           7
        //   270: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   273: aload_0        
        //   274: iconst_0       
        //   275: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:(Z)Z
        //   278: ireturn        
        //   279: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   282: athrow         
        //   283: aload_0        
        //   284: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   287: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   290: if_acmpne       430
        //   293: aload_0        
        //   294: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   297: astore          8
        //   299: aload_0        
        //   300: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   303: aload_0        
        //   304: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInMessagePassingParameter:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //   307: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext.InReiceiver:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //   310: if_acmpne       321
        //   313: iconst_1       
        //   314: goto            322
        //   317: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   320: athrow         
        //   321: iconst_0       
        //   322: istore          9
        //   324: iload           9
        //   326: ifne            346
        //   329: aload_0        
        //   330: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInMessagePassingParameter:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //   333: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext.InParameter:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //   336: if_acmpne       354
        //   339: goto            346
        //   342: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   345: athrow         
        //   346: iconst_1       
        //   347: goto            355
        //   350: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   353: athrow         
        //   354: iconst_0       
        //   355: istore          10
        //   357: iload           10
        //   359: ifeq            379
        //   362: aload_0        
        //   363: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   366: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   369: if_acmpeq       408
        //   372: goto            379
        //   375: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   378: athrow         
        //   379: iload           9
        //   381: ifeq            424
        //   384: goto            391
        //   387: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   390: athrow         
        //   391: aload_0        
        //   392: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   395: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   398: if_acmpne       424
        //   401: goto            408
        //   404: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   407: athrow         
        //   408: aload_0        
        //   409: aload           7
        //   411: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   414: aload_0        
        //   415: iload_1        
        //   416: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:(Z)Z
        //   419: ireturn        
        //   420: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   423: athrow         
        //   424: aload_0        
        //   425: aload           8
        //   427: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   430: aload_0        
        //   431: iconst_0       
        //   432: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.l:(Z)Z
        //   435: ifne            481
        //   438: iload           5
        //   440: ifeq            465
        //   443: goto            450
        //   446: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   449: athrow         
        //   450: aload           6
        //   452: invokestatic    com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.isValue:(Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;)Z
        //   455: ifeq            481
        //   458: goto            465
        //   461: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   464: athrow         
        //   465: aload_0        
        //   466: aload           7
        //   468: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   471: aload_0        
        //   472: iconst_0       
        //   473: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:(Z)Z
        //   476: ireturn        
        //   477: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   480: athrow         
        //   481: aload_0        
        //   482: aload           7
        //   484: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CAST_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   487: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   490: iconst_1       
        //   491: ireturn        
        //   492: aload_0        
        //   493: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   496: ifeq            758
        //   499: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SIMPLE_TYPE_SPECIFIERS:Lcom/intellij/psi/tree/TokenSet;
        //   502: aload_2        
        //   503: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   506: ifeq            530
        //   509: goto            516
        //   512: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   515: athrow         
        //   516: aload_2        
        //   517: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   520: if_acmpne       558
        //   523: goto            530
        //   526: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   529: athrow         
        //   530: aload_2        
        //   531: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DECLTYPE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   534: if_acmpeq       558
        //   537: goto            544
        //   540: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   543: athrow         
        //   544: aload_2        
        //   545: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.UNDERLYING_TYPE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   548: if_acmpne       758
        //   551: goto            558
        //   554: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   557: athrow         
        //   558: aload_0        
        //   559: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   562: astore_3       
        //   563: aload_0        
        //   564: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   567: astore          4
        //   569: aload_2        
        //   570: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DECLTYPE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   573: if_acmpne       588
        //   576: aload_0        
        //   577: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ah:()Z
        //   580: pop            
        //   581: goto            677
        //   584: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   587: athrow         
        //   588: aload_2        
        //   589: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.UNDERLYING_TYPE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   592: if_acmpne       611
        //   595: aload_0        
        //   596: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   599: aload_0        
        //   600: iconst_0       
        //   601: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.t:(Z)V
        //   604: goto            677
        //   607: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   610: athrow         
        //   611: aload_0        
        //   612: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   615: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SIMPLE_TYPE_SPECIFIERS:Lcom/intellij/psi/tree/TokenSet;
        //   618: aload_0        
        //   619: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   622: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   625: ifeq            656
        //   628: aload_0        
        //   629: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   632: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   635: if_acmpeq       656
        //   638: goto            645
        //   641: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   644: athrow         
        //   645: aload_0        
        //   646: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   649: goto            615
        //   652: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   655: athrow         
        //   656: aload_0        
        //   657: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   660: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   663: if_acmpne       677
        //   666: aload_0        
        //   667: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.Z:()V
        //   670: goto            656
        //   673: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   676: athrow         
        //   677: aload_0        
        //   678: aload           4
        //   680: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.TYPE_ELEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   683: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   686: aload_0        
        //   687: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   690: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   693: if_acmpne       707
        //   696: aload_0        
        //   697: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.R:()V
        //   700: goto            748
        //   703: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   706: athrow         
        //   707: aload_0        
        //   708: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   711: ifeq            742
        //   714: aload_0        
        //   715: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   718: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   721: if_acmpne       742
        //   724: goto            731
        //   727: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   730: athrow         
        //   731: aload_0        
        //   732: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ab:()V
        //   735: goto            748
        //   738: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   741: athrow         
        //   742: aload_0        
        //   743: ldc             "Expected '('"
        //   745: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   748: aload_0        
        //   749: aload_3        
        //   750: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CAST_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   753: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   756: iconst_1       
        //   757: ireturn        
        //   758: aload_0        
        //   759: iload_1        
        //   760: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:(Z)Z
        //   763: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  27     43     46     50     Ljava/lang/IllegalArgumentException;
        //  35     54     54     58     Ljava/lang/IllegalArgumentException;
        //  79     101    101    105    Ljava/lang/IllegalArgumentException;
        //  105    122    122    126    Ljava/lang/IllegalArgumentException;
        //  126    146    149    153    Ljava/lang/IllegalArgumentException;
        //  136    163    166    170    Ljava/lang/IllegalArgumentException;
        //  153    178    181    185    Ljava/lang/IllegalArgumentException;
        //  170    193    196    200    Ljava/lang/IllegalArgumentException;
        //  185    208    211    215    Ljava/lang/IllegalArgumentException;
        //  200    223    226    230    Ljava/lang/IllegalArgumentException;
        //  215    243    246    250    Ljava/lang/IllegalArgumentException;
        //  230    260    263    267    Ljava/lang/IllegalArgumentException;
        //  250    279    279    283    Ljava/lang/IllegalArgumentException;
        //  299    317    317    321    Ljava/lang/IllegalArgumentException;
        //  324    339    342    346    Ljava/lang/IllegalArgumentException;
        //  329    350    350    354    Ljava/lang/IllegalArgumentException;
        //  357    372    375    379    Ljava/lang/IllegalArgumentException;
        //  362    384    387    391    Ljava/lang/IllegalArgumentException;
        //  379    401    404    408    Ljava/lang/IllegalArgumentException;
        //  391    420    420    424    Ljava/lang/IllegalArgumentException;
        //  430    443    446    450    Ljava/lang/IllegalArgumentException;
        //  438    458    461    465    Ljava/lang/IllegalArgumentException;
        //  450    477    477    481    Ljava/lang/IllegalArgumentException;
        //  492    509    512    516    Ljava/lang/IllegalArgumentException;
        //  499    523    526    530    Ljava/lang/IllegalArgumentException;
        //  516    537    540    544    Ljava/lang/IllegalArgumentException;
        //  530    551    554    558    Ljava/lang/IllegalArgumentException;
        //  569    584    584    588    Ljava/lang/IllegalArgumentException;
        //  588    607    607    611    Ljava/lang/IllegalArgumentException;
        //  615    638    641    645    Ljava/lang/IllegalArgumentException;
        //  628    652    652    656    Ljava/lang/IllegalArgumentException;
        //  656    673    673    677    Ljava/lang/IllegalArgumentException;
        //  677    703    703    707    Ljava/lang/IllegalArgumentException;
        //  707    724    727    731    Ljava/lang/IllegalArgumentException;
        //  714    738    738    742    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0153:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean a(final DeclarationContext declarationContext, final TypeParsingExpectation typeParsingExpectation) {
        try {
            if (!this.a(declarationContext, typeParsingExpectation, true).isEmpty()) {
                return true;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        return false;
    }
    
    private TypeParsingResult a(final DeclarationContext p0, final TypeParsingExpectation p1, final boolean p2) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     4: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TYPEOF_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //     7: if_acmpeq       27
        //    10: aload_0        
        //    11: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    14: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DECLTYPE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //    17: if_acmpne       55
        //    20: goto            27
        //    23: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    26: athrow         
        //    27: aload_0        
        //    28: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ah:()Z
        //    31: ifeq            51
        //    34: goto            41
        //    37: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    40: athrow         
        //    41: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED_FOR_SURE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //    44: goto            54
        //    47: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    50: athrow         
        //    51: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //    54: areturn        
        //    55: aload_0        
        //    56: iconst_0       
        //    57: aload_1        
        //    58: aload_2        
        //    59: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(ZLcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;)Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //    62: astore          4
        //    64: aload           4
        //    66: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //    69: if_acmpne       79
        //    72: aload           4
        //    74: areturn        
        //    75: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    78: athrow         
        //    79: aload_0        
        //    80: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideTypeNameParsing:Z
        //    83: istore          5
        //    85: aload_0        
        //    86: iconst_1       
        //    87: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideTypeNameParsing:Z
        //    90: aload_0        
        //    91: aload_1        
        //    92: iconst_1       
        //    93: iconst_0       
        //    94: iconst_0       
        //    95: iload_3        
        //    96: aload           4
        //    98: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.UNKNOWN:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   101: if_acmpeq       112
        //   104: iconst_1       
        //   105: goto            113
        //   108: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   111: athrow         
        //   112: iconst_0       
        //   113: iconst_0       
        //   114: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED_FOR_SURE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   117: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZZZZZLcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //   120: astore          6
        //   122: aload_0        
        //   123: iload           5
        //   125: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideTypeNameParsing:Z
        //   128: aload           6
        //   130: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.isOk:()Z
        //   133: ifne            144
        //   136: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.NONE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   139: areturn        
        //   140: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   143: athrow         
        //   144: aload           4
        //   146: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.isEmpty:()Z
        //   149: ifeq            175
        //   152: aload           6
        //   154: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.isEmpty:()Z
        //   157: ifne            175
        //   160: goto            167
        //   163: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   166: athrow         
        //   167: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   170: areturn        
        //   171: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   174: athrow         
        //   175: aload           6
        //   177: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult.PARSED_EMPTY:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //   180: if_acmpeq       206
        //   183: aload           4
        //   185: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.UNKNOWN:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   188: if_acmpne       206
        //   191: goto            198
        //   194: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   197: athrow         
        //   198: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   201: areturn        
        //   202: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   205: athrow         
        //   206: aload           4
        //   208: areturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      20     23     27     Ljava/lang/IllegalArgumentException;
        //  10     34     37     41     Ljava/lang/IllegalArgumentException;
        //  27     47     47     51     Ljava/lang/IllegalArgumentException;
        //  64     75     75     79     Ljava/lang/IllegalArgumentException;
        //  85     108    108    112    Ljava/lang/IllegalArgumentException;
        //  122    140    140    144    Ljava/lang/IllegalArgumentException;
        //  144    160    163    167    Ljava/lang/IllegalArgumentException;
        //  152    171    171    175    Ljava/lang/IllegalArgumentException;
        //  175    191    194    198    Ljava/lang/IllegalArgumentException;
        //  183    202    202    206    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0027:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean D() {
        final PsiBuilder.Marker a7 = this.a7();
        boolean b = true;
        Label_0090: {
            Label_0034: {
                try {
                    if (this.aF() == OCTokenTypes.TYPEOF_KEYWORD) {
                        break Label_0034;
                    }
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final OCKeywordElementType ocKeywordElementType = OCTokenTypes.DECLTYPE_CPP_KEYWORD;
                    if (elementType == ocKeywordElementType) {
                        break Label_0034;
                    }
                    break Label_0034;
                }
                catch (IllegalArgumentException ex) {
                    throw a(ex);
                }
                try {
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final OCKeywordElementType ocKeywordElementType = OCTokenTypes.DECLTYPE_CPP_KEYWORD;
                    if (elementType == ocKeywordElementType) {
                        this.ah();
                        break Label_0090;
                    }
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
            }
            if (this.a(DeclarationContext.CODE_BLOCK, null, false, true, false, false, false, TypeParsingExpectation.ANY) == TypeParsingResult.NONE) {
                b = false;
            }
            else {
                this.a(DeclarationContext.CPP_NEW_EXPRESSION, true, false, false, true, true, false, TypeParsingResult.TYPE_PARSED_FOR_SURE);
            }
        }
        this.b(a7, OCElementTypes.TYPE_ELEMENT);
        return b;
    }
    
    private boolean k(final boolean p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     4: astore_2       
        //     5: aload_2        
        //     6: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.PLUSPLUS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //     9: if_acmpeq       26
        //    12: aload_2        
        //    13: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.MINUSMINUS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    16: if_acmpne       51
        //    19: goto            26
        //    22: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    25: athrow         
        //    26: aload_0        
        //    27: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    30: astore_3       
        //    31: aload_0        
        //    32: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    35: aload_0        
        //    36: iconst_0       
        //    37: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:(Z)Z
        //    40: pop            
        //    41: aload_0        
        //    42: aload_3        
        //    43: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.PREFIX_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    46: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //    49: iconst_1       
        //    50: ireturn        
        //    51: aload_2        
        //    52: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SIZEOF_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    55: if_acmpeq       86
        //    58: aload_2        
        //    59: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALIGNOF_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    62: if_acmpeq       86
        //    65: goto            72
        //    68: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    71: athrow         
        //    72: aload_2        
        //    73: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALIGNOF_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //    76: if_acmpne       95
        //    79: goto            86
        //    82: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    85: athrow         
        //    86: aload_0        
        //    87: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aw:()Z
        //    90: ireturn        
        //    91: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    94: athrow         
        //    95: aload_0        
        //    96: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    99: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NOEXCEPT_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   102: if_acmpne       114
        //   105: aload_0        
        //   106: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aR:()Z
        //   109: ireturn        
        //   110: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   113: athrow         
        //   114: aload_0        
        //   115: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   118: ifeq            204
        //   121: aload_0        
        //   122: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   125: astore_3       
        //   126: aload_2        
        //   127: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   130: if_acmpne       144
        //   133: aload_0        
        //   134: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   137: goto            144
        //   140: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   143: athrow         
        //   144: aload_0        
        //   145: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   148: astore_2       
        //   149: aload_2        
        //   150: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NEW_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   153: if_acmpne       174
        //   156: aload_0        
        //   157: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.al:()V
        //   160: aload_0        
        //   161: aload_3        
        //   162: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CPP_NEW_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   165: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   168: iconst_1       
        //   169: ireturn        
        //   170: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   173: athrow         
        //   174: aload_2        
        //   175: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DELETE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   178: if_acmpne       199
        //   181: aload_0        
        //   182: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aT:()V
        //   185: aload_0        
        //   186: aload_3        
        //   187: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CPP_DELETE_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   190: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   193: iconst_1       
        //   194: ireturn        
        //   195: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   198: athrow         
        //   199: aload_0        
        //   200: aload_3        
        //   201: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   204: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.UNARY_OPERATIONS:Lcom/intellij/psi/tree/TokenSet;
        //   207: aload_0        
        //   208: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.B:()Lcom/intellij/psi/tree/IElementType;
        //   211: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   214: ifeq            242
        //   217: aload_0        
        //   218: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   221: astore_3       
        //   222: aload_0        
        //   223: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   226: aload_0        
        //   227: iconst_0       
        //   228: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.l:(Z)Z
        //   231: pop            
        //   232: aload_0        
        //   233: aload_3        
        //   234: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.UNARY_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   237: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   240: iconst_1       
        //   241: ireturn        
        //   242: aload_0        
        //   243: iload_1        
        //   244: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.e:(Z)Z
        //   247: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      19     22     26     Ljava/lang/IllegalArgumentException;
        //  51     65     68     72     Ljava/lang/IllegalArgumentException;
        //  58     79     82     86     Ljava/lang/IllegalArgumentException;
        //  72     91     91     95     Ljava/lang/IllegalArgumentException;
        //  95     110    110    114    Ljava/lang/IllegalArgumentException;
        //  126    137    140    144    Ljava/lang/IllegalArgumentException;
        //  149    170    170    174    Ljava/lang/IllegalArgumentException;
        //  174    195    195    199    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0072:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean e(final boolean b) {
        PsiBuilder.Marker marker = this.a7();
        while (true) {
            try {
                if (OCTokenTypes.CPP_CAST_OPERATIONS.contains(this.aF())) {
                    this.aX();
                    break Label_0050;
                }
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            Block_2: {
                break Block_2;
                while (true) {
                    final IElementType af = this.aF();
                    Label_0299: {
                        if (af == OCTokenTypes.LBRACKET) {
                            final PsiBuilder.Marker a7 = this.a7();
                            this.aY();
                            final MessagePassingContext myIsInMessagePassingParameter = this.myIsInMessagePassingParameter;
                            try {
                                this.myIsInMessagePassingParameter = MessagePassingContext.None;
                                this.n(false);
                                this.myIsInMessagePassingParameter = myIsInMessagePassingParameter;
                                if (this.aF() == OCTokenTypes.SEMICOLON) {
                                    this.a("Expecting ']'");
                                    this.aY();
                                }
                            }
                            catch (IllegalArgumentException ex2) {
                                throw a(ex2);
                            }
                            Label_0160: {
                                Label_0169: {
                                    try {
                                        if (this.aF() == OCTokenTypes.RBRACKET) {
                                            a7.drop();
                                            this.aY();
                                            this.b(marker, OCElementTypes.ARRAY_INDEX_EXPRESSION);
                                            break Label_0169;
                                        }
                                    }
                                    catch (IllegalArgumentException ex3) {
                                        throw a(ex3);
                                    }
                                    break Label_0160;
                                }
                                break Label_0299;
                            }
                            this.i(a7);
                            break;
                        }
                        try {
                            if (af == OCTokenTypes.LPAR) {
                                this.R();
                                this.b(marker, OCElementTypes.CALL_EXPRESSION);
                                break Label_0299;
                            }
                        }
                        catch (IllegalArgumentException ex4) {
                            throw a(ex4);
                        }
                        Label_0280: {
                            Label_0259: {
                                try {
                                    if (af != OCTokenTypes.DOT) {
                                        if (af != OCTokenTypes.DEREF) {
                                            break Label_0259;
                                        }
                                    }
                                }
                                catch (IllegalArgumentException ex5) {
                                    throw a(ex5);
                                }
                                final PsiBuilder.Marker a8 = this.a7();
                                this.aY();
                                this.b(a8, OCElementTypes.QUALIFIED_EXPRESSION_ACCESSOR);
                                this.a(null, false, true, false, (String)null);
                                this.b(marker, OCElementTypes.QUALIFIED_EXPRESSION);
                                break Label_0299;
                                try {
                                    if (af == OCTokenTypes.PLUSPLUS) {
                                        break Label_0280;
                                    }
                                    final OCPunctuatorElementType ocPunctuatorElementType = (OCPunctuatorElementType)af;
                                    final OCPunctuatorElementType ocPunctuatorElementType2 = OCTokenTypes.MINUSMINUS;
                                    if (ocPunctuatorElementType == ocPunctuatorElementType2) {
                                        break Label_0280;
                                    }
                                    break;
                                }
                                catch (IllegalArgumentException ex6) {
                                    throw a(ex6);
                                }
                            }
                            try {
                                final OCPunctuatorElementType ocPunctuatorElementType = (OCPunctuatorElementType)af;
                                final OCPunctuatorElementType ocPunctuatorElementType2 = OCTokenTypes.MINUSMINUS;
                                if (ocPunctuatorElementType != ocPunctuatorElementType2) {
                                    break;
                                }
                                this.aY();
                                this.b(marker, OCElementTypes.POSTFIX_EXPRESSION);
                            }
                            catch (IllegalArgumentException ex7) {
                                throw a(ex7);
                            }
                        }
                    }
                    marker = marker.precede();
                }
                marker.drop();
                return true;
            }
            try {
                if (!this.g(b)) {
                    marker.drop();
                    return false;
                }
            }
            catch (IllegalArgumentException ex8) {
                throw a(ex8);
            }
            continue;
        }
    }
    
    private boolean g(final boolean p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_2       
        //     5: aload_0        
        //     6: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.v:()Z
        //     9: pop            
        //    10: aload_0        
        //    11: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    14: astore_3       
        //    15: aload_3        
        //    16: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.__ATTRIBUTE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    19: if_acmpne       47
        //    22: aload_0        
        //    23: ldc             "Expecting expression"
        //    25: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //    28: aload_0        
        //    29: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a2:()Z
        //    32: pop            
        //    33: aload_0        
        //    34: aload_2        
        //    35: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.REFERENCE_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    38: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //    41: iconst_1       
        //    42: ireturn        
        //    43: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    46: athrow         
        //    47: aload_3        
        //    48: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TYPEID_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //    51: if_acmpne       71
        //    54: aload_0        
        //    55: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aw:()Z
        //    58: pop            
        //    59: aload_2        
        //    60: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //    65: iconst_1       
        //    66: ireturn        
        //    67: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    70: athrow         
        //    71: aload_3        
        //    72: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.GENERIC_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    75: if_acmpne       94
        //    78: aload_0        
        //    79: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a5:()V
        //    82: aload_2        
        //    83: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //    88: iconst_1       
        //    89: ireturn        
        //    90: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    93: athrow         
        //    94: aload_3        
        //    95: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    98: if_acmpeq       157
        //   101: aload_3        
        //   102: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   105: if_acmpeq       157
        //   108: goto            115
        //   111: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   114: athrow         
        //   115: aload_3        
        //   116: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.THIS_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   119: if_acmpeq       157
        //   122: goto            129
        //   125: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   128: athrow         
        //   129: aload_3        
        //   130: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.OPERATOR_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   133: if_acmpeq       157
        //   136: goto            143
        //   139: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   142: athrow         
        //   143: aload_3        
        //   144: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TYPENAME_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   147: if_acmpne       414
        //   150: goto            157
        //   153: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   156: athrow         
        //   157: aload_0        
        //   158: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   161: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   166: astore          4
        //   168: aload_0        
        //   169: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myParsingInsideMacro:Z
        //   172: ifeq            301
        //   175: ldc             "defined"
        //   177: aload           4
        //   179: invokevirtual   java/lang/String.equals:(Ljava/lang/Object;)Z
        //   182: ifeq            301
        //   185: goto            192
        //   188: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   191: athrow         
        //   192: aload_0        
        //   193: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   196: astore          5
        //   198: aload_0        
        //   199: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   202: aload_0        
        //   203: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   206: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   209: if_acmpne       220
        //   212: iconst_1       
        //   213: goto            221
        //   216: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   219: athrow         
        //   220: iconst_0       
        //   221: istore          6
        //   223: iload           6
        //   225: ifeq            239
        //   228: aload_0        
        //   229: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   232: goto            239
        //   235: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   238: athrow         
        //   239: aload_0        
        //   240: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   243: astore          7
        //   245: aload_0        
        //   246: iconst_0       
        //   247: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.g:(Z)Z
        //   250: istore          8
        //   252: aload_0        
        //   253: aload           7
        //   255: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.MACRO_REF:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   258: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   261: iload           6
        //   263: ifeq            283
        //   266: aload_0        
        //   267: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   270: ldc             "Missing ')'"
        //   272: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   275: pop            
        //   276: goto            283
        //   279: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   282: athrow         
        //   283: aload_0        
        //   284: aload           5
        //   286: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DEFINED_DIRECTIVE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   289: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   292: aload_2        
        //   293: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   298: iload           8
        //   300: ireturn        
        //   301: aload_0        
        //   302: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   305: astore          5
        //   307: aload_0        
        //   308: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   311: astore          6
        //   313: aload_3        
        //   314: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.THIS_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   317: if_acmpne       331
        //   320: aload_0        
        //   321: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   324: goto            336
        //   327: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   330: athrow         
        //   331: aload_0        
        //   332: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.N:()Ljava/util/List;
        //   335: pop            
        //   336: aload_0        
        //   337: aload           6
        //   339: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.REFERENCE_ELEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   342: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   345: aload_0        
        //   346: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   349: ifeq            397
        //   352: aload_0        
        //   353: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   356: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   359: if_acmpne       397
        //   362: goto            369
        //   365: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   368: athrow         
        //   369: aload_0        
        //   370: aload           5
        //   372: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.TYPE_ELEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   375: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   378: aload_0        
        //   379: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ab:()V
        //   382: aload_0        
        //   383: aload_2        
        //   384: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CAST_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   387: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   390: goto            412
        //   393: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   396: athrow         
        //   397: aload_0        
        //   398: aload_2        
        //   399: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.REFERENCE_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   402: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   405: aload           5
        //   407: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   412: iconst_1       
        //   413: ireturn        
        //   414: aload_3        
        //   415: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   418: if_acmpne       523
        //   421: aload_0        
        //   422: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   425: aload_0        
        //   426: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   429: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   432: if_acmpne       471
        //   435: goto            442
        //   438: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   441: athrow         
        //   442: aload_0        
        //   443: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.H:()V
        //   446: aload_0        
        //   447: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   450: ldc             "Missing ')'"
        //   452: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   455: pop            
        //   456: aload_0        
        //   457: aload_2        
        //   458: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.STATEMENT_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   461: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   464: goto            521
        //   467: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   470: athrow         
        //   471: aload_0        
        //   472: iload_1        
        //   473: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.n:(Z)Z
        //   476: istore          4
        //   478: aload_0        
        //   479: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   482: ldc             "Missing ')'"
        //   484: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   487: ifne            513
        //   490: iload           4
        //   492: ifne            513
        //   495: goto            502
        //   498: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   501: athrow         
        //   502: aload_0        
        //   503: aload_2        
        //   504: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   507: iconst_0       
        //   508: ireturn        
        //   509: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   512: athrow         
        //   513: aload_0        
        //   514: aload_2        
        //   515: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.PAREN_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   518: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   521: iconst_1       
        //   522: ireturn        
        //   523: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LITERALS:Lcom/intellij/psi/tree/TokenSet;
        //   526: aload_3        
        //   527: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   530: ifne            567
        //   533: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CPP_LITERALS:Lcom/intellij/psi/tree/TokenSet;
        //   536: aload_3        
        //   537: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   540: ifne            567
        //   543: goto            550
        //   546: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   549: athrow         
        //   550: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RAW_STRING_LITERALS:Lcom/intellij/psi/tree/TokenSet;
        //   553: aload_3        
        //   554: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   557: ifeq            578
        //   560: goto            567
        //   563: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   566: athrow         
        //   567: aload_0        
        //   568: aload_2        
        //   569: aload_3        
        //   570: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)Z
        //   573: ireturn        
        //   574: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   577: athrow         
        //   578: aload_3        
        //   579: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   582: if_acmpne       905
        //   585: aload_0        
        //   586: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   589: ifeq            888
        //   592: goto            599
        //   595: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   598: athrow         
        //   599: aload_0        
        //   600: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   603: astore          4
        //   605: aload_0        
        //   606: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   609: aload_0        
        //   610: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   613: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   616: if_acmpeq       653
        //   619: aload_0        
        //   620: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   623: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EQ:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   626: if_acmpeq       653
        //   629: goto            636
        //   632: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   635: athrow         
        //   636: aload_0        
        //   637: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   640: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   643: if_acmpne       669
        //   646: goto            653
        //   649: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   652: athrow         
        //   653: aload_0        
        //   654: aload           4
        //   656: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   659: aload_0        
        //   660: aload_2        
        //   661: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.j:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //   664: ireturn        
        //   665: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   668: athrow         
        //   669: aload_0        
        //   670: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   673: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.MUL:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   676: if_acmpne       716
        //   679: aload_0        
        //   680: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   683: aload_0        
        //   684: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   687: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.THIS_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   690: if_acmpne       882
        //   693: goto            700
        //   696: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   699: athrow         
        //   700: aload_0        
        //   701: aload           4
        //   703: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   706: aload_0        
        //   707: aload_2        
        //   708: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.j:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //   711: ireturn        
        //   712: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   715: athrow         
        //   716: aload_0        
        //   717: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   720: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   723: if_acmpeq       743
        //   726: aload_0        
        //   727: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   730: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.THIS_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   733: if_acmpne       882
        //   736: goto            743
        //   739: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   742: athrow         
        //   743: aload_0        
        //   744: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   747: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.THIS_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   750: if_acmpne       771
        //   753: goto            760
        //   756: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   759: athrow         
        //   760: aload_0        
        //   761: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   764: goto            775
        //   767: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   770: athrow         
        //   771: aload_0        
        //   772: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ae:()V
        //   775: aload_0        
        //   776: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   779: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   782: if_acmpeq       802
        //   785: aload_0        
        //   786: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   789: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELLIPSIS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   792: if_acmpne       818
        //   795: goto            802
        //   798: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   801: athrow         
        //   802: aload_0        
        //   803: aload           4
        //   805: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   808: aload_0        
        //   809: aload_2        
        //   810: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.j:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //   813: ireturn        
        //   814: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   817: athrow         
        //   818: aload_0        
        //   819: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   822: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   825: if_acmpne       882
        //   828: aload_0        
        //   829: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   832: aload_0        
        //   833: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   836: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   839: if_acmpeq       866
        //   842: goto            849
        //   845: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   848: athrow         
        //   849: aload_0        
        //   850: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   853: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   856: if_acmpne       882
        //   859: goto            866
        //   862: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   865: athrow         
        //   866: aload_0        
        //   867: aload           4
        //   869: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   872: aload_0        
        //   873: aload_2        
        //   874: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.j:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //   877: ireturn        
        //   878: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   881: athrow         
        //   882: aload_0        
        //   883: aload           4
        //   885: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   888: aload_0        
        //   889: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsObjCSupport:Z
        //   892: ifeq            1150
        //   895: aload_0        
        //   896: aload_2        
        //   897: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.d:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //   900: ireturn        
        //   901: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   904: athrow         
        //   905: aload_3        
        //   906: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   909: if_acmpne       928
        //   912: aload_0        
        //   913: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ab:()V
        //   916: aload_2        
        //   917: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   922: iconst_1       
        //   923: ireturn        
        //   924: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   927: athrow         
        //   928: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.OBJC_ERROR_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   931: aload_3        
        //   932: if_acmpne       951
        //   935: aload_0        
        //   936: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   939: aload_2        
        //   940: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   945: iconst_0       
        //   946: ireturn        
        //   947: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   950: athrow         
        //   951: aload_3        
        //   952: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SELECTOR_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   955: if_acmpne       968
        //   958: aload_0        
        //   959: aload_2        
        //   960: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.c:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //   963: ireturn        
        //   964: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   967: athrow         
        //   968: aload_3        
        //   969: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AVAILABLE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   972: if_acmpeq       989
        //   975: aload_3        
        //   976: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.__BUILTIN_AVAILABLE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   979: if_acmpne       999
        //   982: goto            989
        //   985: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   988: athrow         
        //   989: aload_0        
        //   990: aload_2        
        //   991: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //   994: ireturn        
        //   995: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   998: athrow         
        //   999: aload_3        
        //  1000: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ENCODE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1003: if_acmpne       1016
        //  1006: aload_0        
        //  1007: aload_2        
        //  1008: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.e:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //  1011: ireturn        
        //  1012: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1015: athrow         
        //  1016: aload_3        
        //  1017: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.PROTOCOL_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1020: if_acmpne       1033
        //  1023: aload_0        
        //  1024: aload_2        
        //  1025: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.l:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //  1028: ireturn        
        //  1029: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1032: athrow         
        //  1033: aload_3        
        //  1034: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.THROW_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1037: if_acmpne       1081
        //  1040: aload_0        
        //  1041: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:()Lcom/intellij/psi/tree/IElementType;
        //  1044: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.THROW_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1047: if_acmpne       1081
        //  1050: goto            1057
        //  1053: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1056: athrow         
        //  1057: aload_0        
        //  1058: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //  1061: ifeq            1081
        //  1064: goto            1071
        //  1067: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1070: athrow         
        //  1071: aload_0        
        //  1072: aload_2        
        //  1073: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.h:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //  1076: ireturn        
        //  1077: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1080: athrow         
        //  1081: aload_3        
        //  1082: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.XOR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1085: if_acmpne       1098
        //  1088: aload_0        
        //  1089: aload_2        
        //  1090: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/lang/PsiBuilder$Marker;)Z
        //  1093: ireturn        
        //  1094: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1097: athrow         
        //  1098: aload_3        
        //  1099: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TEMPLATE_START_MARK:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1102: if_acmpne       1150
        //  1105: aload_0        
        //  1106: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1109: aload_0        
        //  1110: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1113: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TEMPLATE_STOP_MARK:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //  1116: if_acmpeq       1133
        //  1119: goto            1126
        //  1122: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1125: athrow         
        //  1126: aload_0        
        //  1127: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //  1130: ifnonnull       1105
        //  1133: aload_0        
        //  1134: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //  1137: goto            1140
        //  1140: aload_0        
        //  1141: aload_2        
        //  1142: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.LITERAL_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //  1145: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //  1148: iconst_1       
        //  1149: ireturn        
        //  1150: iload_1        
        //  1151: ifne            1167
        //  1154: aload_0        
        //  1155: ldc             "Expression expected"
        //  1157: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //  1160: goto            1167
        //  1163: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //  1166: athrow         
        //  1167: aload_2        
        //  1168: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //  1173: iconst_0       
        //  1174: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  15     43     43     47     Ljava/lang/IllegalArgumentException;
        //  47     67     67     71     Ljava/lang/IllegalArgumentException;
        //  71     90     90     94     Ljava/lang/IllegalArgumentException;
        //  94     108    111    115    Ljava/lang/IllegalArgumentException;
        //  101    122    125    129    Ljava/lang/IllegalArgumentException;
        //  115    136    139    143    Ljava/lang/IllegalArgumentException;
        //  129    150    153    157    Ljava/lang/IllegalArgumentException;
        //  168    185    188    192    Ljava/lang/IllegalArgumentException;
        //  198    216    216    220    Ljava/lang/IllegalArgumentException;
        //  223    232    235    239    Ljava/lang/IllegalArgumentException;
        //  252    276    279    283    Ljava/lang/IllegalArgumentException;
        //  313    327    327    331    Ljava/lang/IllegalArgumentException;
        //  336    362    365    369    Ljava/lang/IllegalArgumentException;
        //  352    393    393    397    Ljava/lang/IllegalArgumentException;
        //  414    435    438    442    Ljava/lang/IllegalArgumentException;
        //  421    467    467    471    Ljava/lang/IllegalArgumentException;
        //  478    495    498    502    Ljava/lang/IllegalArgumentException;
        //  490    509    509    513    Ljava/lang/IllegalArgumentException;
        //  523    543    546    550    Ljava/lang/IllegalArgumentException;
        //  533    560    563    567    Ljava/lang/IllegalArgumentException;
        //  550    574    574    578    Ljava/lang/IllegalArgumentException;
        //  578    592    595    599    Ljava/lang/IllegalArgumentException;
        //  605    629    632    636    Ljava/lang/IllegalArgumentException;
        //  619    646    649    653    Ljava/lang/IllegalArgumentException;
        //  636    665    665    669    Ljava/lang/IllegalArgumentException;
        //  669    693    696    700    Ljava/lang/IllegalArgumentException;
        //  679    712    712    716    Ljava/lang/IllegalArgumentException;
        //  716    736    739    743    Ljava/lang/IllegalArgumentException;
        //  726    753    756    760    Ljava/lang/IllegalArgumentException;
        //  743    767    767    771    Ljava/lang/IllegalArgumentException;
        //  775    795    798    802    Ljava/lang/IllegalArgumentException;
        //  785    814    814    818    Ljava/lang/IllegalArgumentException;
        //  818    842    845    849    Ljava/lang/IllegalArgumentException;
        //  828    859    862    866    Ljava/lang/IllegalArgumentException;
        //  849    878    878    882    Ljava/lang/IllegalArgumentException;
        //  888    901    901    905    Ljava/lang/IllegalArgumentException;
        //  905    924    924    928    Ljava/lang/IllegalArgumentException;
        //  928    947    947    951    Ljava/lang/IllegalArgumentException;
        //  951    964    964    968    Ljava/lang/IllegalArgumentException;
        //  968    982    985    989    Ljava/lang/IllegalArgumentException;
        //  975    995    995    999    Ljava/lang/IllegalArgumentException;
        //  999    1012   1012   1016   Ljava/lang/IllegalArgumentException;
        //  1016   1029   1029   1033   Ljava/lang/IllegalArgumentException;
        //  1033   1050   1053   1057   Ljava/lang/IllegalArgumentException;
        //  1040   1064   1067   1071   Ljava/lang/IllegalArgumentException;
        //  1057   1077   1077   1081   Ljava/lang/IllegalArgumentException;
        //  1081   1094   1094   1098   Ljava/lang/IllegalArgumentException;
        //  1098   1119   1122   1126   Ljava/lang/IllegalArgumentException;
        //  1150   1160   1163   1167   Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0115:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean a(final PsiBuilder.Marker p0, final IElementType p1) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: iconst_0       
        //     1: istore_3       
        //     2: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //     5: aload_2        
        //     6: if_acmpeq       26
        //     9: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALL_STRINGS:Lcom/intellij/psi/tree/TokenSet;
        //    12: aload_2        
        //    13: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    16: ifeq            833
        //    19: goto            26
        //    22: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    25: athrow         
        //    26: aload_0        
        //    27: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    30: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    33: if_acmpne       51
        //    36: goto            43
        //    39: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    42: athrow         
        //    43: iconst_1       
        //    44: goto            52
        //    47: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    50: athrow         
        //    51: iconst_0       
        //    52: istore          4
        //    54: aconst_null    
        //    55: astore          5
        //    57: iload           4
        //    59: ifeq            72
        //    62: aload_0        
        //    63: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    66: astore          5
        //    68: aload_0        
        //    69: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    72: aload_0        
        //    73: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    76: astore          6
        //    78: iload           4
        //    80: ifeq            123
        //    83: aload           6
        //    85: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    88: if_acmpne       123
        //    91: goto            98
        //    94: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    97: athrow         
        //    98: aload_0        
        //    99: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.an:()V
        //   102: aload_0        
        //   103: aload           5
        //   105: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.BOXED_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   108: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   111: aload_1        
        //   112: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   117: iconst_1       
        //   118: ireturn        
        //   119: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   122: athrow         
        //   123: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALL_STRINGS:Lcom/intellij/psi/tree/TokenSet;
        //   126: aload           6
        //   128: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   131: istore          7
        //   133: iload           7
        //   135: ifne            171
        //   138: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALL_NUMERIC:Lcom/intellij/psi/tree/TokenSet;
        //   141: aload           6
        //   143: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   146: ifne            171
        //   149: goto            156
        //   152: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   155: athrow         
        //   156: aload           6
        //   158: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CHARACTER_LITERAL:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   161: if_acmpne       363
        //   164: goto            171
        //   167: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   170: athrow         
        //   171: aload_0        
        //   172: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   175: aload_0        
        //   176: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   179: astore          8
        //   181: aload           5
        //   183: ifnull          200
        //   186: aload           5
        //   188: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   193: goto            200
        //   196: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   199: athrow         
        //   200: iload           7
        //   202: ifeq            271
        //   205: aload           8
        //   207: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   210: if_acmpne       271
        //   213: goto            220
        //   216: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   219: athrow         
        //   220: aload_0        
        //   221: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   224: astore          5
        //   226: aload_0        
        //   227: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   230: aload_0        
        //   231: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   234: astore          9
        //   236: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALL_STRINGS:Lcom/intellij/psi/tree/TokenSet;
        //   239: aload           9
        //   241: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   244: ifne            261
        //   247: aload           5
        //   249: invokeinterface com/intellij/lang/PsiBuilder$Marker.rollbackTo:()V
        //   254: goto            910
        //   257: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   260: athrow         
        //   261: aload           5
        //   263: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   268: goto            360
        //   271: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALL_STRINGS:Lcom/intellij/psi/tree/TokenSet;
        //   274: aload           8
        //   276: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   279: ifne            360
        //   282: aload           8
        //   284: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.UDL_SUFFIX:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   287: if_acmpne       910
        //   290: goto            297
        //   293: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   296: athrow         
        //   297: aload_1        
        //   298: invokeinterface com/intellij/lang/PsiBuilder$Marker.precede:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   303: astore          9
        //   305: aload_0        
        //   306: aload_1        
        //   307: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.LITERAL_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   310: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   313: aload           9
        //   315: astore_1       
        //   316: iconst_1       
        //   317: istore_3       
        //   318: aload_0        
        //   319: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   322: aload_0        
        //   323: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   326: astore          10
        //   328: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALL_STRINGS:Lcom/intellij/psi/tree/TokenSet;
        //   331: aload           10
        //   333: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   336: ifeq            357
        //   339: aload_0        
        //   340: aload_0        
        //   341: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   344: aload           10
        //   346: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)Z
        //   349: pop            
        //   350: goto            357
        //   353: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   356: athrow         
        //   357: goto            910
        //   360: goto            830
        //   363: iload           4
        //   365: ifeq            483
        //   368: aload           6
        //   370: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.MINUS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   373: if_acmpeq       398
        //   376: goto            383
        //   379: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   382: athrow         
        //   383: aload           6
        //   385: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.PLUS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   388: if_acmpne       483
        //   391: goto            398
        //   394: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   397: athrow         
        //   398: aload_0        
        //   399: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   402: astore          8
        //   404: aload_0        
        //   405: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   408: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALL_NUMERIC:Lcom/intellij/psi/tree/TokenSet;
        //   411: aload_0        
        //   412: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   415: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   418: ifne            438
        //   421: aload_0        
        //   422: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   425: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CHARACTER_LITERAL:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   428: if_acmpne       451
        //   431: goto            438
        //   434: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   437: athrow         
        //   438: aload_0        
        //   439: iconst_0       
        //   440: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.g:(Z)Z
        //   443: pop            
        //   444: goto            457
        //   447: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   450: athrow         
        //   451: aload_0        
        //   452: ldc             "Expecting integer or float literal"
        //   454: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   457: aload_0        
        //   458: aload           8
        //   460: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.UNARY_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   463: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   466: aload_0        
        //   467: aload           5
        //   469: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.BOXED_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   472: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   475: aload_1        
        //   476: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   481: iconst_1       
        //   482: ireturn        
        //   483: iload           4
        //   485: ifeq            619
        //   488: aload           6
        //   490: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   493: if_acmpne       619
        //   496: goto            503
        //   499: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   502: athrow         
        //   503: aload_0        
        //   504: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   507: goto            514
        //   510: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   513: athrow         
        //   514: aload_0        
        //   515: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.F:()Z
        //   518: ifne            597
        //   521: aload_0        
        //   522: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   525: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   528: if_acmpeq       597
        //   531: aload_0        
        //   532: iconst_0       
        //   533: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.d:(Z)Z
        //   536: pop            
        //   537: aload_0        
        //   538: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   541: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   544: if_acmpne       578
        //   547: goto            554
        //   550: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   553: athrow         
        //   554: aload_0        
        //   555: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   558: aload_0        
        //   559: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   562: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   565: if_acmpne       514
        //   568: goto            575
        //   571: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   574: athrow         
        //   575: goto            597
        //   578: aload_0        
        //   579: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   582: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   585: if_acmpeq       514
        //   588: aload_0        
        //   589: ldc             "',' or ']' expected"
        //   591: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   594: goto            597
        //   597: aload_0        
        //   598: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   601: ldc             "']' missing"
        //   603: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   606: pop            
        //   607: aload_0        
        //   608: aload           5
        //   610: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.NS_ARRAY_LITERAL:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   613: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   616: goto            830
        //   619: iload           4
        //   621: ifeq            793
        //   624: aload           6
        //   626: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   629: if_acmpne       793
        //   632: goto            639
        //   635: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   638: athrow         
        //   639: aload_0        
        //   640: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   643: aload_0        
        //   644: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInMessagePassingParameter:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //   647: astore          8
        //   649: aload_0        
        //   650: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext.None:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //   653: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInMessagePassingParameter:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //   656: aload_0        
        //   657: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.F:()Z
        //   660: ifne            765
        //   663: aload_0        
        //   664: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   667: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   670: if_acmpeq       765
        //   673: aload_0        
        //   674: iconst_0       
        //   675: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.d:(Z)Z
        //   678: pop            
        //   679: aload_0        
        //   680: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   683: ldc             "Expecting ':'"
        //   685: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   688: pop            
        //   689: aload_0        
        //   690: iconst_0       
        //   691: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.d:(Z)Z
        //   694: pop            
        //   695: aload_0        
        //   696: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   699: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   702: if_acmpne       736
        //   705: goto            712
        //   708: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   711: athrow         
        //   712: aload_0        
        //   713: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   716: aload_0        
        //   717: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   720: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   723: if_acmpne       656
        //   726: goto            733
        //   729: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   732: athrow         
        //   733: goto            765
        //   736: aload_0        
        //   737: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   740: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   743: if_acmpeq       656
        //   746: aload_0        
        //   747: ldc             "',' or '}' expected"
        //   749: aload_0        
        //   750: getfield        com/jetbrains/cidr/lang/parser/OCParsing.BLOCK_STATEMENT_PARSER:Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;
        //   753: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.UNKNOWN_CPP_CODE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   756: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   759: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;Lcom/intellij/psi/tree/IElementType;Lcom/intellij/psi/tree/IElementType;)V
        //   762: goto            656
        //   765: aload_0        
        //   766: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   769: ldc             "'}' missing"
        //   771: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   774: pop            
        //   775: aload_0        
        //   776: aload           8
        //   778: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInMessagePassingParameter:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //   781: aload_0        
        //   782: aload           5
        //   784: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.NS_DICTIONARY_LITERAL:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   787: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   790: goto            830
        //   793: iload           4
        //   795: ifeq            811
        //   798: aload_0        
        //   799: ldc             "Expecting string literal"
        //   801: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   804: goto            811
        //   807: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   810: athrow         
        //   811: aload           5
        //   813: ifnull          910
        //   816: aload           5
        //   818: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   823: goto            910
        //   826: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   829: athrow         
        //   830: goto            26
        //   833: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALL_NUMERIC:Lcom/intellij/psi/tree/TokenSet;
        //   836: aload_2        
        //   837: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   840: ifne            857
        //   843: aload_2        
        //   844: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CHARACTER_LITERAL:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   847: if_acmpne       906
        //   850: goto            857
        //   853: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   856: athrow         
        //   857: aload_0        
        //   858: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   861: aload_0        
        //   862: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   865: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.UDL_SUFFIX:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   868: if_acmpne       910
        //   871: goto            878
        //   874: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   877: athrow         
        //   878: aload_1        
        //   879: invokeinterface com/intellij/lang/PsiBuilder$Marker.precede:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   884: astore          4
        //   886: aload_0        
        //   887: aload_1        
        //   888: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.LITERAL_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   891: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   894: aload           4
        //   896: astore_1       
        //   897: iconst_1       
        //   898: istore_3       
        //   899: aload_0        
        //   900: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   903: goto            910
        //   906: aload_0        
        //   907: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   910: aload_0        
        //   911: aload_1        
        //   912: iload_3        
        //   913: ifeq            926
        //   916: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CPP_UDL_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   919: goto            929
        //   922: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   925: athrow         
        //   926: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.LITERAL_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   929: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   932: iconst_1       
        //   933: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  2      19     22     26     Ljava/lang/IllegalArgumentException;
        //  9      36     39     43     Ljava/lang/IllegalArgumentException;
        //  26     47     47     51     Ljava/lang/IllegalArgumentException;
        //  78     91     94     98     Ljava/lang/IllegalArgumentException;
        //  83     119    119    123    Ljava/lang/IllegalArgumentException;
        //  133    149    152    156    Ljava/lang/IllegalArgumentException;
        //  138    164    167    171    Ljava/lang/IllegalArgumentException;
        //  181    193    196    200    Ljava/lang/IllegalArgumentException;
        //  200    213    216    220    Ljava/lang/IllegalArgumentException;
        //  236    257    257    261    Ljava/lang/IllegalArgumentException;
        //  271    290    293    297    Ljava/lang/IllegalArgumentException;
        //  328    350    353    357    Ljava/lang/IllegalArgumentException;
        //  363    376    379    383    Ljava/lang/IllegalArgumentException;
        //  368    391    394    398    Ljava/lang/IllegalArgumentException;
        //  404    431    434    438    Ljava/lang/IllegalArgumentException;
        //  421    447    447    451    Ljava/lang/IllegalArgumentException;
        //  483    496    499    503    Ljava/lang/IllegalArgumentException;
        //  488    507    510    514    Ljava/lang/IllegalArgumentException;
        //  521    547    550    554    Ljava/lang/IllegalArgumentException;
        //  531    568    571    575    Ljava/lang/IllegalArgumentException;
        //  619    632    635    639    Ljava/lang/IllegalArgumentException;
        //  663    705    708    712    Ljava/lang/IllegalArgumentException;
        //  673    726    729    733    Ljava/lang/IllegalArgumentException;
        //  793    804    807    811    Ljava/lang/IllegalArgumentException;
        //  811    826    826    830    Ljava/lang/IllegalArgumentException;
        //  833    850    853    857    Ljava/lang/IllegalArgumentException;
        //  843    871    874    878    Ljava/lang/IllegalArgumentException;
        //  910    922    922    926    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0026:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean j(final PsiBuilder.Marker marker) {
        boolean b = false;
        Label_0023: {
            try {
                this.y();
                if (this.aF() == OCTokenTypes.LPAR) {
                    b = true;
                    break Label_0023;
                }
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            b = false;
        }
        final boolean b2 = b;
        try {
            if (b2) {
                this.af();
            }
        }
        catch (IllegalArgumentException ex2) {
            throw a(ex2);
        }
        Label_0083: {
            Label_0066: {
                try {
                    this.o(false);
                    if (this.aF() != OCTokenTypes.MUTABLE_CPP_KEYWORD) {
                        break Label_0083;
                    }
                    final boolean b3 = b2;
                    if (!b3) {
                        break Label_0066;
                    }
                    break Label_0066;
                }
                catch (IllegalArgumentException ex3) {
                    throw a(ex3);
                }
                try {
                    final boolean b3 = b2;
                    if (!b3) {
                        this.a("Lambda requires '()' before 'mutable'");
                    }
                }
                catch (IllegalArgumentException ex4) {
                    throw a(ex4);
                }
            }
            this.aY();
            try {
                if (this.aF() == OCTokenTypes.THROW_KEYWORD) {
                    this.p();
                }
            }
            catch (IllegalArgumentException ex5) {
                throw a(ex5);
            }
        }
        try {
            if (this.aF() == OCTokenTypes.NOEXCEPT_KEYWORD) {
                this.aH();
            }
        }
        catch (IllegalArgumentException ex6) {
            throw a(ex6);
        }
        Label_0176: {
            try {
                this.v();
                if (this.aF() == OCTokenTypes.DEREF) {
                    this.aY();
                    this.myForceEagerMode = false;
                    this.aS();
                    this.f(false, this.myForceEagerMode);
                    break Label_0176;
                }
            }
            catch (IllegalArgumentException ex7) {
                throw a(ex7);
            }
            this.f(false, true);
        }
        this.b(marker, OCElementTypes.CPP_LAMBDA_EXPRESSION);
        return true;
    }
    
    private void y() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_1       
        //     5: aload_0        
        //     6: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //     9: ldc             "'[' expecting"
        //    11: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //    14: pop            
        //    15: iconst_1       
        //    16: istore_2       
        //    17: aload_0        
        //    18: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.F:()Z
        //    21: ifne            260
        //    24: aload_0        
        //    25: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    28: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    31: if_acmpeq       260
        //    34: goto            41
        //    37: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    40: athrow         
        //    41: iload_2        
        //    42: ifne            69
        //    45: goto            52
        //    48: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    51: athrow         
        //    52: aload_0        
        //    53: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    56: ldc             "Expecting ','"
        //    58: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //    61: pop            
        //    62: goto            69
        //    65: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    68: athrow         
        //    69: iconst_0       
        //    70: istore_2       
        //    71: aload_0        
        //    72: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    75: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    78: if_acmpne       94
        //    81: aload_0        
        //    82: ldc             "Expecting lambda capture"
        //    84: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //    87: goto            260
        //    90: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    93: athrow         
        //    94: aload_0        
        //    95: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    98: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AND:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   101: if_acmpne       136
        //   104: aload_0        
        //   105: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   108: aload_0        
        //   109: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   112: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   115: if_acmpne       243
        //   118: goto            125
        //   121: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   124: athrow         
        //   125: aload_0        
        //   126: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ae:()V
        //   129: goto            243
        //   132: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   135: athrow         
        //   136: aload_0        
        //   137: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   140: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EQ:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   143: if_acmpne       157
        //   146: aload_0        
        //   147: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   150: goto            243
        //   153: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   156: athrow         
        //   157: aload_0        
        //   158: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   161: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   164: if_acmpne       178
        //   167: aload_0        
        //   168: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ae:()V
        //   171: goto            243
        //   174: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   177: athrow         
        //   178: aload_0        
        //   179: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   182: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.THIS_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   185: if_acmpne       199
        //   188: aload_0        
        //   189: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   192: goto            243
        //   195: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   198: athrow         
        //   199: aload_0        
        //   200: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   203: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.MUL:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   206: if_acmpne       230
        //   209: aload_0        
        //   210: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   213: aload_0        
        //   214: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.THIS_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   217: ldc             "'this' expecting"
        //   219: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   222: pop            
        //   223: goto            243
        //   226: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   229: athrow         
        //   230: aload_0        
        //   231: ldc             "Syntax error"
        //   233: aload_0        
        //   234: getfield        com/jetbrains/cidr/lang/parser/OCParsing.BLOCK_STATEMENT_PARSER:Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;
        //   237: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.EAGER_BLOCK_STATEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   240: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;Lcom/intellij/psi/tree/IElementType;)V
        //   243: aload_0        
        //   244: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   247: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELLIPSIS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   250: if_acmpne       17
        //   253: aload_0        
        //   254: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   257: goto            17
        //   260: aload_0        
        //   261: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   264: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   267: if_acmpne       281
        //   270: aload_0        
        //   271: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   274: goto            281
        //   277: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   280: athrow         
        //   281: aload_0        
        //   282: aload_1        
        //   283: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CPP_LAMBDA_INTRODUCER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   286: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   289: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  17     34     37     41     Ljava/lang/IllegalArgumentException;
        //  24     45     48     52     Ljava/lang/IllegalArgumentException;
        //  41     62     65     69     Ljava/lang/IllegalArgumentException;
        //  71     90     90     94     Ljava/lang/IllegalArgumentException;
        //  94     118    121    125    Ljava/lang/IllegalArgumentException;
        //  104    132    132    136    Ljava/lang/IllegalArgumentException;
        //  136    153    153    157    Ljava/lang/IllegalArgumentException;
        //  157    174    174    178    Ljava/lang/IllegalArgumentException;
        //  178    195    195    199    Ljava/lang/IllegalArgumentException;
        //  199    226    226    230    Ljava/lang/IllegalArgumentException;
        //  260    274    277    281    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0041:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void ae() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.$assertionsDisabled:Z
        //     3: ifne            35
        //     6: aload_0        
        //     7: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    10: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    13: if_acmpeq       35
        //    16: goto            23
        //    19: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    22: athrow         
        //    23: new             Ljava/lang/AssertionError;
        //    26: dup            
        //    27: invokespecial   java/lang/AssertionError.<init>:()V
        //    30: athrow         
        //    31: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    34: athrow         
        //    35: aload_0        
        //    36: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    39: astore_1       
        //    40: aload_0        
        //    41: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.N:()Ljava/util/List;
        //    44: pop            
        //    45: aload_0        
        //    46: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    49: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    52: if_acmpeq       89
        //    55: aload_0        
        //    56: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    59: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    62: if_acmpeq       89
        //    65: goto            72
        //    68: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    71: athrow         
        //    72: aload_0        
        //    73: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    76: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELLIPSIS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    79: if_acmpne       104
        //    82: goto            89
        //    85: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    88: athrow         
        //    89: aload_0        
        //    90: aload_1        
        //    91: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.REFERENCE_ELEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    94: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //    97: goto            136
        //   100: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   103: athrow         
        //   104: aload_0        
        //   105: aload_1        
        //   106: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   109: aload_0        
        //   110: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   113: astore_2       
        //   114: aload_0        
        //   115: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.FILE:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   118: iconst_0       
        //   119: iconst_0       
        //   120: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult.TYPE_PARSED_FOR_SURE:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;
        //   123: iconst_0       
        //   124: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;ZZLcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingResult;Z)Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclaratorParsingResult;
        //   127: pop            
        //   128: aload_0        
        //   129: aload_2        
        //   130: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DECLARATION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   133: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   136: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      16     19     23     Ljava/lang/IllegalArgumentException;
        //  6      31     31     35     Ljava/lang/IllegalArgumentException;
        //  40     65     68     72     Ljava/lang/IllegalArgumentException;
        //  55     82     85     89     Ljava/lang/IllegalArgumentException;
        //  72     100    100    104    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0072:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean a(final PsiBuilder.Marker marker) {
        Label_0112: {
            Label_0035: {
                Label_0023: {
                    try {
                        if (OCParsing.$assertionsDisabled) {
                            break Label_0035;
                        }
                        final OCParsing ocParsing = this;
                        final IElementType elementType = ocParsing.aF();
                        final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.XOR;
                        if (elementType != ocPunctuatorElementType) {
                            break Label_0023;
                        }
                        break Label_0035;
                    }
                    catch (IllegalArgumentException ex) {
                        throw a(ex);
                    }
                    try {
                        final OCParsing ocParsing = this;
                        final IElementType elementType = ocParsing.aF();
                        final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.XOR;
                        if (elementType != ocPunctuatorElementType) {
                            throw new AssertionError();
                        }
                    }
                    catch (IllegalArgumentException ex2) {
                        throw a(ex2);
                    }
                }
                try {
                    this.aY();
                    if (this.aF() == OCTokenTypes.LPAR || this.aF() == OCTokenTypes.LBRACE) {
                        break Label_0112;
                    }
                }
                catch (IllegalArgumentException ex3) {
                    throw a(ex3);
                }
            }
            final PsiBuilder.Marker a7 = this.a7();
            this.a(false, DeclarationContext.CODE_BLOCK, TypeParsingExpectation.ANY);
            try {
                while (this.aF() == OCTokenTypes.MUL) {
                    this.aY();
                }
            }
            catch (IllegalArgumentException ex4) {
                throw a(ex4);
            }
            this.b(a7, OCElementTypes.TYPE_ELEMENT);
            try {
                if (this.aF() == OCTokenTypes.LPAR) {
                    this.af();
                }
            }
            catch (IllegalArgumentException ex5) {
                throw a(ex5);
            }
        }
        Label_0166: {
            try {
                this.o(false);
                if (this.aF() == OCTokenTypes.LBRACE) {
                    this.H();
                    break Label_0166;
                }
            }
            catch (IllegalArgumentException ex6) {
                throw a(ex6);
            }
            this.a("Expecting a block");
        }
        this.b(marker, OCElementTypes.BLOCK_EXPRESSION);
        return true;
    }
    
    private boolean e(final PsiBuilder.Marker marker) {
        Label_0035: {
            Label_0023: {
                try {
                    if (OCParsing.$assertionsDisabled) {
                        break Label_0035;
                    }
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final OCElementType ocElementType = OCTokenTypes.ENCODE_KEYWORD;
                    if (elementType != ocElementType) {
                        break Label_0023;
                    }
                    break Label_0035;
                }
                catch (IllegalArgumentException ex) {
                    throw a(ex);
                }
                try {
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final OCElementType ocElementType = OCTokenTypes.ENCODE_KEYWORD;
                    if (elementType != ocElementType) {
                        throw new AssertionError();
                    }
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
            }
            try {
                this.aY();
                if (!this.a(TypeParsingExpectation.ANY)) {
                    this.a("Expecting typename");
                }
            }
            catch (IllegalArgumentException ex3) {
                throw a(ex3);
            }
        }
        this.b(marker, OCElementTypes.ENCODE_TYPE_EXPRESSION);
        return true;
    }
    
    private boolean l(final PsiBuilder.Marker marker) {
        Label_0035: {
            Label_0023: {
                try {
                    if (OCParsing.$assertionsDisabled) {
                        break Label_0035;
                    }
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final OCElementType ocElementType = OCTokenTypes.PROTOCOL_KEYWORD;
                    if (elementType != ocElementType) {
                        break Label_0023;
                    }
                    break Label_0035;
                }
                catch (IllegalArgumentException ex) {
                    throw a(ex);
                }
                try {
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final OCElementType ocElementType = OCTokenTypes.PROTOCOL_KEYWORD;
                    if (elementType != ocElementType) {
                        throw new AssertionError();
                    }
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
            }
            try {
                this.aY();
                this.a(OCTokenTypes.LPAR, "Expecting '('");
                if (!this.aS()) {
                    this.a("Expecting protocol name");
                }
            }
            catch (IllegalArgumentException ex3) {
                throw a(ex3);
            }
        }
        this.a(OCTokenTypes.RPAR, "Expecting ')'");
        this.b(marker, OCElementTypes.PROTOCOL_EXPRESSION);
        return true;
    }
    
    private boolean h(final PsiBuilder.Marker marker) {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.THROW_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.THROW_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        this.aY();
        this.d(true);
        this.b(marker, OCElementTypes.THROW_EXPRESSION);
        return true;
    }
    
    private boolean d(final PsiBuilder.Marker p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.$assertionsDisabled:Z
        //     3: ifne            35
        //     6: aload_0        
        //     7: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    10: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    13: if_acmpeq       35
        //    16: goto            23
        //    19: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    22: athrow         
        //    23: new             Ljava/lang/AssertionError;
        //    26: dup            
        //    27: invokespecial   java/lang/AssertionError.<init>:()V
        //    30: athrow         
        //    31: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    34: athrow         
        //    35: aload_0        
        //    36: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    39: aload_0        
        //    40: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInMessagePassingParameter:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //    43: astore_2       
        //    44: aload_0        
        //    45: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext.InReiceiver:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //    48: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInMessagePassingParameter:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //    51: aload_0        
        //    52: iconst_0       
        //    53: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.n:(Z)Z
        //    56: pop            
        //    57: aload_0        
        //    58: aload_2        
        //    59: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInMessagePassingParameter:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //    62: aload_0        
        //    63: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    66: astore_3       
        //    67: aload_0        
        //    68: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    71: astore          4
        //    73: aload_0        
        //    74: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    77: astore          5
        //    79: aload_0        
        //    80: aload           5
        //    82: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.c:(Lcom/intellij/psi/tree/IElementType;)Z
        //    85: ifeq            278
        //    88: aload           5
        //    90: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    93: if_acmpeq       117
        //    96: goto            103
        //    99: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   102: athrow         
        //   103: aload_0        
        //   104: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   107: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;)V
        //   110: goto            117
        //   113: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   116: athrow         
        //   117: aload_0        
        //   118: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   121: aload_0        
        //   122: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   125: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   128: if_acmpne       258
        //   131: aload           4
        //   133: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   138: aload_0        
        //   139: aload_3        
        //   140: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   143: goto            150
        //   146: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   149: athrow         
        //   150: aload_0        
        //   151: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   154: astore          6
        //   156: aload           6
        //   158: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   161: if_acmpeq       355
        //   164: aload           6
        //   166: ifnull          355
        //   169: goto            176
        //   172: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   175: athrow         
        //   176: aload           6
        //   178: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   181: if_acmpeq       355
        //   184: goto            191
        //   187: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   190: athrow         
        //   191: aload           6
        //   193: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   196: if_acmpne       213
        //   199: goto            206
        //   202: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   205: athrow         
        //   206: goto            355
        //   209: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   212: athrow         
        //   213: aload           6
        //   215: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   218: if_acmpne       241
        //   221: aload_0        
        //   222: ldc             "Unexpected ')'"
        //   224: aload_0        
        //   225: getfield        com/jetbrains/cidr/lang/parser/OCParsing.BLOCK_STATEMENT_PARSER:Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;
        //   228: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.EAGER_BLOCK_STATEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   231: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;Lcom/intellij/psi/tree/IElementType;)V
        //   234: goto            241
        //   237: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   240: athrow         
        //   241: aload_0        
        //   242: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aq:()Z
        //   245: ifne            255
        //   248: goto            355
        //   251: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   254: athrow         
        //   255: goto            150
        //   258: aload_0        
        //   259: aload           4
        //   261: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.ARGUMENT_SELECTOR:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   264: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   267: aload_0        
        //   268: aload_3        
        //   269: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.MESSAGE_ARGUMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   272: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   275: goto            355
        //   278: aload           4
        //   280: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   285: aload_3        
        //   286: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   291: aload_0        
        //   292: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   295: astore          6
        //   297: aload           6
        //   299: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   302: if_acmpeq       355
        //   305: aload           6
        //   307: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   310: if_acmpeq       355
        //   313: goto            320
        //   316: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   319: athrow         
        //   320: aload           6
        //   322: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   325: if_acmpeq       355
        //   328: goto            335
        //   331: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   334: athrow         
        //   335: aload_0        
        //   336: ldc             "Message select"
        //   338: aload_0        
        //   339: getfield        com/jetbrains/cidr/lang/parser/OCParsing.BLOCK_STATEMENT_PARSER:Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;
        //   342: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.UNKNOWN_CPP_CODE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   345: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;Lcom/jetbrains/cidr/lang/parser/OCParsing$BlockParser;Lcom/intellij/psi/tree/IElementType;)V
        //   348: goto            355
        //   351: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   354: athrow         
        //   355: aload_0        
        //   356: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   359: ldc             "']' missing"
        //   361: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   364: pop            
        //   365: aload_0        
        //   366: aload_1        
        //   367: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.MESSAGE_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   370: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   373: iconst_1       
        //   374: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      16     19     23     Ljava/lang/IllegalArgumentException;
        //  6      31     31     35     Ljava/lang/IllegalArgumentException;
        //  79     96     99     103    Ljava/lang/IllegalArgumentException;
        //  88     110    113    117    Ljava/lang/IllegalArgumentException;
        //  117    143    146    150    Ljava/lang/IllegalArgumentException;
        //  156    169    172    176    Ljava/lang/IllegalArgumentException;
        //  164    184    187    191    Ljava/lang/IllegalArgumentException;
        //  176    199    202    206    Ljava/lang/IllegalArgumentException;
        //  191    209    209    213    Ljava/lang/IllegalArgumentException;
        //  213    234    237    241    Ljava/lang/IllegalArgumentException;
        //  241    251    251    255    Ljava/lang/IllegalArgumentException;
        //  297    313    316    320    Ljava/lang/IllegalArgumentException;
        //  305    328    331    335    Ljava/lang/IllegalArgumentException;
        //  320    348    351    355    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0176:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean c(final IElementType p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_1        
        //     1: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //     4: if_acmpeq       95
        //     7: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CPP_KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //    10: aload_1        
        //    11: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    14: ifne            95
        //    17: goto            24
        //    20: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    23: athrow         
        //    24: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NULLABILITY_KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //    27: aload_1        
        //    28: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    31: ifne            95
        //    34: goto            41
        //    37: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    40: athrow         
        //    41: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.C_KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //    44: aload_1        
        //    45: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    48: ifeq            72
        //    51: goto            58
        //    54: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    57: athrow         
        //    58: aload_1        
        //    59: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.__ATTRIBUTE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    62: if_acmpne       95
        //    65: goto            72
        //    68: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    71: athrow         
        //    72: aload_1        
        //    73: aload_0        
        //    74: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //    77: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //    82: invokestatic    com/jetbrains/cidr/lang/util/OCElementUtil.isAlternativeCppPunctuator:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/CharSequence;)Z
        //    85: ifeq            103
        //    88: goto            95
        //    91: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    94: athrow         
        //    95: iconst_1       
        //    96: goto            104
        //    99: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   102: athrow         
        //   103: iconst_0       
        //   104: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      17     20     24     Ljava/lang/IllegalArgumentException;
        //  7      34     37     41     Ljava/lang/IllegalArgumentException;
        //  24     51     54     58     Ljava/lang/IllegalArgumentException;
        //  41     65     68     72     Ljava/lang/IllegalArgumentException;
        //  58     88     91     95     Ljava/lang/IllegalArgumentException;
        //  72     99     99     103    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0024:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean aq() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastMacro:Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_1       
        //     5: aconst_null    
        //     6: astore_2       
        //     7: aload_0        
        //     8: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    11: astore_3       
        //    12: aload_0        
        //    13: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    16: astore          4
        //    18: aload_0        
        //    19: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    22: astore          5
        //    24: aload_0        
        //    25: aload           5
        //    27: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.c:(Lcom/intellij/psi/tree/IElementType;)Z
        //    30: ifeq            62
        //    33: aload           5
        //    35: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    38: if_acmpeq       58
        //    41: goto            48
        //    44: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    47: athrow         
        //    48: aload           5
        //    50: astore_2       
        //    51: aload_0        
        //    52: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    55: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;)V
        //    58: aload_0        
        //    59: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    62: aload_0        
        //    63: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    66: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    69: if_acmpeq       106
        //    72: aload_0        
        //    73: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    76: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    79: if_acmpeq       106
        //    82: goto            89
        //    85: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    88: athrow         
        //    89: aload_0        
        //    90: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    93: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SEMICOLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    96: if_acmpne       126
        //    99: goto            106
        //   102: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   105: athrow         
        //   106: aload_0        
        //   107: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   110: aload_0        
        //   111: aload           4
        //   113: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.ARGUMENT_SELECTOR:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   116: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   119: goto            166
        //   122: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   125: athrow         
        //   126: aload_0        
        //   127: aload           4
        //   129: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   132: aload_0        
        //   133: aload_3        
        //   134: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   137: aload_0        
        //   138: aload_1        
        //   139: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastMacro:Lcom/intellij/lang/PsiBuilder$Marker;
        //   142: aload_2        
        //   143: ifnull          158
        //   146: aload_0        
        //   147: aload_2        
        //   148: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;)V
        //   151: goto            158
        //   154: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   157: athrow         
        //   158: aload_0        
        //   159: ldc             "Message selector expected"
        //   161: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   164: iconst_0       
        //   165: ireturn        
        //   166: aload_0        
        //   167: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext.InParameter:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //   170: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInMessagePassingParameter:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //   173: iconst_0       
        //   174: istore          6
        //   176: aload_0        
        //   177: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   180: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   183: if_acmpne       264
        //   186: aload_0        
        //   187: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   190: astore          7
        //   192: aload_0        
        //   193: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   196: aload_0        
        //   197: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   200: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   203: if_acmpne       209
        //   206: iconst_1       
        //   207: istore          6
        //   209: aload_0        
        //   210: aload           7
        //   212: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   215: iload           6
        //   217: ifeq            264
        //   220: aload_0        
        //   221: iconst_0       
        //   222: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Z)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   225: ifnonnull       243
        //   228: goto            235
        //   231: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   234: athrow         
        //   235: iconst_1       
        //   236: goto            244
        //   239: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   242: athrow         
        //   243: iconst_0       
        //   244: istore          6
        //   246: iload           6
        //   248: ifeq            264
        //   251: aload_0        
        //   252: ldc             "Expecting message argument"
        //   254: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   257: goto            264
        //   260: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   263: athrow         
        //   264: iload           6
        //   266: ifne            275
        //   269: aload_0        
        //   270: iconst_0       
        //   271: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.d:(Z)Z
        //   274: pop            
        //   275: aload_0        
        //   276: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext.None:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //   279: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInMessagePassingParameter:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //   282: goto            297
        //   285: astore          8
        //   287: aload_0        
        //   288: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext.None:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //   291: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInMessagePassingParameter:Lcom/jetbrains/cidr/lang/parser/OCParsing$MessagePassingContext;
        //   294: aload           8
        //   296: athrow         
        //   297: aload_0        
        //   298: aload_3        
        //   299: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.MESSAGE_ARGUMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   302: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   305: aload_0        
        //   306: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   309: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   312: if_acmpne       354
        //   315: aload_0        
        //   316: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   319: aload_0        
        //   320: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   323: astore          7
        //   325: aload_0        
        //   326: aload_0        
        //   327: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   330: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.ARGUMENT_SELECTOR:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   333: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   336: aload_0        
        //   337: iconst_0       
        //   338: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.d:(Z)Z
        //   341: pop            
        //   342: aload_0        
        //   343: aload           7
        //   345: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.MESSAGE_ARGUMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   348: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   351: goto            305
        //   354: iconst_1       
        //   355: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  246    257    260    264    Ljava/lang/IllegalArgumentException;
        //  220    239    239    243    Ljava/lang/IllegalArgumentException;
        //  209    228    231    235    Ljava/lang/IllegalArgumentException;
        //  126    151    154    158    Ljava/lang/IllegalArgumentException;
        //  89     122    122    126    Ljava/lang/IllegalArgumentException;
        //  72     99     102    106    Ljava/lang/IllegalArgumentException;
        //  62     82     85     89     Ljava/lang/IllegalArgumentException;
        //  24     41     44     48     Ljava/lang/IllegalArgumentException;
        //  264    275    285    297    Any
        //  285    287    285    297    Any
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0089:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean c(final PsiBuilder.Marker p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.$assertionsDisabled:Z
        //     3: ifne            35
        //     6: aload_0        
        //     7: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    10: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SELECTOR_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    13: if_acmpeq       35
        //    16: goto            23
        //    19: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    22: athrow         
        //    23: new             Ljava/lang/AssertionError;
        //    26: dup            
        //    27: invokespecial   java/lang/AssertionError.<init>:()V
        //    30: athrow         
        //    31: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    34: athrow         
        //    35: aload_0        
        //    36: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    39: aload_0        
        //    40: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    43: ldc             "'(' required"
        //    45: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //    48: ifeq            185
        //    51: aload_0        
        //    52: aload_0        
        //    53: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    56: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.c:(Lcom/intellij/psi/tree/IElementType;)Z
        //    59: ifne            103
        //    62: goto            69
        //    65: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    68: athrow         
        //    69: aload_0        
        //    70: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    73: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    76: if_acmpeq       103
        //    79: goto            86
        //    82: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    85: athrow         
        //    86: aload_0        
        //    87: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    90: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    93: if_acmpne       175
        //    96: goto            103
        //    99: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   102: athrow         
        //   103: aload_0        
        //   104: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   107: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   110: if_acmpeq       168
        //   113: goto            120
        //   116: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   119: athrow         
        //   120: aload_0        
        //   121: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   124: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   127: if_acmpeq       168
        //   130: goto            137
        //   133: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   136: athrow         
        //   137: aload_0        
        //   138: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   141: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   144: if_acmpeq       168
        //   147: goto            154
        //   150: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   153: athrow         
        //   154: aload_0        
        //   155: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   158: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;)V
        //   161: goto            168
        //   164: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   167: athrow         
        //   168: aload_0        
        //   169: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   172: goto            51
        //   175: aload_0        
        //   176: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   179: ldc             "')' required"
        //   181: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   184: pop            
        //   185: aload_0        
        //   186: aload_1        
        //   187: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.SELECTOR_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   190: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   193: iconst_1       
        //   194: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      16     19     23     Ljava/lang/IllegalArgumentException;
        //  6      31     31     35     Ljava/lang/IllegalArgumentException;
        //  35     62     65     69     Ljava/lang/IllegalArgumentException;
        //  51     79     82     86     Ljava/lang/IllegalArgumentException;
        //  69     96     99     103    Ljava/lang/IllegalArgumentException;
        //  86     113    116    120    Ljava/lang/IllegalArgumentException;
        //  103    130    133    137    Ljava/lang/IllegalArgumentException;
        //  120    147    150    154    Ljava/lang/IllegalArgumentException;
        //  137    161    164    168    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0051:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean k(final PsiBuilder.Marker p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.$assertionsDisabled:Z
        //     3: ifne            52
        //     6: aload_0        
        //     7: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    10: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AVAILABLE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    13: if_acmpeq       52
        //    16: goto            23
        //    19: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    22: athrow         
        //    23: aload_0        
        //    24: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    27: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.__BUILTIN_AVAILABLE_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    30: if_acmpeq       52
        //    33: goto            40
        //    36: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    39: athrow         
        //    40: new             Ljava/lang/AssertionError;
        //    43: dup            
        //    44: invokespecial   java/lang/AssertionError.<init>:()V
        //    47: athrow         
        //    48: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    51: athrow         
        //    52: aload_0        
        //    53: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    56: aload_0        
        //    57: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    60: ldc             "'(' required"
        //    62: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //    65: ifeq            141
        //    68: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.AVAILABILITY_EXPRESSION_ALLOWED_TOKEN_TYPES:Ljava/util/Set;
        //    71: aload_0        
        //    72: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    75: invokeinterface java/util/Set.contains:(Ljava/lang/Object;)Z
        //    80: ifeq            131
        //    83: goto            90
        //    86: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    89: athrow         
        //    90: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LITERALS:Lcom/intellij/psi/tree/TokenSet;
        //    93: aload_0        
        //    94: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    97: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   100: ifeq            124
        //   103: goto            110
        //   106: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   109: athrow         
        //   110: aload_0        
        //   111: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.VERSION_LITERAL:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   114: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;)V
        //   117: goto            124
        //   120: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   123: athrow         
        //   124: aload_0        
        //   125: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   128: goto            68
        //   131: aload_0        
        //   132: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   135: ldc             "')' required"
        //   137: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   140: pop            
        //   141: aload_0        
        //   142: aload_1        
        //   143: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.AVAILABILITY_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   146: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   149: iconst_1       
        //   150: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      16     19     23     Ljava/lang/IllegalArgumentException;
        //  6      33     36     40     Ljava/lang/IllegalArgumentException;
        //  23     48     48     52     Ljava/lang/IllegalArgumentException;
        //  52     83     86     90     Ljava/lang/IllegalArgumentException;
        //  68     103    106    110    Ljava/lang/IllegalArgumentException;
        //  90     117    120    124    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0023:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void aT() {
        Label_0035: {
            Label_0023: {
                try {
                    if (OCParsing.$assertionsDisabled) {
                        break Label_0035;
                    }
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final OCKeywordElementType ocKeywordElementType = OCTokenTypes.DELETE_CPP_KEYWORD;
                    if (elementType != ocKeywordElementType) {
                        break Label_0023;
                    }
                    break Label_0035;
                }
                catch (IllegalArgumentException ex) {
                    throw a(ex);
                }
                try {
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final OCKeywordElementType ocKeywordElementType = OCTokenTypes.DELETE_CPP_KEYWORD;
                    if (elementType != ocKeywordElementType) {
                        throw new AssertionError();
                    }
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
            }
            try {
                this.aY();
                if (this.aF() == OCTokenTypes.LBRACKET) {
                    this.aY();
                    this.a(OCTokenTypes.RBRACKET, "Expecting ']'");
                }
            }
            catch (IllegalArgumentException ex3) {
                throw a(ex3);
            }
        }
        this.l(false);
    }
    
    private void al() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.$assertionsDisabled:Z
        //     3: ifne            35
        //     6: aload_0        
        //     7: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    10: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NEW_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //    13: if_acmpeq       35
        //    16: goto            23
        //    19: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    22: athrow         
        //    23: new             Ljava/lang/AssertionError;
        //    26: dup            
        //    27: invokespecial   java/lang/AssertionError.<init>:()V
        //    30: athrow         
        //    31: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    34: athrow         
        //    35: aload_0        
        //    36: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    39: aload_0        
        //    40: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    43: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    46: if_acmpne       140
        //    49: aload_0        
        //    50: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.ONLY_TYPES:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //    53: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;)Z
        //    56: ifne            119
        //    59: goto            66
        //    62: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    65: athrow         
        //    66: aload_0        
        //    67: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.R:()V
        //    70: aload_0        
        //    71: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    74: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    77: if_acmpne       99
        //    80: goto            87
        //    83: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    86: athrow         
        //    87: aload_0        
        //    88: iconst_0       
        //    89: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.t:(Z)V
        //    92: goto            119
        //    95: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    98: athrow         
        //    99: aload_0        
        //   100: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.D:()Z
        //   103: ifne            119
        //   106: aload_0        
        //   107: ldc             "Type name expected"
        //   109: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   112: goto            119
        //   115: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   118: athrow         
        //   119: aload_0        
        //   120: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   123: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   126: if_acmpne       160
        //   129: aload_0        
        //   130: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ab:()V
        //   133: goto            160
        //   136: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   139: athrow         
        //   140: aload_0        
        //   141: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.D:()Z
        //   144: ifne            160
        //   147: aload_0        
        //   148: ldc             "Type name expected"
        //   150: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   153: goto            160
        //   156: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   159: athrow         
        //   160: aload_0        
        //   161: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   164: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   167: if_acmpne       181
        //   170: aload_0        
        //   171: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.R:()V
        //   174: goto            181
        //   177: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   180: athrow         
        //   181: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      16     19     23     Ljava/lang/IllegalArgumentException;
        //  6      31     31     35     Ljava/lang/IllegalArgumentException;
        //  35     59     62     66     Ljava/lang/IllegalArgumentException;
        //  49     80     83     87     Ljava/lang/IllegalArgumentException;
        //  66     95     95     99     Ljava/lang/IllegalArgumentException;
        //  99     112    115    119    Ljava/lang/IllegalArgumentException;
        //  119    136    136    140    Ljava/lang/IllegalArgumentException;
        //  140    153    156    160    Ljava/lang/IllegalArgumentException;
        //  160    174    177    181    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0066:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean c() {
        final PsiBuilder.Marker a7 = this.a7();
        Label_0035: {
            try {
                if (!this.b(DeclarationContext.SIZEOF, TypeParsingExpectation.ANY)) {
                    break Label_0035;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.RPAR;
                if (elementType != ocPunctuatorElementType) {
                    break Label_0035;
                }
                break Label_0035;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.RPAR;
                if (elementType != ocPunctuatorElementType) {
                    this.i(a7);
                    return false;
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        a7.drop();
        return true;
    }
    
    private boolean aw() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     4: astore_1       
        //     5: aload_1        
        //     6: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.TYPEID_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //     9: if_acmpne       20
        //    12: iconst_1       
        //    13: goto            21
        //    16: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    19: athrow         
        //    20: iconst_0       
        //    21: istore_2       
        //    22: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.$assertionsDisabled:Z
        //    25: ifne            93
        //    28: aload_1        
        //    29: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.SIZEOF_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    32: if_acmpeq       93
        //    35: goto            42
        //    38: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    41: athrow         
        //    42: aload_1        
        //    43: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALIGNOF_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    46: if_acmpeq       93
        //    49: goto            56
        //    52: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    55: athrow         
        //    56: aload_1        
        //    57: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ALIGNOF_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //    60: if_acmpeq       93
        //    63: goto            70
        //    66: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    69: athrow         
        //    70: iload_2        
        //    71: ifne            93
        //    74: goto            81
        //    77: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    80: athrow         
        //    81: new             Ljava/lang/AssertionError;
        //    84: dup            
        //    85: invokespecial   java/lang/AssertionError.<init>:()V
        //    88: athrow         
        //    89: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    92: athrow         
        //    93: aload_0        
        //    94: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    97: astore_3       
        //    98: aload_0        
        //    99: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   102: aload_0        
        //   103: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   106: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELLIPSIS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   109: if_acmpne       123
        //   112: aload_0        
        //   113: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   116: goto            123
        //   119: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   122: athrow         
        //   123: aload_0        
        //   124: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   127: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   130: if_acmpne       144
        //   133: aload_0        
        //   134: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.M:()V
        //   137: goto            165
        //   140: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   143: athrow         
        //   144: aload_0        
        //   145: iconst_1       
        //   146: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:(Z)Z
        //   149: ifne            165
        //   152: aload_0        
        //   153: ldc             "Expecting expression or '('"
        //   155: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   158: goto            165
        //   161: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   164: athrow         
        //   165: aload_0        
        //   166: aload_3        
        //   167: iload_2        
        //   168: ifeq            181
        //   171: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CPP_TYPEID_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   174: goto            184
        //   177: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   180: athrow         
        //   181: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.SIZEOF_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   184: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   187: iconst_1       
        //   188: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      16     16     20     Ljava/lang/IllegalArgumentException;
        //  22     35     38     42     Ljava/lang/IllegalArgumentException;
        //  28     49     52     56     Ljava/lang/IllegalArgumentException;
        //  42     63     66     70     Ljava/lang/IllegalArgumentException;
        //  56     74     77     81     Ljava/lang/IllegalArgumentException;
        //  70     89     89     93     Ljava/lang/IllegalArgumentException;
        //  98     116    119    123    Ljava/lang/IllegalArgumentException;
        //  123    140    140    144    Ljava/lang/IllegalArgumentException;
        //  144    158    161    165    Ljava/lang/IllegalArgumentException;
        //  165    177    177    181    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0042:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void M() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //     4: ldc             "Expecting '('"
        //     6: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //     9: pop            
        //    10: aload_0        
        //    11: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    14: astore_1       
        //    15: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.CPP_SPECIFIERS_FIRST:Lcom/intellij/psi/tree/TokenSet;
        //    18: aload_1        
        //    19: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    22: ifeq            95
        //    25: aload_1        
        //    26: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    29: if_acmpne       53
        //    32: goto            39
        //    35: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    38: athrow         
        //    39: aload_0        
        //    40: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aK:()Z
        //    43: ifeq            95
        //    46: goto            53
        //    49: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    52: athrow         
        //    53: aload_0        
        //    54: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.c:()Z
        //    57: ifne            130
        //    60: goto            67
        //    63: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    66: athrow         
        //    67: aload_0        
        //    68: iconst_1       
        //    69: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.n:(Z)Z
        //    72: ifne            130
        //    75: goto            82
        //    78: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    81: athrow         
        //    82: aload_0        
        //    83: ldc             "Expecting typename or expression"
        //    85: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //    88: goto            130
        //    91: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    94: athrow         
        //    95: aload_0        
        //    96: iconst_1       
        //    97: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.n:(Z)Z
        //   100: ifne            130
        //   103: aload_0        
        //   104: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.c:()Z
        //   107: ifne            130
        //   110: goto            117
        //   113: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   116: athrow         
        //   117: aload_0        
        //   118: ldc             "Expecting typename or expression"
        //   120: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   123: goto            130
        //   126: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   129: athrow         
        //   130: aload_0        
        //   131: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   134: ldc             "Expecting ')'"
        //   136: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   139: pop            
        //   140: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  15     32     35     39     Ljava/lang/IllegalArgumentException;
        //  25     46     49     53     Ljava/lang/IllegalArgumentException;
        //  39     60     63     67     Ljava/lang/IllegalArgumentException;
        //  53     75     78     82     Ljava/lang/IllegalArgumentException;
        //  67     91     91     95     Ljava/lang/IllegalArgumentException;
        //  95     110    113    117    Ljava/lang/IllegalArgumentException;
        //  103    123    126    130    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0039:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean aR() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.NOEXCEPT_KEYWORD;
                if (elementType != ocElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCElementType ocElementType = OCTokenTypes.NOEXCEPT_KEYWORD;
                if (elementType != ocElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        this.aY();
        this.a(OCTokenTypes.LPAR, "Expecting '('");
        this.n(false);
        this.a(OCTokenTypes.RPAR, "Expecting ')'");
        return true;
    }
    
    private boolean ah() {
        Label_0055: {
            Label_0033: {
                try {
                    this.aY();
                    if (!this.a(OCTokenTypes.LPAR, "expecting '('")) {
                        return true;
                    }
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final OCElementType ocElementType = OCTokenTypes.AUTO_KEYWORD;
                    if (elementType == ocElementType) {
                        break Label_0033;
                    }
                    break Label_0033;
                }
                catch (IllegalArgumentException ex) {
                    throw a(ex);
                }
                try {
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final OCElementType ocElementType = OCTokenTypes.AUTO_KEYWORD;
                    if (elementType == ocElementType) {
                        this.aY();
                        this.myForceEagerMode = true;
                        break Label_0055;
                    }
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
            }
            this.n(false);
        }
        this.a(OCTokenTypes.RPAR, "Missing ')'");
        return true;
    }
    
    private void R() {
        Label_0023: {
            try {
                if (OCParsing.$assertionsDisabled) {
                    break Label_0023;
                }
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LPAR;
                if (elementType != ocPunctuatorElementType) {
                    break Label_0023;
                }
                break Label_0023;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final IElementType elementType = ocParsing.aF();
                final OCPunctuatorElementType ocPunctuatorElementType = OCTokenTypes.LPAR;
                if (elementType != ocPunctuatorElementType) {
                    throw new AssertionError();
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        final PsiBuilder.Marker a7 = this.a7();
        Label_0086: {
            Label_0068: {
                try {
                    this.aY();
                    if (this.aF() != OCTokenTypes.LT) {
                        break Label_0086;
                    }
                    final OCParsing ocParsing2 = this;
                    final boolean b = ocParsing2.myIsInsideDirective;
                    if (b) {
                        break Label_0068;
                    }
                    break Label_0086;
                }
                catch (IllegalArgumentException ex3) {
                    throw a(ex3);
                }
                try {
                    final OCParsing ocParsing2 = this;
                    final boolean b = ocParsing2.myIsInsideDirective;
                    if (b) {
                        this.d(OCTokenTypes.GT);
                        this.aY();
                        break Label_0086;
                    }
                }
                catch (IllegalArgumentException ex4) {
                    throw a(ex4);
                }
            }
            while (true) {
                try {
                    if (this.F() || this.aF() == OCTokenTypes.RPAR) {
                        break;
                    }
                }
                catch (IllegalArgumentException ex5) {
                    throw a(ex5);
                }
                final PsiBuilder.Marker a8 = this.a7();
                Label_0200: {
                    Label_0187: {
                        Label_0156: {
                            try {
                                this.d(false);
                                if (this.aF() == OCTokenTypes.ELLIPSIS) {
                                    this.aY();
                                    this.b(a8, OCElementTypes.CPP_VARIADIC_PACK_EXPRESSION);
                                    break Label_0156;
                                }
                            }
                            catch (IllegalArgumentException ex6) {
                                throw a(ex6);
                            }
                            a8.drop();
                            try {
                                if (this.aF() != OCTokenTypes.COMMA) {
                                    break Label_0200;
                                }
                                final OCParsing ocParsing3 = this;
                                ocParsing3.aY();
                                final OCParsing ocParsing4 = this;
                                final IElementType elementType2 = ocParsing4.aF();
                                final OCPunctuatorElementType ocPunctuatorElementType2 = OCTokenTypes.RPAR;
                                if (elementType2 == ocPunctuatorElementType2) {
                                    break Label_0187;
                                }
                                continue;
                            }
                            catch (IllegalArgumentException ex7) {
                                throw a(ex7);
                            }
                        }
                        try {
                            final OCParsing ocParsing3 = this;
                            ocParsing3.aY();
                            final OCParsing ocParsing4 = this;
                            final IElementType elementType2 = ocParsing4.aF();
                            final OCPunctuatorElementType ocPunctuatorElementType2 = OCTokenTypes.RPAR;
                            if (elementType2 == ocPunctuatorElementType2) {
                                this.a("Expecting expression");
                                break;
                            }
                            continue;
                        }
                        catch (IllegalArgumentException ex8) {
                            throw a(ex8);
                        }
                    }
                    try {
                        if (this.aF() != OCTokenTypes.RPAR) {
                            this.a("',' or ')' expected");
                            break;
                        }
                        continue;
                    }
                    catch (IllegalArgumentException ex9) {
                        throw a(ex9);
                    }
                }
            }
        }
        this.a(OCTokenTypes.RPAR, "')' missing");
        this.b(a7, OCElementTypes.ARGUMENT_LIST);
    }
    
    private void E() {
        this.b(false, false);
    }
    
    private boolean Q() {
        final PsiBuilder.Marker a7 = this.a7();
        final boolean b = this.b(false, true);
        try {
            if (this.aF() == OCTokenTypes.ELLIPSIS) {
                this.aY();
                this.b(a7, OCElementTypes.CPP_VARIADIC_PACK_EXPRESSION);
                return b;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        a7.drop();
        return b;
    }
    
    private boolean n(final boolean p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //     4: astore_2       
        //     5: aload_0        
        //     6: iload_1        
        //     7: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.d:(Z)Z
        //    10: ifne            25
        //    13: aload_2        
        //    14: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //    19: iconst_0       
        //    20: ireturn        
        //    21: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    24: athrow         
        //    25: aload_0        
        //    26: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    29: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    32: if_acmpne       107
        //    35: aload_0        
        //    36: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ay:()Lcom/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType;
        //    39: astore_3       
        //    40: aload_0        
        //    41: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideMacro:Z
        //    44: ifeq            79
        //    47: aload_3        
        //    48: ifnull          79
        //    51: goto            58
        //    54: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    57: athrow         
        //    58: aload_3        
        //    59: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType.isParamToken:()Z
        //    62: ifne            79
        //    65: goto            72
        //    68: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    71: athrow         
        //    72: goto            107
        //    75: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    78: athrow         
        //    79: aload_0        
        //    80: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //    83: aload_0        
        //    84: iconst_0       
        //    85: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.d:(Z)Z
        //    88: pop            
        //    89: aload_0        
        //    90: aload_2        
        //    91: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.COMMA_EXPRESSION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    94: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //    97: aload_2        
        //    98: invokeinterface com/intellij/lang/PsiBuilder$Marker.precede:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   103: astore_2       
        //   104: goto            25
        //   107: aload_2        
        //   108: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   113: iconst_1       
        //   114: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      21     21     25     Ljava/lang/IllegalArgumentException;
        //  40     51     54     58     Ljava/lang/IllegalArgumentException;
        //  47     65     68     72     Ljava/lang/IllegalArgumentException;
        //  58     75     75     79     Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0058:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void an() {
        try {
            this.a(OCTokenTypes.LPAR, "Expecting '('");
            if (!this.n(false)) {
                this.a("Expecting expression");
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        this.a(OCTokenTypes.RPAR, "Expecting ')'");
    }
    
    private void b(final PsiBuilder.Marker marker, final IElementType elementType) {
        Label_0032: {
            try {
                if (this.myLastMacro != null) {
                    marker.doneBefore(elementType, this.myLastMacro);
                    break Label_0032;
                }
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            marker.done(elementType);
            try {
                if (OCParsing.COMMENTS_BINDABLE_SET.contains(elementType)) {
                    marker.setCustomEdgeTokenBinders(this.COMMENT_BINDER, (WhitespacesAndCommentsBinder)null);
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
    }
    
    private void i(final PsiBuilder.Marker marker) {
        this.myLastMacro = null;
        this.myTemplateGTGT = false;
        marker.rollbackTo();
    }
    
    private PsiBuilder.Marker a7() {
        this.myLastMacro = null;
        return this.myBuilder.mark();
    }
    
    private boolean F() {
        try {
            if (this.aF() == null) {
                return true;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        return false;
    }
    
    private void a(final String s) {
        Label_0021: {
            try {
                if (this.myDisableErrors) {
                    return;
                }
                final OCParsing ocParsing = this;
                final PsiBuilder.Marker marker = ocParsing.myLastMacro;
                if (marker != null) {
                    break Label_0021;
                }
                break Label_0021;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final OCParsing ocParsing = this;
                final PsiBuilder.Marker marker = ocParsing.myLastMacro;
                if (marker != null) {
                    this.myLastMacro.precede().errorBefore(s, this.myLastMacro);
                    return;
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        this.myBuilder.error(s);
    }
    
    private boolean a(final IElementType elementType, final String s) {
        try {
            if (elementType != this.aF()) {
                this.a(s);
                return false;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        this.aY();
        return true;
    }
    
    private void X() {
        try {
            if (this.aF() == OCTokenTypes.GTGT) {
                this.aY();
                this.myTemplateGTGT = true;
                return;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        this.a(OCTokenTypes.GT, "Expected '>'");
    }
    
    long getCurrentComplexOffset() {
        final IElementType tokenType = this.myBuilder.getTokenType();
        int offsetInTopSubstitution = 0;
        if (tokenType instanceof OCMacroForeignLeafType) {
            offsetInTopSubstitution = ((OCMacroForeignLeafType)tokenType).getOffsetInTopSubstitution();
        }
        return OCSymbolOffsetUtil.getComplexOffset(this.myBuilder.getCurrentOffset(), offsetInTopSubstitution);
    }
    
    private void a(final IElementType elementType) {
        this.myBuilder.remapCurrentToken(a(this.myBuilder.getTokenType(), elementType));
    }
    
    private static IElementType a(final IElementType elementType, final IElementType elementType2) {
        if (elementType instanceof OCMacroForeignLeafType) {
            final OCMacroForeignLeafType ocMacroForeignLeafType = (OCMacroForeignLeafType)elementType;
            return new OCMacroForeignLeafType(a(ocMacroForeignLeafType.getDelegate(), elementType2), ocMacroForeignLeafType.getValue(), ocMacroForeignLeafType.getMacroName(), ocMacroForeignLeafType.getMacroArgumentIndex(), ocMacroForeignLeafType.getRangeInMacroArgument(), ocMacroForeignLeafType.getOffsetInTopSubstitution());
        }
        if (elementType instanceof OCMacroReferenceTokenType) {
            final OCMacroReferenceTokenType ocMacroReferenceTokenType = (OCMacroReferenceTokenType)elementType;
            return new OCMacroReferenceTokenType(a(ocMacroReferenceTokenType.getDelegate(), elementType2), ocMacroReferenceTokenType.getValue(), ocMacroReferenceTokenType.isParamToken(), ocMacroReferenceTokenType.getMacroLevel(), ocMacroReferenceTokenType.isRoot());
        }
        return elementType2;
    }
    
    private static boolean b(final IElementType p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //     4: if_acmpeq       102
        //     7: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LITERALS:Lcom/intellij/psi/tree/TokenSet;
        //    10: aload_0        
        //    11: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    14: ifne            94
        //    17: goto            24
        //    20: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    23: athrow         
        //    24: aload_0        
        //    25: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACE:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    28: if_acmpeq       94
        //    31: goto            38
        //    34: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    37: athrow         
        //    38: aload_0        
        //    39: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    42: if_acmpeq       94
        //    45: goto            52
        //    48: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    51: athrow         
        //    52: aload_0        
        //    53: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LBRACKET:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    56: if_acmpeq       94
        //    59: goto            66
        //    62: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    65: athrow         
        //    66: aload_0        
        //    67: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.MINUS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    70: if_acmpeq       94
        //    73: goto            80
        //    76: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    79: athrow         
        //    80: aload_0        
        //    81: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.PLUS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    84: if_acmpne       102
        //    87: goto            94
        //    90: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    93: athrow         
        //    94: iconst_1       
        //    95: goto            103
        //    98: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   101: athrow         
        //   102: iconst_0       
        //   103: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      17     20     24     Ljava/lang/IllegalArgumentException;
        //  7      31     34     38     Ljava/lang/IllegalArgumentException;
        //  24     45     48     52     Ljava/lang/IllegalArgumentException;
        //  38     59     62     66     Ljava/lang/IllegalArgumentException;
        //  52     73     76     80     Ljava/lang/IllegalArgumentException;
        //  66     87     90     94     Ljava/lang/IllegalArgumentException;
        //  80     98     98     102    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0024:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @Nullable
    private IElementType aF() {
        return this.e(this.k());
    }
    
    private IElementType e(final IElementType p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //     4: ifne            87
        //     7: aload_0        
        //     8: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsObjCSupport:Z
        //    11: ifne            87
        //    14: goto            21
        //    17: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    20: athrow         
        //    21: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CPP_KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //    24: aload_1        
        //    25: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    28: ifne            78
        //    31: goto            38
        //    34: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    37: athrow         
        //    38: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.OBJC_KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //    41: aload_1        
        //    42: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    45: ifne            78
        //    48: goto            55
        //    51: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    54: athrow         
        //    55: aload_1        
        //    56: aload_0        
        //    57: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //    60: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //    65: invokestatic    com/jetbrains/cidr/lang/util/OCElementUtil.isAlternativeCppPunctuator:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/CharSequence;)Z
        //    68: ifeq            87
        //    71: goto            78
        //    74: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    77: athrow         
        //    78: aload_0        
        //    79: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.g:()Lcom/intellij/psi/tree/IElementType;
        //    82: areturn        
        //    83: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    86: athrow         
        //    87: aload_0        
        //    88: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //    91: ifne            160
        //    94: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CPP_KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //    97: aload_1        
        //    98: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   101: ifne            134
        //   104: goto            111
        //   107: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   110: athrow         
        //   111: aload_1        
        //   112: aload_0        
        //   113: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   116: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   121: invokestatic    com/jetbrains/cidr/lang/util/OCElementUtil.isAlternativeCppPunctuator:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/CharSequence;)Z
        //   124: ifeq            160
        //   127: goto            134
        //   130: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   133: athrow         
        //   134: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.OBJC_KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //   137: aload_1        
        //   138: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   141: ifne            160
        //   144: goto            151
        //   147: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   150: athrow         
        //   151: aload_0        
        //   152: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.g:()Lcom/intellij/psi/tree/IElementType;
        //   155: areturn        
        //   156: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   159: athrow         
        //   160: aload_0        
        //   161: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsObjCSupport:Z
        //   164: ifne            210
        //   167: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.OBJC_KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //   170: aload_1        
        //   171: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   174: ifeq            210
        //   177: goto            184
        //   180: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   183: athrow         
        //   184: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CPP_KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //   187: aload_1        
        //   188: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   191: ifne            210
        //   194: goto            201
        //   197: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   200: athrow         
        //   201: aload_0        
        //   202: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.g:()Lcom/intellij/psi/tree/IElementType;
        //   205: areturn        
        //   206: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   209: athrow         
        //   210: aload_0        
        //   211: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsObjCSupport:Z
        //   214: ifeq            304
        //   217: aload_1        
        //   218: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   221: if_acmpne       304
        //   224: goto            231
        //   227: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   230: athrow         
        //   231: aload_0        
        //   232: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   235: astore_2       
        //   236: aload_0        
        //   237: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.U:()V
        //   240: aload_0        
        //   241: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:()Lcom/intellij/psi/tree/IElementType;
        //   244: astore_1       
        //   245: aload_0        
        //   246: aload_2        
        //   247: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   250: aload_1        
        //   251: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CLASS_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   254: if_acmpne       265
        //   257: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.OBJC_CLASS_KEYWORD:Lcom/intellij/psi/tree/IElementType;
        //   260: areturn        
        //   261: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   264: athrow         
        //   265: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.KEYWORDS_WITH_DOGS:Lcom/intellij/psi/tree/TokenSet;
        //   268: aload_1        
        //   269: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   272: ifeq            283
        //   275: aload_1        
        //   276: goto            303
        //   279: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   282: athrow         
        //   283: aload_1        
        //   284: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/psi/tree/IElementType;)Z
        //   287: ifeq            300
        //   290: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   293: goto            303
        //   296: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   299: athrow         
        //   300: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.OBJC_ERROR_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   303: areturn        
        //   304: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.KEYWORDS_WITH_DOGS:Lcom/intellij/psi/tree/TokenSet;
        //   307: aload_1        
        //   308: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   311: ifeq            354
        //   314: aload_0        
        //   315: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   318: ifeq            345
        //   321: goto            328
        //   324: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   327: athrow         
        //   328: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CPP_KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //   331: aload_1        
        //   332: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   335: ifne            354
        //   338: goto            345
        //   341: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   344: athrow         
        //   345: aload_0        
        //   346: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.g:()Lcom/intellij/psi/tree/IElementType;
        //   349: areturn        
        //   350: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   353: athrow         
        //   354: aload_1        
        //   355: areturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      14     17     21     Ljava/lang/IllegalArgumentException;
        //  7      31     34     38     Ljava/lang/IllegalArgumentException;
        //  21     48     51     55     Ljava/lang/IllegalArgumentException;
        //  38     71     74     78     Ljava/lang/IllegalArgumentException;
        //  55     83     83     87     Ljava/lang/IllegalArgumentException;
        //  87     104    107    111    Ljava/lang/IllegalArgumentException;
        //  94     127    130    134    Ljava/lang/IllegalArgumentException;
        //  111    144    147    151    Ljava/lang/IllegalArgumentException;
        //  134    156    156    160    Ljava/lang/IllegalArgumentException;
        //  160    177    180    184    Ljava/lang/IllegalArgumentException;
        //  167    194    197    201    Ljava/lang/IllegalArgumentException;
        //  184    206    206    210    Ljava/lang/IllegalArgumentException;
        //  210    224    227    231    Ljava/lang/IllegalArgumentException;
        //  245    261    261    265    Ljava/lang/IllegalArgumentException;
        //  265    279    279    283    Ljava/lang/IllegalArgumentException;
        //  283    296    296    300    Ljava/lang/IllegalArgumentException;
        //  304    321    324    328    Ljava/lang/IllegalArgumentException;
        //  314    338    341    345    Ljava/lang/IllegalArgumentException;
        //  328    350    350    354    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0021:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private IElementType g() {
        this.a(OCTokenTypes.IDENTIFIER);
        return OCTokenTypes.IDENTIFIER;
    }
    
    @Nullable
    private IElementType k() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myParseUntilOffset:I
        //     4: ifeq            36
        //     7: aload_0        
        //     8: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //    11: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //    16: aload_0        
        //    17: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myParseUntilOffset:I
        //    20: if_icmple       36
        //    23: goto            30
        //    26: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    29: athrow         
        //    30: aconst_null    
        //    31: areturn        
        //    32: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    35: athrow         
        //    36: aload_0        
        //    37: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a4:()Lcom/intellij/psi/tree/IElementType;
        //    40: astore_1       
        //    41: aload_1        
        //    42: instanceof      Lcom/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType;
        //    45: ifeq            160
        //    48: aload_1        
        //    49: checkcast       Lcom/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType;
        //    52: astore_2       
        //    53: aload_0        
        //    54: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideMacro:Z
        //    57: ifne            98
        //    60: aload_0        
        //    61: iconst_1       
        //    62: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideMacro:Z
        //    65: aload_0        
        //    66: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a0:()Z
        //    69: ifne            90
        //    72: goto            79
        //    75: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    78: athrow         
        //    79: aload_0        
        //    80: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.U:()V
        //    83: goto            90
        //    86: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    89: athrow         
        //    90: aload_0        
        //    91: iconst_0       
        //    92: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideMacro:Z
        //    95: goto            157
        //    98: aload_2        
        //    99: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType.getDelegate:()Lcom/intellij/psi/tree/IElementType;
        //   102: astore_3       
        //   103: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.WHITESPACES:Lcom/intellij/psi/tree/TokenSet;
        //   106: aload_3        
        //   107: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   110: ifne            144
        //   113: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMENTS:Lcom/intellij/psi/tree/TokenSet;
        //   116: aload_3        
        //   117: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   120: ifne            144
        //   123: goto            130
        //   126: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   129: athrow         
        //   130: aload_3        
        //   131: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EOL_ESCAPE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   134: if_acmpne       155
        //   137: goto            144
        //   140: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   143: athrow         
        //   144: aload_0        
        //   145: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.U:()V
        //   148: goto            157
        //   151: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   154: athrow         
        //   155: aload_3        
        //   156: areturn        
        //   157: goto            36
        //   160: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DIRECTIVES:Lcom/intellij/psi/tree/TokenSet;
        //   163: aload_1        
        //   164: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   167: ifeq            181
        //   170: aload_0        
        //   171: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aA:()V
        //   174: goto            36
        //   177: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   180: athrow         
        //   181: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.CPP_PRAGMA_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   184: aload_1        
        //   185: if_acmpne       220
        //   188: aload_0        
        //   189: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   192: astore_2       
        //   193: aload_0        
        //   194: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.U:()V
        //   197: aload_0        
        //   198: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   201: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   204: iconst_1       
        //   205: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Lcom/intellij/psi/tree/IElementType;Z)Z
        //   208: pop            
        //   209: aload_0        
        //   210: aload_2        
        //   211: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.CPP_PRAGMA:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   214: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   217: goto            36
        //   220: aload_1        
        //   221: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.EOL_ESCAPE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   224: if_acmpne       238
        //   227: aload_0        
        //   228: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.U:()V
        //   231: goto            36
        //   234: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   237: athrow         
        //   238: aload_0        
        //   239: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myParsingInsideMacro:Z
        //   242: ifeq            265
        //   245: aload_1        
        //   246: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.isEndOfDirective:(Lcom/intellij/psi/tree/IElementType;)Z
        //   249: ifeq            265
        //   252: goto            259
        //   255: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   258: athrow         
        //   259: aconst_null    
        //   260: areturn        
        //   261: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   264: athrow         
        //   265: aload_0        
        //   266: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myParsingInsideMacro:Z
        //   269: ifeq            299
        //   272: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //   275: aload_1        
        //   276: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   279: ifeq            299
        //   282: goto            289
        //   285: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   288: athrow         
        //   289: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   292: goto            300
        //   295: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   298: athrow         
        //   299: aload_1        
        //   300: areturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      23     26     30     Ljava/lang/IllegalArgumentException;
        //  7      32     32     36     Ljava/lang/IllegalArgumentException;
        //  53     72     75     79     Ljava/lang/IllegalArgumentException;
        //  60     83     86     90     Ljava/lang/IllegalArgumentException;
        //  103    123    126    130    Ljava/lang/IllegalArgumentException;
        //  113    137    140    144    Ljava/lang/IllegalArgumentException;
        //  130    151    151    155    Ljava/lang/IllegalArgumentException;
        //  160    177    177    181    Ljava/lang/IllegalArgumentException;
        //  220    234    234    238    Ljava/lang/IllegalArgumentException;
        //  238    252    255    259    Ljava/lang/IllegalArgumentException;
        //  245    261    261    265    Ljava/lang/IllegalArgumentException;
        //  265    282    285    289    Ljava/lang/IllegalArgumentException;
        //  272    295    295    299    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0130:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @Nullable
    private OCParsingNameScope.Kind c(final String s) {
        Label_0023: {
            try {
                if (!this.myIsObjCSupport) {
                    return this.myLocalNameScope.getKind(s);
                }
                final String s2 = "id";
                final String s3 = s;
                final boolean b = s2.equals(s3);
                if (b) {
                    break Label_0023;
                }
                return this.myLocalNameScope.getKind(s);
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final String s2 = "id";
                final String s3 = s;
                final boolean b = s2.equals(s3);
                if (b) {
                    return OCParsingNameScope.Kind.OBJC_INTERFACE;
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        return this.myLocalNameScope.getKind(s);
    }
    
    @Nullable
    private OCParsingNameScope.Kind b(final List<String> list) {
        return this.myLocalNameScope.getKind(list);
    }
    
    private boolean aK() {
        return this.r(false);
    }
    
    private boolean r(final boolean b) {
        return OCParsingNameScope.isType(this.i(b));
    }
    
    @Nullable
    private OCParsingNameScope.Kind i(final boolean p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokevirtual   com/jetbrains/cidr/lang/parser/OCParsing.getCurrentComplexOffset:()J
        //     4: lstore_2       
        //     5: iload_1        
        //     6: ifne            53
        //     9: aload_0        
        //    10: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myTypeKindsCache:Ljava/util/Map;
        //    13: lload_2        
        //    14: invokestatic    java/lang/Long.valueOf:(J)Ljava/lang/Long;
        //    17: invokeinterface java/util/Map.containsKey:(Ljava/lang/Object;)Z
        //    22: ifeq            53
        //    25: goto            32
        //    28: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    31: athrow         
        //    32: aload_0        
        //    33: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myTypeKindsCache:Ljava/util/Map;
        //    36: lload_2        
        //    37: invokestatic    java/lang/Long.valueOf:(J)Ljava/lang/Long;
        //    40: invokeinterface java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
        //    45: checkcast       Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //    48: areturn        
        //    49: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    52: athrow         
        //    53: aload_0        
        //    54: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    57: astore          4
        //    59: aload           4
        //    61: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    64: if_acmpeq       88
        //    67: aload           4
        //    69: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    72: if_acmpeq       88
        //    75: goto            82
        //    78: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    81: athrow         
        //    82: aconst_null    
        //    83: areturn        
        //    84: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    87: athrow         
        //    88: aload           4
        //    90: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    93: if_acmpne       105
        //    96: ldc             ""
        //    98: goto            114
        //   101: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   104: athrow         
        //   105: aload_0        
        //   106: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   109: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   114: astore          5
        //   116: aload_0        
        //   117: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   120: ifne            134
        //   123: aload_0        
        //   124: aload           5
        //   126: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.c:(Ljava/lang/String;)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   129: areturn        
        //   130: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   133: athrow         
        //   134: aload_0        
        //   135: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   138: astore          6
        //   140: aload           4
        //   142: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   145: if_acmpeq       159
        //   148: aload_0        
        //   149: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   152: goto            159
        //   155: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   158: athrow         
        //   159: aload_0        
        //   160: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   163: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   166: if_acmpne       199
        //   169: aload_0        
        //   170: aload           5
        //   172: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.c:(Ljava/lang/String;)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   175: invokestatic    com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.isTemplate:(Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;)Z
        //   178: ifeq            199
        //   181: goto            188
        //   184: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   187: athrow         
        //   188: aload_0        
        //   189: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aE:()V
        //   192: goto            199
        //   195: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   198: athrow         
        //   199: aload_0        
        //   200: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   203: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   206: if_acmpeq       220
        //   209: aload_0        
        //   210: aload           5
        //   212: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.c:(Ljava/lang/String;)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   215: astore          7
        //   217: goto            521
        //   220: aload_0        
        //   221: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   224: iconst_0       
        //   225: istore          8
        //   227: aload_0        
        //   228: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   231: ifeq            288
        //   234: aload_0        
        //   235: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   238: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.OPERATOR_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   241: if_acmpeq       285
        //   244: goto            251
        //   247: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   250: athrow         
        //   251: aload_0        
        //   252: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   255: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.NEW_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   258: if_acmpeq       285
        //   261: goto            268
        //   264: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   267: athrow         
        //   268: aload_0        
        //   269: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   272: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DELETE_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   275: if_acmpne       288
        //   278: goto            285
        //   281: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   284: athrow         
        //   285: iconst_1       
        //   286: istore          8
        //   288: new             Ljava/util/ArrayList;
        //   291: dup            
        //   292: iconst_2       
        //   293: invokespecial   java/util/ArrayList.<init>:(I)V
        //   296: astore          9
        //   298: aload           9
        //   300: aload           5
        //   302: invokevirtual   java/util/ArrayList.add:(Ljava/lang/Object;)Z
        //   305: pop            
        //   306: aload_0        
        //   307: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   310: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   313: if_acmpne       498
        //   316: aload           9
        //   318: aload_0        
        //   319: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   322: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   327: invokevirtual   java/util/ArrayList.add:(Ljava/lang/Object;)Z
        //   330: pop            
        //   331: aload_0        
        //   332: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   335: aload_0        
        //   336: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   339: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   342: if_acmpne       382
        //   345: goto            352
        //   348: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   351: athrow         
        //   352: aload_0        
        //   353: aload           9
        //   355: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Ljava/util/List;)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   358: invokestatic    com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.isTemplate:(Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;)Z
        //   361: ifeq            382
        //   364: goto            371
        //   367: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   370: athrow         
        //   371: aload_0        
        //   372: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aE:()V
        //   375: goto            382
        //   378: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   381: athrow         
        //   382: aload_0        
        //   383: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   386: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COLON2X:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   389: if_acmpne       498
        //   392: aload_0        
        //   393: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   396: aload_0        
        //   397: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   400: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   403: if_acmpeq       450
        //   406: goto            413
        //   409: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   412: athrow         
        //   413: aload_0        
        //   414: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //   417: ifeq            498
        //   420: goto            427
        //   423: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   426: athrow         
        //   427: aload_0        
        //   428: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   431: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.OPERATOR_CPP_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCKeywordElementType;
        //   434: if_acmpne       498
        //   437: goto            444
        //   440: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   443: athrow         
        //   444: iconst_1       
        //   445: istore          8
        //   447: goto            498
        //   450: aload           9
        //   452: aload_0        
        //   453: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   456: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   461: invokevirtual   java/util/ArrayList.add:(Ljava/lang/Object;)Z
        //   464: pop            
        //   465: aload_0        
        //   466: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   469: aload_0        
        //   470: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   473: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LT:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   476: if_acmpne       382
        //   479: aload_0        
        //   480: aload           9
        //   482: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Ljava/util/List;)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   485: invokestatic    com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope.isTemplate:(Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;)Z
        //   488: ifeq            382
        //   491: aload_0        
        //   492: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aE:()V
        //   495: goto            382
        //   498: iload           8
        //   500: ifeq            513
        //   503: getstatic       com/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind.NON_TYPE:Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   506: goto            519
        //   509: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   512: athrow         
        //   513: aload_0        
        //   514: aload           9
        //   516: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Ljava/util/List;)Lcom/jetbrains/cidr/lang/preprocessor/OCParsingNameScope$Kind;
        //   519: astore          7
        //   521: iload_1        
        //   522: ifeq            539
        //   525: aload           6
        //   527: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   532: goto            545
        //   535: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   538: athrow         
        //   539: aload_0        
        //   540: aload           6
        //   542: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   545: iload_1        
        //   546: ifne            586
        //   549: aload_0        
        //   550: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myParseUntilOffset:I
        //   553: ifne            586
        //   556: goto            563
        //   559: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   562: athrow         
        //   563: aload_0        
        //   564: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myTypeKindsCache:Ljava/util/Map;
        //   567: lload_2        
        //   568: invokestatic    java/lang/Long.valueOf:(J)Ljava/lang/Long;
        //   571: aload           7
        //   573: invokeinterface java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        //   578: pop            
        //   579: goto            586
        //   582: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   585: athrow         
        //   586: aload           7
        //   588: areturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      25     28     32     Ljava/lang/IllegalArgumentException;
        //  9      49     49     53     Ljava/lang/IllegalArgumentException;
        //  59     75     78     82     Ljava/lang/IllegalArgumentException;
        //  67     84     84     88     Ljava/lang/IllegalArgumentException;
        //  88     101    101    105    Ljava/lang/IllegalArgumentException;
        //  116    130    130    134    Ljava/lang/IllegalArgumentException;
        //  140    152    155    159    Ljava/lang/IllegalArgumentException;
        //  159    181    184    188    Ljava/lang/IllegalArgumentException;
        //  169    192    195    199    Ljava/lang/IllegalArgumentException;
        //  227    244    247    251    Ljava/lang/IllegalArgumentException;
        //  234    261    264    268    Ljava/lang/IllegalArgumentException;
        //  251    278    281    285    Ljava/lang/IllegalArgumentException;
        //  298    345    348    352    Ljava/lang/IllegalArgumentException;
        //  316    364    367    371    Ljava/lang/IllegalArgumentException;
        //  352    375    378    382    Ljava/lang/IllegalArgumentException;
        //  382    406    409    413    Ljava/lang/IllegalArgumentException;
        //  392    420    423    427    Ljava/lang/IllegalArgumentException;
        //  413    437    440    444    Ljava/lang/IllegalArgumentException;
        //  498    509    509    513    Ljava/lang/IllegalArgumentException;
        //  521    535    535    539    Ljava/lang/IllegalArgumentException;
        //  545    556    559    563    Ljava/lang/IllegalArgumentException;
        //  549    579    582    586    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0251:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @Nullable
    private IElementType B() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //     4: astore_1       
        //     5: aload_0        
        //     6: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsCppSupport:Z
        //     9: ifeq            43
        //    12: aload_1        
        //    13: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    16: if_acmpne       43
        //    19: goto            26
        //    22: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    25: athrow         
        //    26: aload_0        
        //    27: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a4:()Lcom/intellij/psi/tree/IElementType;
        //    30: instanceof      Lcom/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType;
        //    33: ifeq            49
        //    36: goto            43
        //    39: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    42: athrow         
        //    43: aload_1        
        //    44: areturn        
        //    45: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    48: athrow         
        //    49: aload_0        
        //    50: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //    53: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //    58: invokestatic    com/jetbrains/cidr/lang/parser/OCPunctuatorElementType.findByKeyword:(Ljava/lang/String;)Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //    61: astore_2       
        //    62: aload_2        
        //    63: ifnonnull       72
        //    66: aload_1        
        //    67: areturn        
        //    68: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    71: athrow         
        //    72: aload_0        
        //    73: aload_2        
        //    74: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;)V
        //    77: aload_2        
        //    78: areturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      19     22     26     Ljava/lang/IllegalArgumentException;
        //  12     36     39     43     Ljava/lang/IllegalArgumentException;
        //  26     45     45     49     Ljava/lang/IllegalArgumentException;
        //  62     68     68     72     Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0026:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @Nullable
    private IElementType a4() {
        try {
            if (this.myTemplateGTGT) {
                return OCTokenTypes.GT;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        IElementType unwrappedTokeType;
        while (true) {
            unwrappedTokeType = OCElementUtil.getUnwrappedTokeType(this.myBuilder.getTokenType());
            try {
                if (OCTokenTypes.WHITE_SPACE_OR_COMMENT_BIT_SET.contains(unwrappedTokeType)) {
                    this.myBuilder.advanceLexer();
                    continue;
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
            break;
        }
        return unwrappedTokeType;
    }
    
    private void aY() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: invokestatic    com/intellij/openapi/progress/ProgressManager.checkCanceled:()V
        //     3: aload_0        
        //     4: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:()Lcom/intellij/psi/tree/IElementType;
        //     7: astore_1       
        //     8: aload_0        
        //     9: aload_1        
        //    10: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.e:(Lcom/intellij/psi/tree/IElementType;)Lcom/intellij/psi/tree/IElementType;
        //    13: astore_2       
        //    14: aload_0        
        //    15: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    18: astore_3       
        //    19: aload_0        
        //    20: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.U:()V
        //    23: aload_0        
        //    24: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsObjCSupport:Z
        //    27: ifeq            276
        //    30: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.AT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    33: aload_1        
        //    34: if_acmpne       276
        //    37: goto            44
        //    40: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    43: athrow         
        //    44: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.KEYWORDS_WITH_DOGS:Lcom/intellij/psi/tree/TokenSet;
        //    47: aload_2        
        //    48: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    51: ifne            75
        //    54: goto            61
        //    57: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    60: athrow         
        //    61: aload_2        
        //    62: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.OBJC_CLASS_KEYWORD:Lcom/intellij/psi/tree/IElementType;
        //    65: if_acmpne       83
        //    68: goto            75
        //    71: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    74: athrow         
        //    75: iconst_1       
        //    76: goto            84
        //    79: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    82: athrow         
        //    83: iconst_0       
        //    84: dup            
        //    85: istore          4
        //    87: ifne            104
        //    90: aload_2        
        //    91: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.OBJC_ERROR_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    94: if_acmpne       276
        //    97: goto            104
        //   100: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   103: athrow         
        //   104: iload           4
        //   106: ifne            129
        //   109: goto            116
        //   112: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   115: athrow         
        //   116: aload_0        
        //   117: ldc             "Illegal Objective-C keyword"
        //   119: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   122: goto            129
        //   125: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   128: athrow         
        //   129: iconst_1       
        //   130: istore          5
        //   132: aload_2        
        //   133: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.OBJC_ERROR_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   136: if_acmpne       224
        //   139: aload_0        
        //   140: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   143: astore          6
        //   145: iconst_0       
        //   146: istore          7
        //   148: iconst_0       
        //   149: istore          7
        //   151: iload           7
        //   153: iconst_3       
        //   154: if_icmpge       188
        //   157: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   160: aload_0        
        //   161: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:()Lcom/intellij/psi/tree/IElementType;
        //   164: if_acmpne       188
        //   167: goto            174
        //   170: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   173: athrow         
        //   174: aload_0        
        //   175: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.U:()V
        //   178: iinc            7, 1
        //   181: goto            151
        //   184: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   187: athrow         
        //   188: aload_0        
        //   189: aload           6
        //   191: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   194: iload           7
        //   196: iconst_1       
        //   197: if_icmpeq       213
        //   200: iload           7
        //   202: iconst_3       
        //   203: if_icmpne       221
        //   206: goto            213
        //   209: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   212: athrow         
        //   213: iconst_1       
        //   214: goto            222
        //   217: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   220: athrow         
        //   221: iconst_0       
        //   222: istore          5
        //   224: iload           5
        //   226: ifeq            245
        //   229: aload_0        
        //   230: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.k:()Lcom/intellij/psi/tree/IElementType;
        //   233: pop            
        //   234: aload_0        
        //   235: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.U:()V
        //   238: goto            245
        //   241: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   244: athrow         
        //   245: aload_0        
        //   246: aconst_null    
        //   247: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastMacro:Lcom/intellij/lang/PsiBuilder$Marker;
        //   250: aload_0        
        //   251: aload_3        
        //   252: iload           4
        //   254: ifeq            267
        //   257: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.OBJC_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   260: goto            270
        //   263: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   266: athrow         
        //   267: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.OBJC_ERROR_KEYWORD:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   270: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   273: goto            287
        //   276: aload_0        
        //   277: aconst_null    
        //   278: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastMacro:Lcom/intellij/lang/PsiBuilder$Marker;
        //   281: aload_3        
        //   282: invokeinterface com/intellij/lang/PsiBuilder$Marker.drop:()V
        //   287: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  19     37     40     44     Ljava/lang/IllegalArgumentException;
        //  30     54     57     61     Ljava/lang/IllegalArgumentException;
        //  44     68     71     75     Ljava/lang/IllegalArgumentException;
        //  61     79     79     83     Ljava/lang/IllegalArgumentException;
        //  87     97     100    104    Ljava/lang/IllegalArgumentException;
        //  90     109    112    116    Ljava/lang/IllegalArgumentException;
        //  104    122    125    129    Ljava/lang/IllegalArgumentException;
        //  151    167    170    174    Ljava/lang/IllegalArgumentException;
        //  157    184    184    188    Ljava/lang/IllegalArgumentException;
        //  188    206    209    213    Ljava/lang/IllegalArgumentException;
        //  200    217    217    221    Ljava/lang/IllegalArgumentException;
        //  224    238    241    245    Ljava/lang/IllegalArgumentException;
        //  245    263    263    267    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0044:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void U() {
        try {
            if (this.myTemplateGTGT) {
                this.myTemplateGTGT = false;
                return;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        this.myBuilder.advanceLexer();
    }
    
    @Nullable
    private OCMacroReferenceTokenType ay() {
        final IElementType unwrappedTokeType = OCElementUtil.getUnwrappedTokeType(this.a4());
        try {
            if (unwrappedTokeType instanceof OCMacroReferenceTokenType) {
                return (OCMacroReferenceTokenType)unwrappedTokeType;
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        return null;
    }
    
    private boolean aQ() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ay:()Lcom/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType;
        //     4: astore_1       
        //     5: aload_1        
        //     6: ifnonnull       15
        //     9: iconst_0       
        //    10: ireturn        
        //    11: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    14: athrow         
        //    15: aload_1        
        //    16: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType.getDelegate:()Lcom/intellij/psi/tree/IElementType;
        //    19: astore_2       
        //    20: aload_2        
        //    21: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    24: if_acmpeq       44
        //    27: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //    30: aload_2        
        //    31: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    34: ifeq            58
        //    37: goto            44
        //    40: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    43: athrow         
        //    44: aload_1        
        //    45: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType.isRoot:()Z
        //    48: ifne            64
        //    51: goto            58
        //    54: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    57: athrow         
        //    58: iconst_0       
        //    59: ireturn        
        //    60: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    63: athrow         
        //    64: aload_0        
        //    65: iconst_1       
        //    66: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myDisableErrors:Z
        //    69: aload_1        
        //    70: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType.getMacroLevel:()I
        //    73: istore_3       
        //    74: aload_0        
        //    75: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    78: astore          4
        //    80: aload_0        
        //    81: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    84: astore          5
        //    86: aload_0        
        //    87: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.U:()V
        //    90: aload           5
        //    92: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.MACRO_REF:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    95: invokeinterface com/intellij/lang/PsiBuilder$Marker.done:(Lcom/intellij/psi/tree/IElementType;)V
        //   100: aload_0        
        //   101: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ay:()Lcom/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType;
        //   104: astore_1       
        //   105: aconst_null    
        //   106: astore          6
        //   108: aload_1        
        //   109: ifnull          435
        //   112: aload_1        
        //   113: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType.getMacroLevel:()I
        //   116: iload_3        
        //   117: if_icmplt       435
        //   120: goto            127
        //   123: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   126: athrow         
        //   127: aload_1        
        //   128: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType.isRoot:()Z
        //   131: ifeq            148
        //   134: goto            141
        //   137: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   140: athrow         
        //   141: goto            435
        //   144: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   147: athrow         
        //   148: aload_1        
        //   149: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType.isParamToken:()Z
        //   152: ifeq            318
        //   155: aload           6
        //   157: ifnonnull       318
        //   160: goto            167
        //   163: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   166: athrow         
        //   167: aload_0        
        //   168: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   171: astore          6
        //   173: aload_0        
        //   174: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   177: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //   182: istore          7
        //   184: iconst_0       
        //   185: istore          8
        //   187: aload_0        
        //   188: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.az:()Z
        //   191: ifeq            232
        //   194: aload_0        
        //   195: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   198: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //   203: iload           7
        //   205: if_icmple       232
        //   208: goto            215
        //   211: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   214: athrow         
        //   215: aload_0        
        //   216: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   219: invokeinterface com/intellij/lang/PsiBuilder.getCurrentOffset:()I
        //   224: istore          7
        //   226: iconst_1       
        //   227: istore          8
        //   229: goto            187
        //   232: iload           8
        //   234: ifne            286
        //   237: aload_0        
        //   238: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aK:()Z
        //   241: ifeq            271
        //   244: goto            251
        //   247: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   250: athrow         
        //   251: aload_0        
        //   252: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext.PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;
        //   255: getstatic       com/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation.ANY:Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;
        //   258: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/jetbrains/cidr/lang/parser/OCParsing$DeclarationContext;Lcom/jetbrains/cidr/lang/parser/OCParsing$TypeParsingExpectation;)Z
        //   261: ifne            286
        //   264: goto            271
        //   267: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   270: athrow         
        //   271: aload_0        
        //   272: iconst_0       
        //   273: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.d:(Z)Z
        //   276: ifeq            303
        //   279: goto            286
        //   282: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   285: athrow         
        //   286: aload_0        
        //   287: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ay:()Lcom/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType;
        //   290: astore          9
        //   292: aload           9
        //   294: ifnull          303
        //   297: aload           9
        //   299: astore_1       
        //   300: goto            108
        //   303: aload_0        
        //   304: aload           6
        //   306: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.i:(Lcom/intellij/lang/PsiBuilder$Marker;)V
        //   309: aload_0        
        //   310: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   313: astore          6
        //   315: goto            390
        //   318: aload_1        
        //   319: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType.isParamToken:()Z
        //   322: ifne            390
        //   325: aload_1        
        //   326: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType.getDelegate:()Lcom/intellij/psi/tree/IElementType;
        //   329: astore          7
        //   331: aload           7
        //   333: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   336: if_acmpeq       354
        //   339: aload           7
        //   341: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   344: if_acmpne       372
        //   347: goto            354
        //   350: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   353: athrow         
        //   354: aload           6
        //   356: ifnonnull       372
        //   359: goto            366
        //   362: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   365: athrow         
        //   366: aload_0        
        //   367: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   370: astore          6
        //   372: aload           6
        //   374: ifnull          390
        //   377: aload           6
        //   379: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.MACRO_ARGUMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   382: invokeinterface com/intellij/lang/PsiBuilder$Marker.done:(Lcom/intellij/psi/tree/IElementType;)V
        //   387: aconst_null    
        //   388: astore          6
        //   390: aload_1        
        //   391: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType.getMacroLevel:()I
        //   394: iload_3        
        //   395: if_icmple       423
        //   398: aload_0        
        //   399: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a0:()Z
        //   402: ifne            427
        //   405: goto            412
        //   408: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   411: athrow         
        //   412: aload_0        
        //   413: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.U:()V
        //   416: goto            427
        //   419: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   422: athrow         
        //   423: aload_0        
        //   424: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.U:()V
        //   427: aload_0        
        //   428: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.ay:()Lcom/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType;
        //   431: astore_1       
        //   432: goto            108
        //   435: aload           6
        //   437: ifnull          457
        //   440: aload           6
        //   442: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.MACRO_ARGUMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   445: invokeinterface com/intellij/lang/PsiBuilder$Marker.done:(Lcom/intellij/psi/tree/IElementType;)V
        //   450: goto            457
        //   453: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   456: athrow         
        //   457: aload_1        
        //   458: ifnonnull       514
        //   461: aload_0        
        //   462: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a4:()Lcom/intellij/psi/tree/IElementType;
        //   465: astore          7
        //   467: aload           7
        //   469: instanceof      Lcom/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType;
        //   472: ifeq            514
        //   475: aload           7
        //   477: checkcast       Lcom/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType;
        //   480: invokevirtual   com/jetbrains/cidr/lang/preprocessor/OCMacroReferenceTokenType.getMacroLevel:()I
        //   483: iload_3        
        //   484: if_icmpeq       501
        //   487: goto            494
        //   490: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   493: athrow         
        //   494: goto            514
        //   497: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   500: athrow         
        //   501: aload_0        
        //   502: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.U:()V
        //   505: aload_0        
        //   506: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a4:()Lcom/intellij/psi/tree/IElementType;
        //   509: astore          7
        //   511: goto            467
        //   514: aload           4
        //   516: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.MACRO_CALL:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   519: invokeinterface com/intellij/lang/PsiBuilder$Marker.done:(Lcom/intellij/psi/tree/IElementType;)V
        //   524: aload_0        
        //   525: aload           4
        //   527: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastMacro:Lcom/intellij/lang/PsiBuilder$Marker;
        //   530: aload_0        
        //   531: iconst_0       
        //   532: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myDisableErrors:Z
        //   535: iconst_1       
        //   536: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  5      11     11     15     Ljava/lang/IllegalArgumentException;
        //  20     37     40     44     Ljava/lang/IllegalArgumentException;
        //  27     51     54     58     Ljava/lang/IllegalArgumentException;
        //  44     60     60     64     Ljava/lang/IllegalArgumentException;
        //  108    120    123    127    Ljava/lang/IllegalArgumentException;
        //  112    134    137    141    Ljava/lang/IllegalArgumentException;
        //  127    144    144    148    Ljava/lang/IllegalArgumentException;
        //  148    160    163    167    Ljava/lang/IllegalArgumentException;
        //  187    208    211    215    Ljava/lang/IllegalArgumentException;
        //  232    244    247    251    Ljava/lang/IllegalArgumentException;
        //  237    264    267    271    Ljava/lang/IllegalArgumentException;
        //  251    279    282    286    Ljava/lang/IllegalArgumentException;
        //  331    347    350    354    Ljava/lang/IllegalArgumentException;
        //  339    359    362    366    Ljava/lang/IllegalArgumentException;
        //  390    405    408    412    Ljava/lang/IllegalArgumentException;
        //  398    419    419    423    Ljava/lang/IllegalArgumentException;
        //  435    450    453    457    Ljava/lang/IllegalArgumentException;
        //  467    487    490    494    Ljava/lang/IllegalArgumentException;
        //  475    497    497    501    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0044:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private boolean a0() {
        PsiBuilder.Marker myLastMacro = null;
        try {
            while (this.aQ()) {
                final OCMacroReferenceTokenType ay = this.ay();
                if (myLastMacro == null) {
                    myLastMacro = this.myLastMacro;
                }
                try {
                    if (ay != null) {
                        if (ay.isRoot()) {
                            continue;
                        }
                    }
                }
                catch (IllegalArgumentException ex) {
                    throw a(ex);
                }
                Label_0041: {
                    break Label_0041;
                    continue;
                }
                return true;
            }
            return false;
        }
        finally {
            try {
                if (myLastMacro != null) {
                    this.myLastMacro = myLastMacro;
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
    }
    
    private void aA() {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: iconst_1       
        //     2: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideDirective:Z
        //     5: aload_0        
        //     6: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastMacro:Lcom/intellij/lang/PsiBuilder$Marker;
        //     9: astore_1       
        //    10: aload_0        
        //    11: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a4:()Lcom/intellij/psi/tree/IElementType;
        //    14: astore_2       
        //    15: getstatic       com/jetbrains/cidr/lang/parser/OCParsing.$assertionsDisabled:Z
        //    18: ifne            50
        //    21: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DIRECTIVES:Lcom/intellij/psi/tree/TokenSet;
        //    24: aload_2        
        //    25: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //    28: ifne            50
        //    31: goto            38
        //    34: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    37: athrow         
        //    38: new             Ljava/lang/AssertionError;
        //    41: dup            
        //    42: invokespecial   java/lang/AssertionError.<init>:()V
        //    45: athrow         
        //    46: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    49: athrow         
        //    50: aload_0        
        //    51: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //    54: astore_3       
        //    55: aload_0        
        //    56: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.U:()V
        //    59: aload_2        
        //    60: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IFDEF_DIRECTIVE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    63: if_acmpeq       80
        //    66: aload_2        
        //    67: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IFNDEF_DIRECTIVE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    70: if_acmpne       202
        //    73: goto            80
        //    76: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    79: athrow         
        //    80: aload_0        
        //    81: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //    84: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //    87: if_acmpeq       130
        //    90: goto            97
        //    93: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    96: athrow         
        //    97: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.KEYWORDS:Lcom/intellij/psi/tree/TokenSet;
        //   100: aload_0        
        //   101: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   104: invokevirtual   com/intellij/psi/tree/TokenSet.contains:(Lcom/intellij/psi/tree/IElementType;)Z
        //   107: ifne            130
        //   110: goto            117
        //   113: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   116: athrow         
        //   117: aload_0        
        //   118: ldc             "Expecting macro name"
        //   120: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   123: goto            186
        //   126: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   129: athrow         
        //   130: aload_0        
        //   131: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   134: astore          4
        //   136: aload_0        
        //   137: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   140: aload_0        
        //   141: aload           4
        //   143: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.REFERENCE_ELEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   146: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   149: aload_0        
        //   150: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.F:()Z
        //   153: ifne            186
        //   156: aload_0        
        //   157: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   160: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.isEndOfDirective:(Lcom/intellij/psi/tree/IElementType;)Z
        //   163: ifne            186
        //   166: goto            173
        //   169: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   172: athrow         
        //   173: aload_0        
        //   174: ldc             "Unexpected token"
        //   176: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   179: goto            186
        //   182: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   185: athrow         
        //   186: aload_0        
        //   187: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.I:()V
        //   190: aload_3        
        //   191: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DIRECTIVE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   194: invokeinterface com/intellij/lang/PsiBuilder$Marker.done:(Lcom/intellij/psi/tree/IElementType;)V
        //   199: goto            807
        //   202: aload_2        
        //   203: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IF_DIRECTIVE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   206: if_acmpeq       223
        //   209: aload_2        
        //   210: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELIF_DIRECTIVE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   213: if_acmpne       259
        //   216: goto            223
        //   219: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   222: athrow         
        //   223: aload_0        
        //   224: iconst_1       
        //   225: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myParsingInsideMacro:Z
        //   228: aload_0        
        //   229: iconst_0       
        //   230: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.n:(Z)Z
        //   233: pop            
        //   234: aload_0        
        //   235: iconst_0       
        //   236: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myParsingInsideMacro:Z
        //   239: aload_0        
        //   240: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.I:()V
        //   243: aload_3        
        //   244: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DIRECTIVE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   247: invokeinterface com/intellij/lang/PsiBuilder$Marker.done:(Lcom/intellij/psi/tree/IElementType;)V
        //   252: goto            807
        //   255: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   258: athrow         
        //   259: aload_2        
        //   260: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.UNDEF_DIRECTIVE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   263: if_acmpne       323
        //   266: aload_0        
        //   267: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   270: invokeinterface com/intellij/lang/PsiBuilder.getTokenType:()Lcom/intellij/psi/tree/IElementType;
        //   275: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   278: if_acmpne       307
        //   281: goto            288
        //   284: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   287: athrow         
        //   288: aload_0        
        //   289: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   292: astore          4
        //   294: aload_0        
        //   295: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   298: aload_0        
        //   299: aload           4
        //   301: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.MACRO_REF:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   304: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   307: aload_0        
        //   308: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.I:()V
        //   311: aload_3        
        //   312: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.MACRO_UNDEFINITION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   315: invokeinterface com/intellij/lang/PsiBuilder$Marker.done:(Lcom/intellij/psi/tree/IElementType;)V
        //   320: goto            807
        //   323: aload_2        
        //   324: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DEFINE_DIRECTIVE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   327: if_acmpne       722
        //   330: aload_0        
        //   331: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   334: invokeinterface com/intellij/lang/PsiBuilder.getTokenType:()Lcom/intellij/psi/tree/IElementType;
        //   339: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   342: if_acmpeq       363
        //   345: goto            352
        //   348: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   351: athrow         
        //   352: aload_0        
        //   353: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.I:()V
        //   356: goto            710
        //   359: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   362: athrow         
        //   363: new             Ljava/util/ArrayList;
        //   366: dup            
        //   367: invokespecial   java/util/ArrayList.<init>:()V
        //   370: astore          4
        //   372: aload_0        
        //   373: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.U:()V
        //   376: aload_0        
        //   377: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   380: iconst_0       
        //   381: invokeinterface com/intellij/lang/PsiBuilder.rawLookup:(I)Lcom/intellij/psi/tree/IElementType;
        //   386: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.LPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   389: if_acmpne       610
        //   392: aload_0        
        //   393: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   396: astore          5
        //   398: aload_0        
        //   399: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   402: aload_0        
        //   403: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.F:()Z
        //   406: ifne            591
        //   409: aload_0        
        //   410: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   413: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   416: if_acmpeq       591
        //   419: goto            426
        //   422: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   425: athrow         
        //   426: aload_0        
        //   427: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   430: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELLIPSIS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   433: if_acmpne       454
        //   436: goto            443
        //   439: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   442: athrow         
        //   443: aload_0        
        //   444: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   447: goto            551
        //   450: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   453: athrow         
        //   454: aload_0        
        //   455: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   458: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   461: if_acmpne       524
        //   464: aload_0        
        //   465: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   468: astore          6
        //   470: aload           4
        //   472: aload_0        
        //   473: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   476: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   481: invokeinterface java/util/List.add:(Ljava/lang/Object;)Z
        //   486: pop            
        //   487: aload_0        
        //   488: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   491: aload_0        
        //   492: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   495: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.ELLIPSIS:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   498: if_acmpne       512
        //   501: aload_0        
        //   502: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   505: goto            512
        //   508: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   511: athrow         
        //   512: aload_0        
        //   513: aload           6
        //   515: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.MACRO_PARAMETER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   518: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   521: goto            551
        //   524: aload_0        
        //   525: ldc             "Expecting macro parameter"
        //   527: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   530: aload_0        
        //   531: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   534: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   537: if_acmpeq       551
        //   540: aload_0        
        //   541: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   544: goto            551
        //   547: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   550: athrow         
        //   551: aload_0        
        //   552: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   555: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.COMMA:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   558: if_acmpne       572
        //   561: aload_0        
        //   562: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   565: goto            402
        //   568: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   571: athrow         
        //   572: aload_0        
        //   573: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   576: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   579: if_acmpeq       402
        //   582: aload_0        
        //   583: ldc             "',' or ')' expected"
        //   585: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/String;)V
        //   588: goto            591
        //   591: aload_0        
        //   592: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.RPAR:Lcom/jetbrains/cidr/lang/parser/OCPunctuatorElementType;
        //   595: ldc             "')' missing"
        //   597: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a:(Lcom/intellij/psi/tree/IElementType;Ljava/lang/String;)Z
        //   600: pop            
        //   601: aload_0        
        //   602: aload           5
        //   604: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.MACRO_PARAMETER_LIST:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   607: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   610: aload_0        
        //   611: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.F:()Z
        //   614: ifne            706
        //   617: aload_0        
        //   618: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   621: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.isEndOfDirective:(Lcom/intellij/psi/tree/IElementType;)Z
        //   624: ifne            706
        //   627: goto            634
        //   630: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   633: athrow         
        //   634: aload_0        
        //   635: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aF:()Lcom/intellij/psi/tree/IElementType;
        //   638: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IDENTIFIER:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   641: if_acmpne       699
        //   644: goto            651
        //   647: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   650: athrow         
        //   651: aload           4
        //   653: aload_0        
        //   654: getfield        com/jetbrains/cidr/lang/parser/OCParsing.myBuilder:Lcom/intellij/lang/PsiBuilder;
        //   657: invokeinterface com/intellij/lang/PsiBuilder.getTokenText:()Ljava/lang/String;
        //   662: invokeinterface java/util/List.contains:(Ljava/lang/Object;)Z
        //   667: ifeq            699
        //   670: goto            677
        //   673: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   676: athrow         
        //   677: aload_0        
        //   678: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.a7:()Lcom/intellij/lang/PsiBuilder$Marker;
        //   681: astore          5
        //   683: aload_0        
        //   684: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   687: aload_0        
        //   688: aload           5
        //   690: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.REFERENCE_ELEMENT:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   693: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.b:(Lcom/intellij/lang/PsiBuilder$Marker;Lcom/intellij/psi/tree/IElementType;)V
        //   696: goto            610
        //   699: aload_0        
        //   700: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   703: goto            610
        //   706: aload_0        
        //   707: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.aY:()V
        //   710: aload_3        
        //   711: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.MACRO_DEFINITION:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   714: invokeinterface com/intellij/lang/PsiBuilder$Marker.done:(Lcom/intellij/psi/tree/IElementType;)V
        //   719: goto            807
        //   722: aload_2        
        //   723: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.INCLUDE_DIRECTIVE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   726: if_acmpeq       757
        //   729: aload_2        
        //   730: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.IMPORT_DIRECTIVE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   733: if_acmpeq       757
        //   736: goto            743
        //   739: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   742: athrow         
        //   743: aload_2        
        //   744: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.INCLUDE_NEXT_DIRECTIVE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   747: if_acmpne       777
        //   750: goto            757
        //   753: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   756: athrow         
        //   757: aload_0        
        //   758: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.I:()V
        //   761: aload_3        
        //   762: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.IMPORT_DIRECTIVE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   765: invokeinterface com/intellij/lang/PsiBuilder$Marker.done:(Lcom/intellij/psi/tree/IElementType;)V
        //   770: goto            807
        //   773: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   776: athrow         
        //   777: aload_0        
        //   778: invokespecial   com/jetbrains/cidr/lang/parser/OCParsing.I:()V
        //   781: aload_3        
        //   782: aload_2        
        //   783: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.PRAGMA_DIRECTIVE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   786: if_acmpne       799
        //   789: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.PRAGMA:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   792: goto            802
        //   795: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   798: athrow         
        //   799: getstatic       com/jetbrains/cidr/lang/parser/OCElementTypes.DIRECTIVE:Lcom/jetbrains/cidr/lang/parser/OCElementType;
        //   802: invokeinterface com/intellij/lang/PsiBuilder$Marker.done:(Lcom/intellij/psi/tree/IElementType;)V
        //   807: aload_0        
        //   808: iconst_0       
        //   809: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myIsInsideDirective:Z
        //   812: aload_0        
        //   813: aload_1        
        //   814: ifnonnull       825
        //   817: aload_3        
        //   818: goto            826
        //   821: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //   824: athrow         
        //   825: aload_1        
        //   826: putfield        com/jetbrains/cidr/lang/parser/OCParsing.myLastMacro:Lcom/intellij/lang/PsiBuilder$Marker;
        //   829: return         
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  15     31     34     38     Ljava/lang/IllegalArgumentException;
        //  21     46     46     50     Ljava/lang/IllegalArgumentException;
        //  55     73     76     80     Ljava/lang/IllegalArgumentException;
        //  66     90     93     97     Ljava/lang/IllegalArgumentException;
        //  80     110    113    117    Ljava/lang/IllegalArgumentException;
        //  97     126    126    130    Ljava/lang/IllegalArgumentException;
        //  136    166    169    173    Ljava/lang/IllegalArgumentException;
        //  156    179    182    186    Ljava/lang/IllegalArgumentException;
        //  202    216    219    223    Ljava/lang/IllegalArgumentException;
        //  209    255    255    259    Ljava/lang/IllegalArgumentException;
        //  259    281    284    288    Ljava/lang/IllegalArgumentException;
        //  323    345    348    352    Ljava/lang/IllegalArgumentException;
        //  330    359    359    363    Ljava/lang/IllegalArgumentException;
        //  402    419    422    426    Ljava/lang/IllegalArgumentException;
        //  409    436    439    443    Ljava/lang/IllegalArgumentException;
        //  426    450    450    454    Ljava/lang/IllegalArgumentException;
        //  470    505    508    512    Ljava/lang/IllegalArgumentException;
        //  524    544    547    551    Ljava/lang/IllegalArgumentException;
        //  551    568    568    572    Ljava/lang/IllegalArgumentException;
        //  610    627    630    634    Ljava/lang/IllegalArgumentException;
        //  617    644    647    651    Ljava/lang/IllegalArgumentException;
        //  634    670    673    677    Ljava/lang/IllegalArgumentException;
        //  722    736    739    743    Ljava/lang/IllegalArgumentException;
        //  729    750    753    757    Ljava/lang/IllegalArgumentException;
        //  743    773    773    777    Ljava/lang/IllegalArgumentException;
        //  777    795    795    799    Ljava/lang/IllegalArgumentException;
        //  807    821    821    825    Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0080:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void I() {
    Label_0035:
        while (true) {
            Label_0024: {
                try {
                    if (this.F()) {
                        break Label_0035;
                    }
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final boolean b = isEndOfDirective(elementType);
                    if (!b) {
                        break Label_0024;
                    }
                    break Label_0035;
                }
                catch (IllegalArgumentException ex) {
                    throw a(ex);
                }
                try {
                    final OCParsing ocParsing = this;
                    final IElementType elementType = ocParsing.aF();
                    final boolean b = isEndOfDirective(elementType);
                    if (!b) {
                        this.aY();
                        continue;
                    }
                }
                catch (IllegalArgumentException ex2) {
                    throw a(ex2);
                }
            }
            break;
        }
        this.aY();
    }
    
    @Contract(pure = true)
    public static boolean isEndOfDirective(final IElementType p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     0: aload_0        
        //     1: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.END_OF_DIRECTIVE_CONTENT:Lcom/intellij/psi/tree/IElementType;
        //     4: if_acmpeq       49
        //     7: aload_0        
        //     8: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.PRAGMA_DIRECTIVE_CONTENT:Lcom/intellij/psi/tree/IElementType;
        //    11: if_acmpeq       49
        //    14: goto            21
        //    17: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    20: athrow         
        //    21: aload_0        
        //    22: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.INCLUDE_DIRECTIVE_CONTENT:Lcom/intellij/psi/tree/IElementType;
        //    25: if_acmpeq       49
        //    28: goto            35
        //    31: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    34: athrow         
        //    35: aload_0        
        //    36: getstatic       com/jetbrains/cidr/lang/parser/OCTokenTypes.DIRECTIVE_CONTENT:Lcom/intellij/psi/tree/IElementType;
        //    39: if_acmpne       57
        //    42: goto            49
        //    45: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    48: athrow         
        //    49: iconst_1       
        //    50: goto            58
        //    53: invokestatic    com/jetbrains/cidr/lang/parser/OCParsing.a:(Ljava/lang/IllegalArgumentException;)Ljava/lang/IllegalArgumentException;
        //    56: athrow         
        //    57: iconst_0       
        //    58: ireturn        
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                                
        //  -----  -----  -----  -----  ------------------------------------
        //  0      14     17     21     Ljava/lang/IllegalArgumentException;
        //  7      28     31     35     Ljava/lang/IllegalArgumentException;
        //  21     42     45     49     Ljava/lang/IllegalArgumentException;
        //  35     53     53     57     Ljava/lang/IllegalArgumentException;
        // 
        // The error that occurred was:
        // 
        // java.lang.IllegalStateException: Expression is linked from several locations: Label_0021:
        //     at com.strobel.decompiler.ast.Error.expressionLinkedFromMultipleLocations(Error.java:27)
        //     at com.strobel.decompiler.ast.AstOptimizer.mergeDisparateObjectInitializations(AstOptimizer.java:2592)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:235)
        //     at com.strobel.decompiler.ast.AstOptimizer.optimize(AstOptimizer.java:42)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:214)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:757)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:655)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:532)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:499)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:141)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:130)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:105)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:317)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:141)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    @NotNull
    public OCParsingNameScope getLocalNameScope() {
        OCParsingNameScope myLocalNameScope;
        try {
            myLocalNameScope = this.myLocalNameScope;
            if (myLocalNameScope == null) {
                throw new IllegalStateException(String.format("@NotNull method %s.%s must not return null", "com/jetbrains/cidr/lang/parser/OCParsing", "getLocalNameScope"));
            }
        }
        catch (IllegalArgumentException ex) {
            throw a(ex);
        }
        return myLocalNameScope;
    }
    
    public boolean isSkippingWithoutParsing() {
        return this.mySkippingWithoutParsing;
    }
    
    @Contract("null->false")
    public static boolean isEOFError(@Nullable final Object o) {
        Label_0028: {
            try {
                if (!(o instanceof PsiErrorElement)) {
                    return false;
                }
                final Object o2 = o;
                final PsiErrorElement psiErrorElement = (PsiErrorElement)o2;
                final String s = psiErrorElement.getErrorDescription();
                final String s2 = "Unexpected end of file";
                if (s == s2) {
                    break Label_0028;
                }
                return false;
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            try {
                final Object o2 = o;
                final PsiErrorElement psiErrorElement = (PsiErrorElement)o2;
                final String s = psiErrorElement.getErrorDescription();
                final String s2 = "Unexpected end of file";
                if (s == s2) {
                    return true;
                }
            }
            catch (IllegalArgumentException ex2) {
                throw a(ex2);
            }
        }
        return false;
    }
    
    static {
        boolean $assertionsDisabled2 = false;
        Label_0017: {
            try {
                if (!OCParsing.class.desiredAssertionStatus()) {
                    $assertionsDisabled2 = true;
                    break Label_0017;
                }
            }
            catch (IllegalArgumentException ex) {
                throw a(ex);
            }
            $assertionsDisabled2 = false;
        }
        $assertionsDisabled = $assertionsDisabled2;
        LOG = Logger.getInstance("#com.jetbrains.cidr.lang.parser.OCParsing");
        OBJC_CLASS_KEYWORD = new OCElementType("@class");
        DUMB_ELEMENT_TYPE = new IElementType("DUMB WRAPPER", (Language)OCLanguage.getInstance());
        OCParsing.COMMENTS_BINDABLE_SET = TokenSet.orSet(new TokenSet[] { OCElementTypes.STRUCTURE_TYPES, OCElementTypes.CLASSES, TokenSet.create(new IElementType[] { OCElementTypes.DECLARATION, OCElementTypes.METHOD, OCElementTypes.FUNCTION_DEFINITION, OCElementTypes.FUNCTION_DECLARATION, OCElementTypes.PROPERTY, OCElementTypes.CLASS_PREDEF_LIST }) });
        OCParsing.USING_OR_NAMESPACE = TokenSet.create(new IElementType[] { OCTokenTypes.USING_CPP_KEYWORD, OCTokenTypes.NAMESPACE_CPP_KEYWORD });
        OCParsing.TEMPLATE_PARAMETER_SPECIFIERS = TokenSet.create(new IElementType[] { OCTokenTypes.TEMPLATE_CPP_KEYWORD, OCTokenTypes.TYPENAME_CPP_KEYWORD, OCTokenTypes.CLASS_KEYWORD });
        ourSemicolonSet = TokenSet.create(new IElementType[] { OCTokenTypes.SEMICOLON });
        ourSemicolonOrRparSet = TokenSet.create(new IElementType[] { OCTokenTypes.RPAR, OCTokenTypes.SEMICOLON });
        SPECIFIERS_FIRST = TokenSet.orSet(new TokenSet[] { OCTokenTypes.STORAGE_CLASS_SPECIFIERS, OCTokenTypes.TYPE_SPECIFIERS, OCTokenTypes.TYPE_QUALIFIERS, TokenSet.create(new IElementType[] { OCTokenTypes.INLINE_KEYWORD, OCTokenTypes.TYPEOF_KEYWORD, OCTokenTypes.DECLTYPE_CPP_KEYWORD, OCTokenTypes.UNDERLYING_TYPE_KEYWORD, OCTokenTypes.NORETURN_KEYWORD }) });
        SINGLE_TOKEN_SPECIFIER = TokenSet.orSet(new TokenSet[] { OCTokenTypes.SIMPLE_TYPE_SPECIFIERS, OCTokenTypes.TYPE_QUALIFIERS, OCTokenTypes.STORAGE_CLASS_SPECIFIERS, TokenSet.create(new IElementType[] { OCTokenTypes.INLINE_KEYWORD, OCTokenTypes.NORETURN_KEYWORD }) });
        BULLSHIT_TYPE_MODIFIERS = TokenSet.orSet(new TokenSet[] { OCTokenTypes.STORAGE_CLASS_SPECIFIERS, OCTokenTypes.TYPE_QUALIFIERS, TokenSet.create(new IElementType[] { OCTokenTypes.INLINE_KEYWORD, OCTokenTypes.NORETURN_KEYWORD, OCTokenTypes.FRIEND_CPP_KEYWORD, OCTokenTypes.VIRTUAL_CPP_KEYWORD, OCTokenTypes.EXPLICIT_CPP_KEYWORD, OCTokenTypes.MUTABLE_CPP_KEYWORD, OCTokenTypes.CONSTEXPR_CPP_KEYWORD }) });
        CPP_ACCESS_SPECIFIERS = TokenSet.create(new IElementType[] { OCTokenTypes.PUBLIC_KEYWORD, OCTokenTypes.PROTECTED_KEYWORD, OCTokenTypes.PRIVATE_KEYWORD });
        CPP_ONLY_SPECIFIERS_FIRST = TokenSet.create(new IElementType[] { OCTokenTypes.CLASS_KEYWORD, OCTokenTypes.BOOL_CPP_KEYWORD, OCTokenTypes.WCHAR_T_CPP_KEYWORD, OCTokenTypes.FRIEND_CPP_KEYWORD, OCTokenTypes.VIRTUAL_CPP_KEYWORD, OCTokenTypes.EXPLICIT_CPP_KEYWORD, OCTokenTypes.MUTABLE_CPP_KEYWORD, OCTokenTypes.TYPENAME_CPP_KEYWORD, OCTokenTypes.CONSTEXPR_CPP_KEYWORD });
        CPP_SPECIFIERS_FIRST = TokenSet.orSet(new TokenSet[] { OCParsing.SPECIFIERS_FIRST, OCParsing.CPP_ONLY_SPECIFIERS_FIRST });
        CPP_EXPRESSIONS_FIRST = TokenSet.orSet(new TokenSet[] { OCTokenTypes.CPP_UNARY_OPERATIONS, OCTokenTypes.CPP_CAST_OPERATIONS, TokenSet.create(new IElementType[] { OCTokenTypes.TRUE_CPP_KEYWORD, OCTokenTypes.FALSE_CPP_KEYWORD, OCTokenTypes.NULL_CPP_KEYWORD }) });
        AVAILABILITY_EXPRESSION_ALLOWED_TOKEN_TYPES = Collections.unmodifiableSet((Set<? extends IElementType>)ContainerUtil.set((Object[])new OCElementType[] { OCTokenTypes.IDENTIFIER, OCTokenTypes.VERSION_LITERAL, OCTokenTypes.COMMA, OCTokenTypes.MUL, OCTokenTypes.INTEGER_LITERAL, OCTokenTypes.FLOAT_KEYWORD, OCTokenTypes.WRONG_FLOAT_LITERAL }));
    }
    
    private static IllegalArgumentException a(final IllegalArgumentException ex) {
        return ex;
    }
    
    public enum BlockParsingMode
    {
        EAGER, 
        LAZY, 
        SKIP;
    }
    
    private enum MessagePassingContext
    {
        None, 
        InReiceiver, 
        InParameter;
    }
    
    private enum AngleBracketedExpressionType
    {
        GENERIC_PARAMETER_LIST, 
        GENERIC_ARGUMENT_LIST, 
        PROTOCOL_LIST, 
        UNKNOWN, 
        NOT_AN_ANGLE_BRACKETED_EXPRESSION;
    }
    
    private class ClassParsingScope
    {
        private boolean myHasGenericParametersForSure;
        private boolean myHasProtocolListForSure;
        private Set<String> myGenericParameterNames;
        
        private ClassParsingScope() {
            this.myHasGenericParametersForSure = false;
            this.myHasProtocolListForSure = false;
            this.myGenericParameterNames = (Set<String>)ContainerUtil.newHashSet();
        }
        
        public boolean parseClass() {
            final PsiBuilder.Marker access$300 = OCParsing.this.a7();
            OCParsing.this.aG();
            if (OCParsing.this.aF() == OCTokenTypes.EXTERN_KEYWORD) {
                OCParsing.this.aY();
                if (OCParsing.this.aF() == OCTokenTypes.STRING_LITERAL) {
                    OCParsing.this.aY();
                }
                OCParsing.this.aG();
            }
            final boolean b = OCParsing.this.aF() == OCTokenTypes.INTERFACE_KEYWORD;
            final boolean b2 = OCParsing.this.aF() == OCTokenTypes.IMPLEMENTATION_KEYWORD;
            final boolean b3 = OCParsing.this.aF() == OCTokenTypes.PROTOCOL_KEYWORD;
            if (!b && !b2 && !b3) {
                OCParsing.this.i(access$300);
                return false;
            }
            OCParsing.this.aY();
            OCParsing.this.a("class/category/protocol name expected", false, !b3, b3, false);
            if (b && OCParsing.this.detectAngleBracketedExpressionType() == AngleBracketedExpressionType.GENERIC_PARAMETER_LIST) {
                this.a(null);
            }
            PsiBuilder.Marker marker = OCParsing.this.a7();
            if (b3 && (OCParsing.this.aF() == OCTokenTypes.COMMA || OCParsing.this.aF() == OCTokenTypes.SEMICOLON)) {
                OCParsing.this.i(access$300);
                this.a();
                return true;
            }
            boolean b4 = !this.myHasGenericParametersForSure;
            if (OCParsing.this.aF() == OCTokenTypes.LPAR) {
                final PsiBuilder.Marker access$301 = OCParsing.this.a7();
                OCParsing.this.aY();
                if (OCParsing.this.aF() == OCTokenTypes.IDENTIFIER) {
                    OCParsing.this.aY();
                }
                OCParsing.this.a(OCTokenTypes.RPAR, "')' expected");
                access$301.done((IElementType)OCElementTypes.CATEGORY_NAME);
                marker.drop();
                marker = OCParsing.this.a7();
                b4 = false;
            }
            final Ref ref = new Ref();
            PsiBuilder.Marker marker2 = this.b(marker);
            do {
                marker2 = this.a(marker2, (Ref<Boolean>)ref);
            } while (ref.get() == Boolean.TRUE);
            if (b4 && b && ref.get() == Boolean.FALSE) {
                marker2 = this.a(marker2);
            }
            OCParsing.this.g(marker2).drop();
            while (!OCParsing.this.F() && OCParsing.this.aF() != OCTokenTypes.END_KEYWORD && (!OCTokenTypes.OBJC_CLASS_KEYWORDS.contains(OCParsing.this.aF()) || OCParsing.this.aF() == OCParsing.OBJC_CLASS_KEYWORD)) {
                if (OCParsing.this.aF() == OCTokenTypes.OPTIONAL_KEYWORD || OCParsing.this.aF() == OCTokenTypes.REQUIRED_KEYWORD) {
                    if (!b3) {
                        OCParsing.this.a("'@optional/@required' is allowed in protocol declarations only");
                    }
                    OCParsing.this.aY();
                }
                else if (OCParsing.this.aF() == OCParsing.OBJC_CLASS_KEYWORD) {
                    this.a();
                }
                else if (OCParsing.this.aF() == OCTokenTypes.MINUS || OCParsing.this.aF() == OCTokenTypes.PLUS) {
                    OCParsing.this.u();
                }
                else if (OCParsing.this.aF() == OCTokenTypes.PROPERTY_KEYWORD) {
                    OCParsing.this.aP();
                }
                else if (OCParsing.this.aF() == OCTokenTypes.SYNTHESIZE_KEYWORD || OCParsing.this.aF() == OCTokenTypes.DYNAMIC_KEYWORD) {
                    OCParsing.this.a3();
                }
                else if (OCParsing.this.aF() == OCTokenTypes.SEMICOLON) {
                    OCParsing.this.aY();
                }
                else {
                    if (OCParsing.this.a(DeclarationContext.FILE) != DeclarationParsingResult.FAIL) {
                        continue;
                    }
                    OCParsing.this.a("Method or declaration expected", OCParsing.this.BLOCK_STATEMENT_PARSER, OCElementTypes.UNKNOWN_CPP_CODE);
                }
            }
            if (b2) {
                if (OCParsing.this.aF() == OCTokenTypes.END_KEYWORD) {
                    OCParsing.this.aY();
                }
            }
            else {
                OCParsing.this.a(OCTokenTypes.END_KEYWORD, "@end missing");
            }
            OCParsing.this.b(access$300, b ? OCElementTypes.INTERFACE : (b2 ? OCElementTypes.IMPLEMENTATION : OCElementTypes.PROTOCOL));
            return true;
        }
        
        private void a() {
            final PsiBuilder.Marker access$300 = OCParsing.this.a7();
            final boolean b = OCParsing.this.aF() == OCTokenTypes.PROTOCOL_KEYWORD;
            OCParsing.this.aY();
            while (true) {
                final PsiBuilder.Marker access$301 = OCParsing.this.a7();
                OCParsing.this.a("Expecting class name", false, !b, b, false);
                this.a(null);
                OCParsing.this.b(access$301, OCElementTypes.CLASS_PREDEF);
                if (OCParsing.this.aF() != OCTokenTypes.COMMA) {
                    break;
                }
                OCParsing.this.aY();
            }
            OCParsing.this.a(OCTokenTypes.SEMICOLON, "Missing ';'");
            OCParsing.this.b(access$300, OCElementTypes.CLASS_PREDEF_LIST);
        }
        
        private PsiBuilder.Marker a(@Nullable final PsiBuilder.Marker marker) {
            if (OCParsing.this.aF() != OCTokenTypes.LT) {
                return marker;
            }
            final PsiBuilder.Marker access$300 = OCParsing.this.a7();
            OCParsing.this.aY();
            while (true) {
                final PsiBuilder.Marker access$301 = OCParsing.this.a7();
                if (OCParsing.this.aF() == OCTokenTypes.COVARIANT_KEYWORD || OCParsing.this.aF() == OCTokenTypes.CONTRAVARIANT_KEYWORD) {
                    OCParsing.this.aY();
                }
                this.myGenericParameterNames.add(OCParsing.this.a("Expected type parameter name", false, true, false, false));
                OCParsing.this.n();
                OCParsing.this.b(access$301, OCElementTypes.GENERIC_PARAMETER);
                if (OCParsing.this.aF() != OCTokenTypes.COMMA) {
                    break;
                }
                OCParsing.this.aY();
            }
            OCParsing.this.X();
            OCParsing.this.b(access$300, OCElementTypes.GENERIC_PARAMETERS_LIST);
            this.myHasGenericParametersForSure = true;
            if (marker != null) {
                marker.drop();
                return OCParsing.this.a7();
            }
            return null;
        }
        
        private PsiBuilder.Marker a(final PsiBuilder.Marker marker, final Ref<Boolean> ref) {
            if (OCParsing.this.aF() != OCTokenTypes.LT) {
                ref.set((Object)null);
                if (!this.myHasProtocolListForSure) {
                    this.myHasProtocolListForSure = true;
                    marker.precede().doneBefore((IElementType)OCElementTypes.PROTOCOL_LIST, marker);
                }
                return marker;
            }
            final PsiBuilder.Marker access$300 = OCParsing.this.a7();
            OCParsing.this.aY();
            while (true) {
                final PsiBuilder.Marker access$301 = OCParsing.this.a7();
                if (OCParsing.this.aF() == OCTokenTypes.COVARIANT_KEYWORD || OCParsing.this.aF() == OCTokenTypes.CONTRAVARIANT_KEYWORD) {
                    access$301.drop();
                    OCParsing.this.i(access$300);
                    ref.set((Object)false);
                    if (!this.myHasProtocolListForSure) {
                        this.myHasProtocolListForSure = true;
                        marker.precede().doneBefore((IElementType)OCElementTypes.PROTOCOL_LIST, marker);
                    }
                    return marker;
                }
                OCParsing.this.a(OCTokenTypes.IDENTIFIER, "protocol name expected");
                OCParsing.this.b(access$301, OCElementTypes.REFERENCE_ELEMENT);
                if (OCParsing.this.aF() != OCTokenTypes.COMMA) {
                    this.myHasProtocolListForSure = true;
                    OCParsing.this.a(OCTokenTypes.GT, "Missing '>'");
                    OCParsing.this.b(access$300, OCElementTypes.PROTOCOL_LIST);
                    marker.drop();
                    ref.set((Object)true);
                    return OCParsing.this.a7();
                }
                OCParsing.this.aY();
            }
        }
        
        private PsiBuilder.Marker b(final PsiBuilder.Marker marker) {
            if (OCParsing.this.aF() == OCTokenTypes.COLON) {
                final PsiBuilder.Marker access$300 = OCParsing.this.a7();
                OCParsing.this.aY();
                final PsiBuilder.Marker access$301 = OCParsing.this.a7();
                OCParsing.this.a(OCTokenTypes.IDENTIFIER, "super class name expected");
                final PsiBuilder.Marker access$302 = OCParsing.this.a7();
                if (OCParsing.this.aF() == OCTokenTypes.LT) {
                    final boolean b = OCParsing.this.m() > 1;
                    if (b || OCParsing.this.detectAngleBracketedExpressionType() != AngleBracketedExpressionType.PROTOCOL_LIST) {
                        OCParsing.this.q(b);
                    }
                    access$302.drop();
                }
                else {
                    OCParsing.this.i(access$302);
                }
                OCParsing.this.b(access$301, OCElementTypes.REFERENCE_ELEMENT);
                OCParsing.this.b(access$300, OCElementTypes.SUPER_CLASS_REF);
                marker.drop();
                return OCParsing.this.a7();
            }
            marker.precede().doneBefore((IElementType)OCElementTypes.SUPER_CLASS_REF, marker);
            return marker;
        }
    }
    
    private static class DumbNodeInfo
    {
        final PsiBuilder.Marker marker;
        final int childDepth;
        int childCount;
        
        public DumbNodeInfo(final PsiBuilder.Marker marker, final int childDepth) {
            this.marker = marker;
            this.childDepth = childDepth;
        }
    }
    
    private enum DeclarationParsingResult
    {
        PARSED, 
        PARSED_WITHOUT_SEMICOLON, 
        FAIL;
    }
    
    private enum StatementParsingResult
    {
        PARSED, 
        PARSED_WITHOUT_SEMICOLON, 
        FAIL;
    }
    
    private enum LoopType
    {
        C_FOR_LOOP, 
        OBJ_FOREACH_LOOP, 
        C11_FOREACH_LOOP;
    }
    
    static class DeclaratorsParsingResult
    {
        Type myType;
        List<String> mySingleNames;
        
        DeclaratorsParsingResult(final Type myType, final List<String> mySingleNames) {
            this.myType = Type.FAIL;
            this.myType = myType;
            this.mySingleNames = mySingleNames;
        }
        
        public enum Type
        {
            PARSED_FUNCTION, 
            PARSED, 
            FAIL;
            
            public boolean isOk() {
                return this == Type.PARSED_FUNCTION || this == Type.PARSED;
            }
        }
    }
    
    private enum DeclarationContext
    {
        FILE, 
        STRUCT, 
        PARAMETER_LIST, 
        CODE_BLOCK, 
        CPP_NEW_EXPRESSION, 
        SIZEOF, 
        TRAILING_RETURN_TYPE;
    }
    
    private enum DeclaratorParsingResult
    {
        PARSED_FUNCTION, 
        PARSED, 
        FAIL, 
        PARSED_EMPTY, 
        FAIL_EMPTY;
        
        public boolean isOk() {
            return this == DeclaratorParsingResult.PARSED_FUNCTION || this == DeclaratorParsingResult.PARSED || this == DeclaratorParsingResult.PARSED_EMPTY;
        }
        
        public boolean isEmpty() {
            return this == DeclaratorParsingResult.PARSED_EMPTY || this == DeclaratorParsingResult.FAIL_EMPTY;
        }
        
        public static DeclaratorParsingResult parsed(final boolean b, final boolean b2) {
            return b2 ? DeclaratorParsingResult.PARSED_FUNCTION : (b ? DeclaratorParsingResult.PARSED_EMPTY : DeclaratorParsingResult.PARSED);
        }
        
        public static DeclaratorParsingResult fail(final boolean b) {
            return b ? DeclaratorParsingResult.FAIL_EMPTY : DeclaratorParsingResult.FAIL;
        }
    }
    
    private enum TypeParsingResult
    {
        TYPE_PARSED_FOR_SURE, 
        TYPE_PARSED, 
        EMPTY_TYPE_PARSED, 
        NONE, 
        UNKNOWN;
        
        public boolean isEmpty() {
            return this == TypeParsingResult.NONE || this == TypeParsingResult.EMPTY_TYPE_PARSED;
        }
    }
    
    private enum TypeParsingExpectation
    {
        ANY, 
        NON_VALUES, 
        NON_EXACT_VALUES, 
        ONLY_TYPES;
    }
    
    private interface BlockParser
    {
        void parseBlock();
    }
}
